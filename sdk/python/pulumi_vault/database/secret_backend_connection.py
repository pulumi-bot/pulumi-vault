# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class SecretBackendConnection(pulumi.CustomResource):
    allowed_roles: pulumi.Output[list]
    """
    A list of roles that are allowed to use this connection.
    """
    backend: pulumi.Output[str]
    """
    Unique name of the Vault mount to configure.
    """
    cassandra: pulumi.Output[dict]
    """
    Connection parameters for the cassandra-database-plugin plugin.

      * `connectTimeout` (`float`)
      * `hosts` (`list`)
      * `insecureTls` (`bool`)
      * `password` (`str`)
      * `pemBundle` (`str`)
      * `pemJson` (`str`)
      * `port` (`float`)
      * `protocolVersion` (`float`)
      * `tls` (`bool`)
      * `username` (`str`)
    """
    data: pulumi.Output[dict]
    """
    A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
    """
    hana: pulumi.Output[dict]
    """
    Connection parameters for the hana-database-plugin plugin.

      * `connectionUrl` (`str`)
      * `maxConnectionLifetime` (`float`)
      * `maxIdleConnections` (`float`)
      * `maxOpenConnections` (`float`)
    """
    mongodb: pulumi.Output[dict]
    """
    Connection parameters for the mongodb-database-plugin plugin.

      * `connectionUrl` (`str`)
      * `maxConnectionLifetime` (`float`)
      * `maxIdleConnections` (`float`)
      * `maxOpenConnections` (`float`)
    """
    mssql: pulumi.Output[dict]
    """
    Connection parameters for the mssql-database-plugin plugin.

      * `connectionUrl` (`str`)
      * `maxConnectionLifetime` (`float`)
      * `maxIdleConnections` (`float`)
      * `maxOpenConnections` (`float`)
    """
    mysql: pulumi.Output[dict]
    """
    Connection parameters for the mysql-database-plugin plugin.

      * `connectionUrl` (`str`)
      * `maxConnectionLifetime` (`float`)
      * `maxIdleConnections` (`float`)
      * `maxOpenConnections` (`float`)
    """
    mysql_aurora: pulumi.Output[dict]
    """
    Connection parameters for the mysql-aurora-database-plugin plugin.

      * `connectionUrl` (`str`)
      * `maxConnectionLifetime` (`float`)
      * `maxIdleConnections` (`float`)
      * `maxOpenConnections` (`float`)
    """
    mysql_legacy: pulumi.Output[dict]
    """
    Connection parameters for the mysql-legacy-database-plugin plugin.

      * `connectionUrl` (`str`)
      * `maxConnectionLifetime` (`float`)
      * `maxIdleConnections` (`float`)
      * `maxOpenConnections` (`float`)
    """
    mysql_rds: pulumi.Output[dict]
    """
    Connection parameters for the mysql-rds-database-plugin plugin.

      * `connectionUrl` (`str`)
      * `maxConnectionLifetime` (`float`)
      * `maxIdleConnections` (`float`)
      * `maxOpenConnections` (`float`)
    """
    name: pulumi.Output[str]
    """
    Name of the database connection.
    """
    oracle: pulumi.Output[dict]
    """
    Connection parameters for the oracle-database-plugin plugin.

      * `connectionUrl` (`str`)
      * `maxConnectionLifetime` (`float`)
      * `maxIdleConnections` (`float`)
      * `maxOpenConnections` (`float`)
    """
    postgresql: pulumi.Output[dict]
    """
    Connection parameters for the postgresql-database-plugin plugin.

      * `connectionUrl` (`str`)
      * `maxConnectionLifetime` (`float`)
      * `maxIdleConnections` (`float`)
      * `maxOpenConnections` (`float`)
    """
    root_rotation_statements: pulumi.Output[list]
    """
    A list of database statements to be executed to rotate the root user's credentials.
    """
    verify_connection: pulumi.Output[bool]
    """
    Specifies if the connection is verified during initial configuration.
    """
    def __init__(__self__, resource_name, opts=None, allowed_roles=None, backend=None, cassandra=None, data=None, hana=None, mongodb=None, mssql=None, mysql=None, mysql_aurora=None, mysql_legacy=None, mysql_rds=None, name=None, oracle=None, postgresql=None, root_rotation_statements=None, verify_connection=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a SecretBackendConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] allowed_roles: A list of roles that are allowed to use this connection.
        :param pulumi.Input[str] backend: Unique name of the Vault mount to configure.
        :param pulumi.Input[dict] cassandra: Connection parameters for the cassandra-database-plugin plugin.
        :param pulumi.Input[dict] data: A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
        :param pulumi.Input[dict] hana: Connection parameters for the hana-database-plugin plugin.
        :param pulumi.Input[dict] mongodb: Connection parameters for the mongodb-database-plugin plugin.
        :param pulumi.Input[dict] mssql: Connection parameters for the mssql-database-plugin plugin.
        :param pulumi.Input[dict] mysql: Connection parameters for the mysql-database-plugin plugin.
        :param pulumi.Input[dict] mysql_aurora: Connection parameters for the mysql-aurora-database-plugin plugin.
        :param pulumi.Input[dict] mysql_legacy: Connection parameters for the mysql-legacy-database-plugin plugin.
        :param pulumi.Input[dict] mysql_rds: Connection parameters for the mysql-rds-database-plugin plugin.
        :param pulumi.Input[str] name: Name of the database connection.
        :param pulumi.Input[dict] oracle: Connection parameters for the oracle-database-plugin plugin.
        :param pulumi.Input[dict] postgresql: Connection parameters for the postgresql-database-plugin plugin.
        :param pulumi.Input[list] root_rotation_statements: A list of database statements to be executed to rotate the root user's credentials.
        :param pulumi.Input[bool] verify_connection: Specifies if the connection is verified during initial configuration.

        The **cassandra** object supports the following:

          * `connectTimeout` (`pulumi.Input[float]`)
          * `hosts` (`pulumi.Input[list]`)
          * `insecureTls` (`pulumi.Input[bool]`)
          * `password` (`pulumi.Input[str]`)
          * `pemBundle` (`pulumi.Input[str]`)
          * `pemJson` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
          * `protocolVersion` (`pulumi.Input[float]`)
          * `tls` (`pulumi.Input[bool]`)
          * `username` (`pulumi.Input[str]`)

        The **hana** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **mongodb** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **mssql** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **mysql** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **mysql_aurora** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **mysql_legacy** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **mysql_rds** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **oracle** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **postgresql** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allowed_roles'] = allowed_roles
            if backend is None:
                raise TypeError("Missing required property 'backend'")
            __props__['backend'] = backend
            __props__['cassandra'] = cassandra
            __props__['data'] = data
            __props__['hana'] = hana
            __props__['mongodb'] = mongodb
            __props__['mssql'] = mssql
            __props__['mysql'] = mysql
            __props__['mysql_aurora'] = mysql_aurora
            __props__['mysql_legacy'] = mysql_legacy
            __props__['mysql_rds'] = mysql_rds
            __props__['name'] = name
            __props__['oracle'] = oracle
            __props__['postgresql'] = postgresql
            __props__['root_rotation_statements'] = root_rotation_statements
            __props__['verify_connection'] = verify_connection
        super(SecretBackendConnection, __self__).__init__(
            'vault:database/secretBackendConnection:SecretBackendConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, allowed_roles=None, backend=None, cassandra=None, data=None, hana=None, mongodb=None, mssql=None, mysql=None, mysql_aurora=None, mysql_legacy=None, mysql_rds=None, name=None, oracle=None, postgresql=None, root_rotation_statements=None, verify_connection=None):
        """
        Get an existing SecretBackendConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] allowed_roles: A list of roles that are allowed to use this connection.
        :param pulumi.Input[str] backend: Unique name of the Vault mount to configure.
        :param pulumi.Input[dict] cassandra: Connection parameters for the cassandra-database-plugin plugin.
        :param pulumi.Input[dict] data: A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
        :param pulumi.Input[dict] hana: Connection parameters for the hana-database-plugin plugin.
        :param pulumi.Input[dict] mongodb: Connection parameters for the mongodb-database-plugin plugin.
        :param pulumi.Input[dict] mssql: Connection parameters for the mssql-database-plugin plugin.
        :param pulumi.Input[dict] mysql: Connection parameters for the mysql-database-plugin plugin.
        :param pulumi.Input[dict] mysql_aurora: Connection parameters for the mysql-aurora-database-plugin plugin.
        :param pulumi.Input[dict] mysql_legacy: Connection parameters for the mysql-legacy-database-plugin plugin.
        :param pulumi.Input[dict] mysql_rds: Connection parameters for the mysql-rds-database-plugin plugin.
        :param pulumi.Input[str] name: Name of the database connection.
        :param pulumi.Input[dict] oracle: Connection parameters for the oracle-database-plugin plugin.
        :param pulumi.Input[dict] postgresql: Connection parameters for the postgresql-database-plugin plugin.
        :param pulumi.Input[list] root_rotation_statements: A list of database statements to be executed to rotate the root user's credentials.
        :param pulumi.Input[bool] verify_connection: Specifies if the connection is verified during initial configuration.

        The **cassandra** object supports the following:

          * `connectTimeout` (`pulumi.Input[float]`)
          * `hosts` (`pulumi.Input[list]`)
          * `insecureTls` (`pulumi.Input[bool]`)
          * `password` (`pulumi.Input[str]`)
          * `pemBundle` (`pulumi.Input[str]`)
          * `pemJson` (`pulumi.Input[str]`)
          * `port` (`pulumi.Input[float]`)
          * `protocolVersion` (`pulumi.Input[float]`)
          * `tls` (`pulumi.Input[bool]`)
          * `username` (`pulumi.Input[str]`)

        The **hana** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **mongodb** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **mssql** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **mysql** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **mysql_aurora** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **mysql_legacy** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **mysql_rds** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **oracle** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)

        The **postgresql** object supports the following:

          * `connectionUrl` (`pulumi.Input[str]`)
          * `maxConnectionLifetime` (`pulumi.Input[float]`)
          * `maxIdleConnections` (`pulumi.Input[float]`)
          * `maxOpenConnections` (`pulumi.Input[float]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["allowed_roles"] = allowed_roles
        __props__["backend"] = backend
        __props__["cassandra"] = cassandra
        __props__["data"] = data
        __props__["hana"] = hana
        __props__["mongodb"] = mongodb
        __props__["mssql"] = mssql
        __props__["mysql"] = mysql
        __props__["mysql_aurora"] = mysql_aurora
        __props__["mysql_legacy"] = mysql_legacy
        __props__["mysql_rds"] = mysql_rds
        __props__["name"] = name
        __props__["oracle"] = oracle
        __props__["postgresql"] = postgresql
        __props__["root_rotation_statements"] = root_rotation_statements
        __props__["verify_connection"] = verify_connection
        return SecretBackendConnection(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

