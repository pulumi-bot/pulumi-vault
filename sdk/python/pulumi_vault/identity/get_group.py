# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetGroupResult:
    """
    A collection of values returned by getGroup.
    """
    def __init__(__self__, alias_canonical_id=None, alias_creation_time=None, alias_id=None, alias_last_update_time=None, alias_merged_from_canonical_ids=None, alias_metadata=None, alias_mount_accessor=None, alias_mount_path=None, alias_mount_type=None, alias_name=None, creation_time=None, data_json=None, group_id=None, group_name=None, id=None, last_update_time=None, member_entity_ids=None, member_group_ids=None, metadata=None, modify_index=None, namespace_id=None, parent_group_ids=None, policies=None, type=None):
        if alias_canonical_id and not isinstance(alias_canonical_id, str):
            raise TypeError("Expected argument 'alias_canonical_id' to be a str")
        __self__.alias_canonical_id = alias_canonical_id
        if alias_creation_time and not isinstance(alias_creation_time, str):
            raise TypeError("Expected argument 'alias_creation_time' to be a str")
        __self__.alias_creation_time = alias_creation_time
        if alias_id and not isinstance(alias_id, str):
            raise TypeError("Expected argument 'alias_id' to be a str")
        __self__.alias_id = alias_id
        if alias_last_update_time and not isinstance(alias_last_update_time, str):
            raise TypeError("Expected argument 'alias_last_update_time' to be a str")
        __self__.alias_last_update_time = alias_last_update_time
        if alias_merged_from_canonical_ids and not isinstance(alias_merged_from_canonical_ids, list):
            raise TypeError("Expected argument 'alias_merged_from_canonical_ids' to be a list")
        __self__.alias_merged_from_canonical_ids = alias_merged_from_canonical_ids
        if alias_metadata and not isinstance(alias_metadata, dict):
            raise TypeError("Expected argument 'alias_metadata' to be a dict")
        __self__.alias_metadata = alias_metadata
        if alias_mount_accessor and not isinstance(alias_mount_accessor, str):
            raise TypeError("Expected argument 'alias_mount_accessor' to be a str")
        __self__.alias_mount_accessor = alias_mount_accessor
        if alias_mount_path and not isinstance(alias_mount_path, str):
            raise TypeError("Expected argument 'alias_mount_path' to be a str")
        __self__.alias_mount_path = alias_mount_path
        if alias_mount_type and not isinstance(alias_mount_type, str):
            raise TypeError("Expected argument 'alias_mount_type' to be a str")
        __self__.alias_mount_type = alias_mount_type
        if alias_name and not isinstance(alias_name, str):
            raise TypeError("Expected argument 'alias_name' to be a str")
        __self__.alias_name = alias_name
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        __self__.creation_time = creation_time
        if data_json and not isinstance(data_json, str):
            raise TypeError("Expected argument 'data_json' to be a str")
        __self__.data_json = data_json
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        __self__.group_id = group_id
        if group_name and not isinstance(group_name, str):
            raise TypeError("Expected argument 'group_name' to be a str")
        __self__.group_name = group_name
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
        if last_update_time and not isinstance(last_update_time, str):
            raise TypeError("Expected argument 'last_update_time' to be a str")
        __self__.last_update_time = last_update_time
        if member_entity_ids and not isinstance(member_entity_ids, list):
            raise TypeError("Expected argument 'member_entity_ids' to be a list")
        __self__.member_entity_ids = member_entity_ids
        if member_group_ids and not isinstance(member_group_ids, list):
            raise TypeError("Expected argument 'member_group_ids' to be a list")
        __self__.member_group_ids = member_group_ids
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        __self__.metadata = metadata
        if modify_index and not isinstance(modify_index, float):
            raise TypeError("Expected argument 'modify_index' to be a float")
        __self__.modify_index = modify_index
        if namespace_id and not isinstance(namespace_id, str):
            raise TypeError("Expected argument 'namespace_id' to be a str")
        __self__.namespace_id = namespace_id
        if parent_group_ids and not isinstance(parent_group_ids, list):
            raise TypeError("Expected argument 'parent_group_ids' to be a list")
        __self__.parent_group_ids = parent_group_ids
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        __self__.policies = policies
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
class AwaitableGetGroupResult(GetGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupResult(
            alias_canonical_id=self.alias_canonical_id,
            alias_creation_time=self.alias_creation_time,
            alias_id=self.alias_id,
            alias_last_update_time=self.alias_last_update_time,
            alias_merged_from_canonical_ids=self.alias_merged_from_canonical_ids,
            alias_metadata=self.alias_metadata,
            alias_mount_accessor=self.alias_mount_accessor,
            alias_mount_path=self.alias_mount_path,
            alias_mount_type=self.alias_mount_type,
            alias_name=self.alias_name,
            creation_time=self.creation_time,
            data_json=self.data_json,
            group_id=self.group_id,
            group_name=self.group_name,
            id=self.id,
            last_update_time=self.last_update_time,
            member_entity_ids=self.member_entity_ids,
            member_group_ids=self.member_group_ids,
            metadata=self.metadata,
            modify_index=self.modify_index,
            namespace_id=self.namespace_id,
            parent_group_ids=self.parent_group_ids,
            policies=self.policies,
            type=self.type)

def get_group(alias_id=None,alias_mount_accessor=None,alias_name=None,group_id=None,group_name=None,opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()


    __args__['aliasId'] = alias_id
    __args__['aliasMountAccessor'] = alias_mount_accessor
    __args__['aliasName'] = alias_name
    __args__['groupId'] = group_id
    __args__['groupName'] = group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('vault:identity/getGroup:getGroup', __args__, opts=opts).value

    return AwaitableGetGroupResult(
        alias_canonical_id=__ret__.get('aliasCanonicalId'),
        alias_creation_time=__ret__.get('aliasCreationTime'),
        alias_id=__ret__.get('aliasId'),
        alias_last_update_time=__ret__.get('aliasLastUpdateTime'),
        alias_merged_from_canonical_ids=__ret__.get('aliasMergedFromCanonicalIds'),
        alias_metadata=__ret__.get('aliasMetadata'),
        alias_mount_accessor=__ret__.get('aliasMountAccessor'),
        alias_mount_path=__ret__.get('aliasMountPath'),
        alias_mount_type=__ret__.get('aliasMountType'),
        alias_name=__ret__.get('aliasName'),
        creation_time=__ret__.get('creationTime'),
        data_json=__ret__.get('dataJson'),
        group_id=__ret__.get('groupId'),
        group_name=__ret__.get('groupName'),
        id=__ret__.get('id'),
        last_update_time=__ret__.get('lastUpdateTime'),
        member_entity_ids=__ret__.get('memberEntityIds'),
        member_group_ids=__ret__.get('memberGroupIds'),
        metadata=__ret__.get('metadata'),
        modify_index=__ret__.get('modifyIndex'),
        namespace_id=__ret__.get('namespaceId'),
        parent_group_ids=__ret__.get('parentGroupIds'),
        policies=__ret__.get('policies'),
        type=__ret__.get('type'))
