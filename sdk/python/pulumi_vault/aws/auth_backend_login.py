# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class AuthBackendLogin(pulumi.CustomResource):
    accessor: pulumi.Output[str]
    """
    The accessor returned from Vault for this token.
    """
    auth_type: pulumi.Output[str]
    """
    The auth method used to generate this token.
    """
    backend: pulumi.Output[str]
    """
    AWS Auth Backend to read the token from.
    """
    client_token: pulumi.Output[str]
    """
    The token returned by Vault.
    """
    iam_http_request_method: pulumi.Output[str]
    """
    The HTTP method used in the signed request.
    """
    iam_request_body: pulumi.Output[str]
    """
    The Base64-encoded body of the signed request.
    """
    iam_request_headers: pulumi.Output[str]
    """
    The Base64-encoded, JSON serialized representation of the sts:GetCallerIdentity HTTP request headers.
    """
    iam_request_url: pulumi.Output[str]
    """
    The Base64-encoded HTTP URL used in the signed request.
    """
    identity: pulumi.Output[str]
    """
    Base64-encoded EC2 instance identity document to authenticate with.
    """
    lease_duration: pulumi.Output[float]
    """
    Lease duration in seconds relative to the time in lease_start_time.
    """
    lease_start_time: pulumi.Output[str]
    """
    Time at which the lease was read, using the clock of the system where Terraform was running
    """
    metadata: pulumi.Output[dict]
    """
    The metadata reported by the Vault server.
    """
    nonce: pulumi.Output[str]
    """
    The nonce to be used for subsequent login requests.
    """
    pkcs7: pulumi.Output[str]
    """
    PKCS7 signature of the identity document to authenticate with, with all newline characters removed.
    """
    policies: pulumi.Output[list]
    """
    The policies assigned to this token.
    """
    renewable: pulumi.Output[bool]
    """
    True if the duration of this lease can be extended through renewal.
    """
    role: pulumi.Output[str]
    """
    AWS Auth Role to read the token from.
    """
    signature: pulumi.Output[str]
    """
    Base64-encoded SHA256 RSA signature of the instance identtiy document to authenticate with.
    """
    def __init__(__self__, resource_name, opts=None, backend=None, iam_http_request_method=None, iam_request_body=None, iam_request_headers=None, iam_request_url=None, identity=None, nonce=None, pkcs7=None, role=None, signature=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a AuthBackendLogin resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backend: AWS Auth Backend to read the token from.
        :param pulumi.Input[str] iam_http_request_method: The HTTP method used in the signed request.
        :param pulumi.Input[str] iam_request_body: The Base64-encoded body of the signed request.
        :param pulumi.Input[str] iam_request_headers: The Base64-encoded, JSON serialized representation of the sts:GetCallerIdentity HTTP request headers.
        :param pulumi.Input[str] iam_request_url: The Base64-encoded HTTP URL used in the signed request.
        :param pulumi.Input[str] identity: Base64-encoded EC2 instance identity document to authenticate with.
        :param pulumi.Input[str] nonce: The nonce to be used for subsequent login requests.
        :param pulumi.Input[str] pkcs7: PKCS7 signature of the identity document to authenticate with, with all newline characters removed.
        :param pulumi.Input[str] role: AWS Auth Role to read the token from.
        :param pulumi.Input[str] signature: Base64-encoded SHA256 RSA signature of the instance identtiy document to authenticate with.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['backend'] = backend
            __props__['iam_http_request_method'] = iam_http_request_method
            __props__['iam_request_body'] = iam_request_body
            __props__['iam_request_headers'] = iam_request_headers
            __props__['iam_request_url'] = iam_request_url
            __props__['identity'] = identity
            __props__['nonce'] = nonce
            __props__['pkcs7'] = pkcs7
            __props__['role'] = role
            __props__['signature'] = signature
            __props__['accessor'] = None
            __props__['auth_type'] = None
            __props__['client_token'] = None
            __props__['lease_duration'] = None
            __props__['lease_start_time'] = None
            __props__['metadata'] = None
            __props__['policies'] = None
            __props__['renewable'] = None
        super(AuthBackendLogin, __self__).__init__(
            'vault:aws/authBackendLogin:AuthBackendLogin',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, accessor=None, auth_type=None, backend=None, client_token=None, iam_http_request_method=None, iam_request_body=None, iam_request_headers=None, iam_request_url=None, identity=None, lease_duration=None, lease_start_time=None, metadata=None, nonce=None, pkcs7=None, policies=None, renewable=None, role=None, signature=None):
        """
        Get an existing AuthBackendLogin resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accessor: The accessor returned from Vault for this token.
        :param pulumi.Input[str] auth_type: The auth method used to generate this token.
        :param pulumi.Input[str] backend: AWS Auth Backend to read the token from.
        :param pulumi.Input[str] client_token: The token returned by Vault.
        :param pulumi.Input[str] iam_http_request_method: The HTTP method used in the signed request.
        :param pulumi.Input[str] iam_request_body: The Base64-encoded body of the signed request.
        :param pulumi.Input[str] iam_request_headers: The Base64-encoded, JSON serialized representation of the sts:GetCallerIdentity HTTP request headers.
        :param pulumi.Input[str] iam_request_url: The Base64-encoded HTTP URL used in the signed request.
        :param pulumi.Input[str] identity: Base64-encoded EC2 instance identity document to authenticate with.
        :param pulumi.Input[float] lease_duration: Lease duration in seconds relative to the time in lease_start_time.
        :param pulumi.Input[str] lease_start_time: Time at which the lease was read, using the clock of the system where Terraform was running
        :param pulumi.Input[dict] metadata: The metadata reported by the Vault server.
        :param pulumi.Input[str] nonce: The nonce to be used for subsequent login requests.
        :param pulumi.Input[str] pkcs7: PKCS7 signature of the identity document to authenticate with, with all newline characters removed.
        :param pulumi.Input[list] policies: The policies assigned to this token.
        :param pulumi.Input[bool] renewable: True if the duration of this lease can be extended through renewal.
        :param pulumi.Input[str] role: AWS Auth Role to read the token from.
        :param pulumi.Input[str] signature: Base64-encoded SHA256 RSA signature of the instance identtiy document to authenticate with.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["accessor"] = accessor
        __props__["auth_type"] = auth_type
        __props__["backend"] = backend
        __props__["client_token"] = client_token
        __props__["iam_http_request_method"] = iam_http_request_method
        __props__["iam_request_body"] = iam_request_body
        __props__["iam_request_headers"] = iam_request_headers
        __props__["iam_request_url"] = iam_request_url
        __props__["identity"] = identity
        __props__["lease_duration"] = lease_duration
        __props__["lease_start_time"] = lease_start_time
        __props__["metadata"] = metadata
        __props__["nonce"] = nonce
        __props__["pkcs7"] = pkcs7
        __props__["policies"] = policies
        __props__["renewable"] = renewable
        __props__["role"] = role
        __props__["signature"] = signature
        return AuthBackendLogin(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

