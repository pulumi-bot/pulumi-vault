// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage [Duo MFA](https://www.vaultproject.io/docs/enterprise/mfa/mfa-duo.html).
// 
// **Note** this feature is available only with Vault Enterprise.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/mfa_duo.html.markdown.
type MfaDuo struct {
	s *pulumi.ResourceState
}

// NewMfaDuo registers a new resource with the given unique name, arguments, and options.
func NewMfaDuo(ctx *pulumi.Context,
	name string, args *MfaDuoArgs, opts ...pulumi.ResourceOpt) (*MfaDuo, error) {
	if args == nil || args.ApiHostname == nil {
		return nil, errors.New("missing required argument 'ApiHostname'")
	}
	if args == nil || args.IntegrationKey == nil {
		return nil, errors.New("missing required argument 'IntegrationKey'")
	}
	if args == nil || args.MountAccessor == nil {
		return nil, errors.New("missing required argument 'MountAccessor'")
	}
	if args == nil || args.SecretKey == nil {
		return nil, errors.New("missing required argument 'SecretKey'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["apiHostname"] = nil
		inputs["integrationKey"] = nil
		inputs["mountAccessor"] = nil
		inputs["name"] = nil
		inputs["pushInfo"] = nil
		inputs["secretKey"] = nil
		inputs["usernameFormat"] = nil
	} else {
		inputs["apiHostname"] = args.ApiHostname
		inputs["integrationKey"] = args.IntegrationKey
		inputs["mountAccessor"] = args.MountAccessor
		inputs["name"] = args.Name
		inputs["pushInfo"] = args.PushInfo
		inputs["secretKey"] = args.SecretKey
		inputs["usernameFormat"] = args.UsernameFormat
	}
	s, err := ctx.RegisterResource("vault:index/mfaDuo:MfaDuo", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MfaDuo{s: s}, nil
}

// GetMfaDuo gets an existing MfaDuo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMfaDuo(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MfaDuoState, opts ...pulumi.ResourceOpt) (*MfaDuo, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["apiHostname"] = state.ApiHostname
		inputs["integrationKey"] = state.IntegrationKey
		inputs["mountAccessor"] = state.MountAccessor
		inputs["name"] = state.Name
		inputs["pushInfo"] = state.PushInfo
		inputs["secretKey"] = state.SecretKey
		inputs["usernameFormat"] = state.UsernameFormat
	}
	s, err := ctx.ReadResource("vault:index/mfaDuo:MfaDuo", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &MfaDuo{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *MfaDuo) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *MfaDuo) ID() pulumi.IDOutput {
	return r.s.ID()
}

// API hostname for Duo.
func (r *MfaDuo) ApiHostname() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["apiHostname"])
}

// Integration key for Duo.
func (r *MfaDuo) IntegrationKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["integrationKey"])
}

// The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated
// with this mount as the username in the mapping.
func (r *MfaDuo) MountAccessor() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["mountAccessor"])
}

// Name of the MFA method.
func (r *MfaDuo) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Push information for Duo.
func (r *MfaDuo) PushInfo() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["pushInfo"])
}

// Secret key for Duo.
func (r *MfaDuo) SecretKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["secretKey"])
}

// A format string for mapping Identity names to MFA method names. Values to substitute should be placed in `{{}}`.
func (r *MfaDuo) UsernameFormat() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["usernameFormat"])
}

// Input properties used for looking up and filtering MfaDuo resources.
type MfaDuoState struct {
	// API hostname for Duo.
	ApiHostname interface{}
	// Integration key for Duo.
	IntegrationKey interface{}
	// The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases
	// associated with this mount as the username in the mapping.
	MountAccessor interface{}
	// Name of the MFA method.
	Name interface{}
	// Push information for Duo.
	PushInfo interface{}
	// Secret key for Duo.
	SecretKey interface{}
	// A format string for mapping Identity names to MFA method names. Values to substitute should be placed in `{{}}`.
	UsernameFormat interface{}
}

// The set of arguments for constructing a MfaDuo resource.
type MfaDuoArgs struct {
	// API hostname for Duo.
	ApiHostname interface{}
	// Integration key for Duo.
	IntegrationKey interface{}
	// The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases
	// associated with this mount as the username in the mapping.
	MountAccessor interface{}
	// Name of the MFA method.
	Name interface{}
	// Push information for Duo.
	PushInfo interface{}
	// Secret key for Duo.
	SecretKey interface{}
	// A format string for mapping Identity names to MFA method names. Values to substitute should be placed in `{{}}`.
	UsernameFormat interface{}
}
