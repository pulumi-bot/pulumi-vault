// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates an Identity Group for Vault. The [Identity secrets engine](https://www.vaultproject.io/docs/secrets/identity/index.html) is the identity management solution for Vault.
// 
// A group can contain multiple entities as its members. A group can also have subgroups. Policies set on the group is granted to all members of the group. During request time, when the token's entity ID is being evaluated for the policies that it has access to; along with the policies on the entity itself, policies that are inherited due to group memberships are also granted.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/identity_group.html.markdown.
type Group struct {
	s *pulumi.ResourceState
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOpt) (*Group, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["externalPolicies"] = nil
		inputs["memberEntityIds"] = nil
		inputs["memberGroupIds"] = nil
		inputs["metadata"] = nil
		inputs["name"] = nil
		inputs["policies"] = nil
		inputs["type"] = nil
	} else {
		inputs["externalPolicies"] = args.ExternalPolicies
		inputs["memberEntityIds"] = args.MemberEntityIds
		inputs["memberGroupIds"] = args.MemberGroupIds
		inputs["metadata"] = args.Metadata
		inputs["name"] = args.Name
		inputs["policies"] = args.Policies
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("vault:identity/group:Group", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Group{s: s}, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupState, opts ...pulumi.ResourceOpt) (*Group, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["externalPolicies"] = state.ExternalPolicies
		inputs["memberEntityIds"] = state.MemberEntityIds
		inputs["memberGroupIds"] = state.MemberGroupIds
		inputs["metadata"] = state.Metadata
		inputs["name"] = state.Name
		inputs["policies"] = state.Policies
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("vault:identity/group:Group", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Group{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Group) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Group) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Manage policies externally through `vault_identity_group_policies`, allows using group ID in assigned policies.
func (r *Group) ExternalPolicies() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["externalPolicies"])
}

// A list of Entity IDs to be assigned as group members. Not allowed on `external` groups.
func (r *Group) MemberEntityIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["memberEntityIds"])
}

// A list of Group IDs to be assigned as group members.
func (r *Group) MemberGroupIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["memberGroupIds"])
}

// A Map of additional metadata to associate with the group.
func (r *Group) Metadata() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["metadata"])
}

// Name of the identity group to create.
func (r *Group) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// A list of policies to apply to the group.
func (r *Group) Policies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["policies"])
}

// Type of the group, internal or external. Defaults to `internal`.
func (r *Group) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering Group resources.
type GroupState struct {
	// Manage policies externally through `vault_identity_group_policies`, allows using group ID in assigned policies.
	ExternalPolicies interface{}
	// A list of Entity IDs to be assigned as group members. Not allowed on `external` groups.
	MemberEntityIds interface{}
	// A list of Group IDs to be assigned as group members.
	MemberGroupIds interface{}
	// A Map of additional metadata to associate with the group.
	Metadata interface{}
	// Name of the identity group to create.
	Name interface{}
	// A list of policies to apply to the group.
	Policies interface{}
	// Type of the group, internal or external. Defaults to `internal`.
	Type interface{}
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// Manage policies externally through `vault_identity_group_policies`, allows using group ID in assigned policies.
	ExternalPolicies interface{}
	// A list of Entity IDs to be assigned as group members. Not allowed on `external` groups.
	MemberEntityIds interface{}
	// A list of Group IDs to be assigned as group members.
	MemberGroupIds interface{}
	// A Map of additional metadata to associate with the group.
	Metadata interface{}
	// Name of the identity group to create.
	Name interface{}
	// A list of policies to apply to the group.
	Policies interface{}
	// Type of the group, internal or external. Defaults to `internal`.
	Type interface{}
}
