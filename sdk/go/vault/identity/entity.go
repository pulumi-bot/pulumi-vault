// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/identity_entity.html.markdown.
type Entity struct {
	s *pulumi.ResourceState
}

// NewEntity registers a new resource with the given unique name, arguments, and options.
func NewEntity(ctx *pulumi.Context,
	name string, args *EntityArgs, opts ...pulumi.ResourceOpt) (*Entity, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["disabled"] = nil
		inputs["metadata"] = nil
		inputs["name"] = nil
		inputs["policies"] = nil
	} else {
		inputs["disabled"] = args.Disabled
		inputs["metadata"] = args.Metadata
		inputs["name"] = args.Name
		inputs["policies"] = args.Policies
	}
	s, err := ctx.RegisterResource("vault:identity/entity:Entity", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Entity{s: s}, nil
}

// GetEntity gets an existing Entity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntity(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EntityState, opts ...pulumi.ResourceOpt) (*Entity, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["disabled"] = state.Disabled
		inputs["metadata"] = state.Metadata
		inputs["name"] = state.Name
		inputs["policies"] = state.Policies
	}
	s, err := ctx.ReadResource("vault:identity/entity:Entity", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Entity{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Entity) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Entity) ID() pulumi.IDOutput {
	return r.s.ID()
}

// True/false Is this entity currently disabled. Defaults to `false`
func (r *Entity) Disabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["disabled"])
}

// A Map of additional metadata to associate with the user.
func (r *Entity) Metadata() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["metadata"])
}

// Name of the identity entity to create.
func (r *Entity) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// A list of policies to apply to the entity.
func (r *Entity) Policies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["policies"])
}

// Input properties used for looking up and filtering Entity resources.
type EntityState struct {
	// True/false Is this entity currently disabled. Defaults to `false`
	Disabled interface{}
	// A Map of additional metadata to associate with the user.
	Metadata interface{}
	// Name of the identity entity to create.
	Name interface{}
	// A list of policies to apply to the entity.
	Policies interface{}
}

// The set of arguments for constructing a Entity resource.
type EntityArgs struct {
	// True/false Is this entity currently disabled. Defaults to `false`
	Disabled interface{}
	// A Map of additional metadata to associate with the user.
	Metadata interface{}
	// Name of the identity entity to create.
	Name interface{}
	// A list of policies to apply to the entity.
	Policies interface{}
}
