// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package identity

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Entity struct {
	pulumi.CustomResourceState

	// Whether the entity is disabled. Disabled entities' associated tokens cannot be used, but are not revoked.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// Manage policies externally through `vault_identity_entity_policies`.
	ExternalPolicies pulumi.BoolPtrOutput `pulumi:"externalPolicies"`
	// Metadata to be associated with the entity.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// Name of the entity.
	Name pulumi.StringOutput `pulumi:"name"`
	// Policies to be tied to the entity.
	Policies pulumi.StringArrayOutput `pulumi:"policies"`
}

// NewEntity registers a new resource with the given unique name, arguments, and options.
func NewEntity(ctx *pulumi.Context,
	name string, args *EntityArgs, opts ...pulumi.ResourceOption) (*Entity, error) {
	if args == nil {
		args = &EntityArgs{}
	}
	var resource Entity
	err := ctx.RegisterResource("vault:identity/entity:Entity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntity gets an existing Entity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntityState, opts ...pulumi.ResourceOption) (*Entity, error) {
	var resource Entity
	err := ctx.ReadResource("vault:identity/entity:Entity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Entity resources.
type entityState struct {
	// Whether the entity is disabled. Disabled entities' associated tokens cannot be used, but are not revoked.
	Disabled *bool `pulumi:"disabled"`
	// Manage policies externally through `vault_identity_entity_policies`.
	ExternalPolicies *bool `pulumi:"externalPolicies"`
	// Metadata to be associated with the entity.
	Metadata map[string]string `pulumi:"metadata"`
	// Name of the entity.
	Name *string `pulumi:"name"`
	// Policies to be tied to the entity.
	Policies []string `pulumi:"policies"`
}

type EntityState struct {
	// Whether the entity is disabled. Disabled entities' associated tokens cannot be used, but are not revoked.
	Disabled pulumi.BoolPtrInput
	// Manage policies externally through `vault_identity_entity_policies`.
	ExternalPolicies pulumi.BoolPtrInput
	// Metadata to be associated with the entity.
	Metadata pulumi.StringMapInput
	// Name of the entity.
	Name pulumi.StringPtrInput
	// Policies to be tied to the entity.
	Policies pulumi.StringArrayInput
}

func (EntityState) ElementType() reflect.Type {
	return reflect.TypeOf((*entityState)(nil)).Elem()
}

type entityArgs struct {
	// Whether the entity is disabled. Disabled entities' associated tokens cannot be used, but are not revoked.
	Disabled *bool `pulumi:"disabled"`
	// Manage policies externally through `vault_identity_entity_policies`.
	ExternalPolicies *bool `pulumi:"externalPolicies"`
	// Metadata to be associated with the entity.
	Metadata map[string]string `pulumi:"metadata"`
	// Name of the entity.
	Name *string `pulumi:"name"`
	// Policies to be tied to the entity.
	Policies []string `pulumi:"policies"`
}

// The set of arguments for constructing a Entity resource.
type EntityArgs struct {
	// Whether the entity is disabled. Disabled entities' associated tokens cannot be used, but are not revoked.
	Disabled pulumi.BoolPtrInput
	// Manage policies externally through `vault_identity_entity_policies`.
	ExternalPolicies pulumi.BoolPtrInput
	// Metadata to be associated with the entity.
	Metadata pulumi.StringMapInput
	// Name of the entity.
	Name pulumi.StringPtrInput
	// Policies to be tied to the entity.
	Policies pulumi.StringArrayInput
}

func (EntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entityArgs)(nil)).Elem()
}

