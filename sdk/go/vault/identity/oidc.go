// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Configure the [Identity Tokens Backend](https://www.vaultproject.io/docs/secrets/identity/index.html#identity-tokens).
// 
// The Identity secrets engine is the identity management solution for Vault. It internally maintains
// the clients who are recognized by Vault.
// 
// > **NOTE:** Each Vault server may only have one Identity Tokens Backend configuration. Multiple configurations of the resource against the same Vault server will cause a perpetual difference.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/identity_oidc.html.markdown.
type Oidc struct {
	s *pulumi.ResourceState
}

// NewOidc registers a new resource with the given unique name, arguments, and options.
func NewOidc(ctx *pulumi.Context,
	name string, args *OidcArgs, opts ...pulumi.ResourceOpt) (*Oidc, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["issuer"] = nil
	} else {
		inputs["issuer"] = args.Issuer
	}
	s, err := ctx.RegisterResource("vault:identity/oidc:Oidc", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Oidc{s: s}, nil
}

// GetOidc gets an existing Oidc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOidc(ctx *pulumi.Context,
	name string, id pulumi.ID, state *OidcState, opts ...pulumi.ResourceOpt) (*Oidc, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["issuer"] = state.Issuer
	}
	s, err := ctx.ReadResource("vault:identity/oidc:Oidc", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Oidc{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Oidc) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Oidc) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Issuer URL to be used in the iss claim of the token. If not set, Vault's
// `apiAddr` will be used. The issuer is a case sensitive URL using the https scheme that contains
// scheme, host, and optionally, port number and path components, but no query or fragment
// components.
func (r *Oidc) Issuer() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["issuer"])
}

// Input properties used for looking up and filtering Oidc resources.
type OidcState struct {
	// Issuer URL to be used in the iss claim of the token. If not set, Vault's
	// `apiAddr` will be used. The issuer is a case sensitive URL using the https scheme that contains
	// scheme, host, and optionally, port number and path components, but no query or fragment
	// components.
	Issuer interface{}
}

// The set of arguments for constructing a Oidc resource.
type OidcArgs struct {
	// Issuer URL to be used in the iss claim of the token. If not set, Vault's
	// `apiAddr` will be used. The issuer is a case sensitive URL using the https scheme that contains
	// scheme, host, and optionally, port number and path components, but no query or fragment
	// components.
	Issuer interface{}
}
