// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/database_secret_backend_connection.html.markdown.
type SecretBackendConnection struct {
	s *pulumi.ResourceState
}

// NewSecretBackendConnection registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendConnection(ctx *pulumi.Context,
	name string, args *SecretBackendConnectionArgs, opts ...pulumi.ResourceOpt) (*SecretBackendConnection, error) {
	if args == nil || args.Backend == nil {
		return nil, errors.New("missing required argument 'Backend'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowedRoles"] = nil
		inputs["backend"] = nil
		inputs["cassandra"] = nil
		inputs["data"] = nil
		inputs["hana"] = nil
		inputs["mongodb"] = nil
		inputs["mssql"] = nil
		inputs["mysql"] = nil
		inputs["mysqlAurora"] = nil
		inputs["mysqlLegacy"] = nil
		inputs["mysqlRds"] = nil
		inputs["name"] = nil
		inputs["oracle"] = nil
		inputs["postgresql"] = nil
		inputs["rootRotationStatements"] = nil
		inputs["verifyConnection"] = nil
	} else {
		inputs["allowedRoles"] = args.AllowedRoles
		inputs["backend"] = args.Backend
		inputs["cassandra"] = args.Cassandra
		inputs["data"] = args.Data
		inputs["hana"] = args.Hana
		inputs["mongodb"] = args.Mongodb
		inputs["mssql"] = args.Mssql
		inputs["mysql"] = args.Mysql
		inputs["mysqlAurora"] = args.MysqlAurora
		inputs["mysqlLegacy"] = args.MysqlLegacy
		inputs["mysqlRds"] = args.MysqlRds
		inputs["name"] = args.Name
		inputs["oracle"] = args.Oracle
		inputs["postgresql"] = args.Postgresql
		inputs["rootRotationStatements"] = args.RootRotationStatements
		inputs["verifyConnection"] = args.VerifyConnection
	}
	s, err := ctx.RegisterResource("vault:database/secretBackendConnection:SecretBackendConnection", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendConnection{s: s}, nil
}

// GetSecretBackendConnection gets an existing SecretBackendConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendConnection(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecretBackendConnectionState, opts ...pulumi.ResourceOpt) (*SecretBackendConnection, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowedRoles"] = state.AllowedRoles
		inputs["backend"] = state.Backend
		inputs["cassandra"] = state.Cassandra
		inputs["data"] = state.Data
		inputs["hana"] = state.Hana
		inputs["mongodb"] = state.Mongodb
		inputs["mssql"] = state.Mssql
		inputs["mysql"] = state.Mysql
		inputs["mysqlAurora"] = state.MysqlAurora
		inputs["mysqlLegacy"] = state.MysqlLegacy
		inputs["mysqlRds"] = state.MysqlRds
		inputs["name"] = state.Name
		inputs["oracle"] = state.Oracle
		inputs["postgresql"] = state.Postgresql
		inputs["rootRotationStatements"] = state.RootRotationStatements
		inputs["verifyConnection"] = state.VerifyConnection
	}
	s, err := ctx.ReadResource("vault:database/secretBackendConnection:SecretBackendConnection", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendConnection{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecretBackendConnection) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecretBackendConnection) ID() pulumi.IDOutput {
	return r.s.ID()
}

// A list of roles that are allowed to use this
// connection.
func (r *SecretBackendConnection) AllowedRoles() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["allowedRoles"])
}

// The unique name of the Vault mount to configure.
func (r *SecretBackendConnection) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// A nested block containing configuration options for Cassandra connections.
func (r *SecretBackendConnection) Cassandra() pulumi.Output {
	return r.s.State["cassandra"]
}

// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
func (r *SecretBackendConnection) Data() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["data"])
}

// A nested block containing configuration options for SAP HanaDB connections.
func (r *SecretBackendConnection) Hana() pulumi.Output {
	return r.s.State["hana"]
}

// A nested block containing configuration options for MongoDB connections.
func (r *SecretBackendConnection) Mongodb() pulumi.Output {
	return r.s.State["mongodb"]
}

// A nested block containing configuration options for MSSQL connections.
func (r *SecretBackendConnection) Mssql() pulumi.Output {
	return r.s.State["mssql"]
}

// A nested block containing configuration options for MySQL connections.
func (r *SecretBackendConnection) Mysql() pulumi.Output {
	return r.s.State["mysql"]
}

// A nested block containing configuration options for Aurora MySQL connections.
func (r *SecretBackendConnection) MysqlAurora() pulumi.Output {
	return r.s.State["mysqlAurora"]
}

// A nested block containing configuration options for legacy MySQL connections.
func (r *SecretBackendConnection) MysqlLegacy() pulumi.Output {
	return r.s.State["mysqlLegacy"]
}

// A nested block containing configuration options for RDS MySQL connections.
func (r *SecretBackendConnection) MysqlRds() pulumi.Output {
	return r.s.State["mysqlRds"]
}

// A unique name to give the database connection.
func (r *SecretBackendConnection) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// A nested block containing configuration options for Oracle connections.
func (r *SecretBackendConnection) Oracle() pulumi.Output {
	return r.s.State["oracle"]
}

// A nested block containing configuration options for PostgreSQL connections.
func (r *SecretBackendConnection) Postgresql() pulumi.Output {
	return r.s.State["postgresql"]
}

// A list of database statements to be executed to rotate the root user's credentials.
func (r *SecretBackendConnection) RootRotationStatements() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["rootRotationStatements"])
}

// Whether the connection should be verified on
// initial configuration or not.
func (r *SecretBackendConnection) VerifyConnection() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["verifyConnection"])
}

// Input properties used for looking up and filtering SecretBackendConnection resources.
type SecretBackendConnectionState struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles interface{}
	// The unique name of the Vault mount to configure.
	Backend interface{}
	// A nested block containing configuration options for Cassandra connections.
	Cassandra interface{}
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	Data interface{}
	// A nested block containing configuration options for SAP HanaDB connections.
	Hana interface{}
	// A nested block containing configuration options for MongoDB connections.
	Mongodb interface{}
	// A nested block containing configuration options for MSSQL connections.
	Mssql interface{}
	// A nested block containing configuration options for MySQL connections.
	Mysql interface{}
	// A nested block containing configuration options for Aurora MySQL connections.
	MysqlAurora interface{}
	// A nested block containing configuration options for legacy MySQL connections.
	MysqlLegacy interface{}
	// A nested block containing configuration options for RDS MySQL connections.
	MysqlRds interface{}
	// A unique name to give the database connection.
	Name interface{}
	// A nested block containing configuration options for Oracle connections.
	Oracle interface{}
	// A nested block containing configuration options for PostgreSQL connections.
	Postgresql interface{}
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements interface{}
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection interface{}
}

// The set of arguments for constructing a SecretBackendConnection resource.
type SecretBackendConnectionArgs struct {
	// A list of roles that are allowed to use this
	// connection.
	AllowedRoles interface{}
	// The unique name of the Vault mount to configure.
	Backend interface{}
	// A nested block containing configuration options for Cassandra connections.
	Cassandra interface{}
	// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
	Data interface{}
	// A nested block containing configuration options for SAP HanaDB connections.
	Hana interface{}
	// A nested block containing configuration options for MongoDB connections.
	Mongodb interface{}
	// A nested block containing configuration options for MSSQL connections.
	Mssql interface{}
	// A nested block containing configuration options for MySQL connections.
	Mysql interface{}
	// A nested block containing configuration options for Aurora MySQL connections.
	MysqlAurora interface{}
	// A nested block containing configuration options for legacy MySQL connections.
	MysqlLegacy interface{}
	// A nested block containing configuration options for RDS MySQL connections.
	MysqlRds interface{}
	// A unique name to give the database connection.
	Name interface{}
	// A nested block containing configuration options for Oracle connections.
	Oracle interface{}
	// A nested block containing configuration options for PostgreSQL connections.
	Postgresql interface{}
	// A list of database statements to be executed to rotate the root user's credentials.
	RootRotationStatements interface{}
	// Whether the connection should be verified on
	// initial configuration or not.
	VerifyConnection interface{}
}
