// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/database_secret_backend_role.html.markdown.
type SecretBackendRole struct {
	s *pulumi.ResourceState
}

// NewSecretBackendRole registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendRole(ctx *pulumi.Context,
	name string, args *SecretBackendRoleArgs, opts ...pulumi.ResourceOpt) (*SecretBackendRole, error) {
	if args == nil || args.Backend == nil {
		return nil, errors.New("missing required argument 'Backend'")
	}
	if args == nil || args.CreationStatements == nil {
		return nil, errors.New("missing required argument 'CreationStatements'")
	}
	if args == nil || args.DbName == nil {
		return nil, errors.New("missing required argument 'DbName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backend"] = nil
		inputs["creationStatements"] = nil
		inputs["dbName"] = nil
		inputs["defaultTtl"] = nil
		inputs["maxTtl"] = nil
		inputs["name"] = nil
		inputs["renewStatements"] = nil
		inputs["revocationStatements"] = nil
		inputs["rollbackStatements"] = nil
	} else {
		inputs["backend"] = args.Backend
		inputs["creationStatements"] = args.CreationStatements
		inputs["dbName"] = args.DbName
		inputs["defaultTtl"] = args.DefaultTtl
		inputs["maxTtl"] = args.MaxTtl
		inputs["name"] = args.Name
		inputs["renewStatements"] = args.RenewStatements
		inputs["revocationStatements"] = args.RevocationStatements
		inputs["rollbackStatements"] = args.RollbackStatements
	}
	s, err := ctx.RegisterResource("vault:database/secretBackendRole:SecretBackendRole", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendRole{s: s}, nil
}

// GetSecretBackendRole gets an existing SecretBackendRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendRole(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecretBackendRoleState, opts ...pulumi.ResourceOpt) (*SecretBackendRole, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backend"] = state.Backend
		inputs["creationStatements"] = state.CreationStatements
		inputs["dbName"] = state.DbName
		inputs["defaultTtl"] = state.DefaultTtl
		inputs["maxTtl"] = state.MaxTtl
		inputs["name"] = state.Name
		inputs["renewStatements"] = state.RenewStatements
		inputs["revocationStatements"] = state.RevocationStatements
		inputs["rollbackStatements"] = state.RollbackStatements
	}
	s, err := ctx.ReadResource("vault:database/secretBackendRole:SecretBackendRole", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendRole{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecretBackendRole) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecretBackendRole) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The unique name of the Vault mount to configure.
func (r *SecretBackendRole) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// The database statements to execute when
// creating a user.
func (r *SecretBackendRole) CreationStatements() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["creationStatements"])
}

// The unique name of the database connection to use for
// the role.
func (r *SecretBackendRole) DbName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dbName"])
}

// The default number of seconds for leases for this
// role.
func (r *SecretBackendRole) DefaultTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["defaultTtl"])
}

// The maximum number of seconds for leases for this
// role.
func (r *SecretBackendRole) MaxTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxTtl"])
}

// A unique name to give the role.
func (r *SecretBackendRole) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The database statements to execute when
// renewing a user.
func (r *SecretBackendRole) RenewStatements() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["renewStatements"])
}

// The database statements to execute when
// revoking a user.
func (r *SecretBackendRole) RevocationStatements() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["revocationStatements"])
}

// The database statements to execute when
// rolling back creation due to an error.
func (r *SecretBackendRole) RollbackStatements() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["rollbackStatements"])
}

// Input properties used for looking up and filtering SecretBackendRole resources.
type SecretBackendRoleState struct {
	// The unique name of the Vault mount to configure.
	Backend interface{}
	// The database statements to execute when
	// creating a user.
	CreationStatements interface{}
	// The unique name of the database connection to use for
	// the role.
	DbName interface{}
	// The default number of seconds for leases for this
	// role.
	DefaultTtl interface{}
	// The maximum number of seconds for leases for this
	// role.
	MaxTtl interface{}
	// A unique name to give the role.
	Name interface{}
	// The database statements to execute when
	// renewing a user.
	RenewStatements interface{}
	// The database statements to execute when
	// revoking a user.
	RevocationStatements interface{}
	// The database statements to execute when
	// rolling back creation due to an error.
	RollbackStatements interface{}
}

// The set of arguments for constructing a SecretBackendRole resource.
type SecretBackendRoleArgs struct {
	// The unique name of the Vault mount to configure.
	Backend interface{}
	// The database statements to execute when
	// creating a user.
	CreationStatements interface{}
	// The unique name of the database connection to use for
	// the role.
	DbName interface{}
	// The default number of seconds for leases for this
	// role.
	DefaultTtl interface{}
	// The maximum number of seconds for leases for this
	// role.
	MaxTtl interface{}
	// A unique name to give the role.
	Name interface{}
	// The database statements to execute when
	// renewing a user.
	RenewStatements interface{}
	// The database statements to execute when
	// revoking a user.
	RevocationStatements interface{}
	// The database statements to execute when
	// rolling back creation due to an error.
	RollbackStatements interface{}
}
