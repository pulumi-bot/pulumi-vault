// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package database

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type SecretBackendConnectionCassandra struct {
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// The hosts to connect to.
	Hosts []string `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls *bool `pulumi:"insecureTls"`
	// The password to be used in the connection.
	Password *string `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle *string `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson *string `pulumi:"pemJson"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port *int `pulumi:"port"`
	// The CQL protocol version to use.
	ProtocolVersion *int `pulumi:"protocolVersion"`
	// Whether to use TLS when connecting to Cassandra.
	Tls *bool `pulumi:"tls"`
	// The username to be used in the connection.
	Username *string `pulumi:"username"`
}

type SecretBackendConnectionCassandraInput interface {
	pulumi.Input

	ToSecretBackendConnectionCassandraOutput() SecretBackendConnectionCassandraOutput
	ToSecretBackendConnectionCassandraOutputWithContext(context.Context) SecretBackendConnectionCassandraOutput
}

type SecretBackendConnectionCassandraArgs struct {
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// The hosts to connect to.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls pulumi.BoolPtrInput `pulumi:"insecureTls"`
	// The password to be used in the connection.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle pulumi.StringPtrInput `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson pulumi.StringPtrInput `pulumi:"pemJson"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The CQL protocol version to use.
	ProtocolVersion pulumi.IntPtrInput `pulumi:"protocolVersion"`
	// Whether to use TLS when connecting to Cassandra.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// The username to be used in the connection.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SecretBackendConnectionCassandraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionCassandra)(nil)).Elem()
}

func (i SecretBackendConnectionCassandraArgs) ToSecretBackendConnectionCassandraOutput() SecretBackendConnectionCassandraOutput {
	return i.ToSecretBackendConnectionCassandraOutputWithContext(context.Background())
}

func (i SecretBackendConnectionCassandraArgs) ToSecretBackendConnectionCassandraOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCassandraOutput)
}

func (i SecretBackendConnectionCassandraArgs) ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput {
	return i.ToSecretBackendConnectionCassandraPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionCassandraArgs) ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCassandraOutput).ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx)
}

type SecretBackendConnectionCassandraPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput
	ToSecretBackendConnectionCassandraPtrOutputWithContext(context.Context) SecretBackendConnectionCassandraPtrOutput
}

type secretBackendConnectionCassandraPtrType SecretBackendConnectionCassandraArgs

func SecretBackendConnectionCassandraPtr(v *SecretBackendConnectionCassandraArgs) SecretBackendConnectionCassandraPtrInput {
	return (*secretBackendConnectionCassandraPtrType)(v)
}

func (*secretBackendConnectionCassandraPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionCassandra)(nil)).Elem()
}

func (i *secretBackendConnectionCassandraPtrType) ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput {
	return i.ToSecretBackendConnectionCassandraPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionCassandraPtrType) ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCassandraPtrOutput)
}

type SecretBackendConnectionCassandraOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionCassandraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionCassandra)(nil)).Elem()
}

func (o SecretBackendConnectionCassandraOutput) ToSecretBackendConnectionCassandraOutput() SecretBackendConnectionCassandraOutput {
	return o
}

func (o SecretBackendConnectionCassandraOutput) ToSecretBackendConnectionCassandraOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraOutput {
	return o
}

func (o SecretBackendConnectionCassandraOutput) ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput {
	return o.ToSecretBackendConnectionCassandraPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionCassandraOutput) ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *SecretBackendConnectionCassandra {
		return &v
	}).(SecretBackendConnectionCassandraPtrOutput)
}

// The number of seconds to use as a connection
// timeout.
func (o SecretBackendConnectionCassandraOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// The hosts to connect to.
func (o SecretBackendConnectionCassandraOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionCassandraOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

// The password to be used in the connection.
func (o SecretBackendConnectionCassandraOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Concatenated PEM blocks configuring the certificate
// chain.
func (o SecretBackendConnectionCassandraOutput) PemBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.PemBundle }).(pulumi.StringPtrOutput)
}

// A JSON structure configuring the certificate chain.
func (o SecretBackendConnectionCassandraOutput) PemJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.PemJson }).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretBackendConnectionCassandraOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The CQL protocol version to use.
func (o SecretBackendConnectionCassandraOutput) ProtocolVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *int { return v.ProtocolVersion }).(pulumi.IntPtrOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionCassandraOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// The username to be used in the connection.
func (o SecretBackendConnectionCassandraOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionCassandraPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionCassandraPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionCassandra)(nil)).Elem()
}

func (o SecretBackendConnectionCassandraPtrOutput) ToSecretBackendConnectionCassandraPtrOutput() SecretBackendConnectionCassandraPtrOutput {
	return o
}

func (o SecretBackendConnectionCassandraPtrOutput) ToSecretBackendConnectionCassandraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraPtrOutput {
	return o
}

func (o SecretBackendConnectionCassandraPtrOutput) Elem() SecretBackendConnectionCassandraOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandra) SecretBackendConnectionCassandra { return *v }).(SecretBackendConnectionCassandraOutput)
}

// The number of seconds to use as a connection
// timeout.
func (o SecretBackendConnectionCassandraPtrOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// The hosts to connect to.
func (o SecretBackendConnectionCassandraPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionCassandraPtrOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

// The password to be used in the connection.
func (o SecretBackendConnectionCassandraPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Concatenated PEM blocks configuring the certificate
// chain.
func (o SecretBackendConnectionCassandraPtrOutput) PemBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.PemBundle }).(pulumi.StringPtrOutput)
}

// A JSON structure configuring the certificate chain.
func (o SecretBackendConnectionCassandraPtrOutput) PemJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.PemJson }).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretBackendConnectionCassandraPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The CQL protocol version to use.
func (o SecretBackendConnectionCassandraPtrOutput) ProtocolVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *int { return v.ProtocolVersion }).(pulumi.IntPtrOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionCassandraPtrOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// The username to be used in the connection.
func (o SecretBackendConnectionCassandraPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandra) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionCassandraArgs struct {
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// The hosts to connect to.
	Hosts []string `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls *bool `pulumi:"insecureTls"`
	// The password to be used in the connection.
	Password *string `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle *string `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson *string `pulumi:"pemJson"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port *int `pulumi:"port"`
	// The CQL protocol version to use.
	ProtocolVersion *int `pulumi:"protocolVersion"`
	// Whether to use TLS when connecting to Cassandra.
	Tls *bool `pulumi:"tls"`
	// The username to be used in the connection.
	Username *string `pulumi:"username"`
}

type SecretBackendConnectionCassandraArgsInput interface {
	pulumi.Input

	ToSecretBackendConnectionCassandraArgsOutput() SecretBackendConnectionCassandraArgsOutput
	ToSecretBackendConnectionCassandraArgsOutputWithContext(context.Context) SecretBackendConnectionCassandraArgsOutput
}

type SecretBackendConnectionCassandraArgsArgs struct {
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// The hosts to connect to.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls pulumi.BoolPtrInput `pulumi:"insecureTls"`
	// The password to be used in the connection.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle pulumi.StringPtrInput `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson pulumi.StringPtrInput `pulumi:"pemJson"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The CQL protocol version to use.
	ProtocolVersion pulumi.IntPtrInput `pulumi:"protocolVersion"`
	// Whether to use TLS when connecting to Cassandra.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// The username to be used in the connection.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SecretBackendConnectionCassandraArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionCassandraArgs)(nil)).Elem()
}

func (i SecretBackendConnectionCassandraArgsArgs) ToSecretBackendConnectionCassandraArgsOutput() SecretBackendConnectionCassandraArgsOutput {
	return i.ToSecretBackendConnectionCassandraArgsOutputWithContext(context.Background())
}

func (i SecretBackendConnectionCassandraArgsArgs) ToSecretBackendConnectionCassandraArgsOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCassandraArgsOutput)
}

func (i SecretBackendConnectionCassandraArgsArgs) ToSecretBackendConnectionCassandraArgsPtrOutput() SecretBackendConnectionCassandraArgsPtrOutput {
	return i.ToSecretBackendConnectionCassandraArgsPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionCassandraArgsArgs) ToSecretBackendConnectionCassandraArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCassandraArgsOutput).ToSecretBackendConnectionCassandraArgsPtrOutputWithContext(ctx)
}

type SecretBackendConnectionCassandraArgsPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionCassandraArgsPtrOutput() SecretBackendConnectionCassandraArgsPtrOutput
	ToSecretBackendConnectionCassandraArgsPtrOutputWithContext(context.Context) SecretBackendConnectionCassandraArgsPtrOutput
}

type secretBackendConnectionCassandraArgsPtrType SecretBackendConnectionCassandraArgsArgs

func SecretBackendConnectionCassandraArgsPtr(v *SecretBackendConnectionCassandraArgsArgs) SecretBackendConnectionCassandraArgsPtrInput {
	return (*secretBackendConnectionCassandraArgsPtrType)(v)
}

func (*secretBackendConnectionCassandraArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionCassandraArgs)(nil)).Elem()
}

func (i *secretBackendConnectionCassandraArgsPtrType) ToSecretBackendConnectionCassandraArgsPtrOutput() SecretBackendConnectionCassandraArgsPtrOutput {
	return i.ToSecretBackendConnectionCassandraArgsPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionCassandraArgsPtrType) ToSecretBackendConnectionCassandraArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCassandraArgsPtrOutput)
}

type SecretBackendConnectionCassandraArgsOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionCassandraArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionCassandraArgs)(nil)).Elem()
}

func (o SecretBackendConnectionCassandraArgsOutput) ToSecretBackendConnectionCassandraArgsOutput() SecretBackendConnectionCassandraArgsOutput {
	return o
}

func (o SecretBackendConnectionCassandraArgsOutput) ToSecretBackendConnectionCassandraArgsOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraArgsOutput {
	return o
}

func (o SecretBackendConnectionCassandraArgsOutput) ToSecretBackendConnectionCassandraArgsPtrOutput() SecretBackendConnectionCassandraArgsPtrOutput {
	return o.ToSecretBackendConnectionCassandraArgsPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionCassandraArgsOutput) ToSecretBackendConnectionCassandraArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraArgsPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *SecretBackendConnectionCassandraArgs {
		return &v
	}).(SecretBackendConnectionCassandraArgsPtrOutput)
}

// The number of seconds to use as a connection
// timeout.
func (o SecretBackendConnectionCassandraArgsOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// The hosts to connect to.
func (o SecretBackendConnectionCassandraArgsOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionCassandraArgsOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

// The password to be used in the connection.
func (o SecretBackendConnectionCassandraArgsOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Concatenated PEM blocks configuring the certificate
// chain.
func (o SecretBackendConnectionCassandraArgsOutput) PemBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *string { return v.PemBundle }).(pulumi.StringPtrOutput)
}

// A JSON structure configuring the certificate chain.
func (o SecretBackendConnectionCassandraArgsOutput) PemJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *string { return v.PemJson }).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretBackendConnectionCassandraArgsOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The CQL protocol version to use.
func (o SecretBackendConnectionCassandraArgsOutput) ProtocolVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *int { return v.ProtocolVersion }).(pulumi.IntPtrOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionCassandraArgsOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// The username to be used in the connection.
func (o SecretBackendConnectionCassandraArgsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionCassandraArgsPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionCassandraArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionCassandraArgs)(nil)).Elem()
}

func (o SecretBackendConnectionCassandraArgsPtrOutput) ToSecretBackendConnectionCassandraArgsPtrOutput() SecretBackendConnectionCassandraArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionCassandraArgsPtrOutput) ToSecretBackendConnectionCassandraArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionCassandraArgsPtrOutput) Elem() SecretBackendConnectionCassandraArgsOutput {
	return o.ApplyT(func(v *SecretBackendConnectionCassandraArgs) SecretBackendConnectionCassandraArgs { return *v }).(SecretBackendConnectionCassandraArgsOutput)
}

// The number of seconds to use as a connection
// timeout.
func (o SecretBackendConnectionCassandraArgsPtrOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// The hosts to connect to.
func (o SecretBackendConnectionCassandraArgsPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionCassandraArgsPtrOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

// The password to be used in the connection.
func (o SecretBackendConnectionCassandraArgsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Concatenated PEM blocks configuring the certificate
// chain.
func (o SecretBackendConnectionCassandraArgsPtrOutput) PemBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *string { return v.PemBundle }).(pulumi.StringPtrOutput)
}

// A JSON structure configuring the certificate chain.
func (o SecretBackendConnectionCassandraArgsPtrOutput) PemJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *string { return v.PemJson }).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretBackendConnectionCassandraArgsPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The CQL protocol version to use.
func (o SecretBackendConnectionCassandraArgsPtrOutput) ProtocolVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *int { return v.ProtocolVersion }).(pulumi.IntPtrOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionCassandraArgsPtrOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// The username to be used in the connection.
func (o SecretBackendConnectionCassandraArgsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraArgs) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionCassandraState struct {
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// The hosts to connect to.
	Hosts []string `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls *bool `pulumi:"insecureTls"`
	// The password to be used in the connection.
	Password *string `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle *string `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson *string `pulumi:"pemJson"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port *int `pulumi:"port"`
	// The CQL protocol version to use.
	ProtocolVersion *int `pulumi:"protocolVersion"`
	// Whether to use TLS when connecting to Cassandra.
	Tls *bool `pulumi:"tls"`
	// The username to be used in the connection.
	Username *string `pulumi:"username"`
}

type SecretBackendConnectionCassandraStateInput interface {
	pulumi.Input

	ToSecretBackendConnectionCassandraStateOutput() SecretBackendConnectionCassandraStateOutput
	ToSecretBackendConnectionCassandraStateOutputWithContext(context.Context) SecretBackendConnectionCassandraStateOutput
}

type SecretBackendConnectionCassandraStateArgs struct {
	// The number of seconds to use as a connection
	// timeout.
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// The hosts to connect to.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Whether to skip verification of the server
	// certificate when using TLS.
	InsecureTls pulumi.BoolPtrInput `pulumi:"insecureTls"`
	// The password to be used in the connection.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Concatenated PEM blocks configuring the certificate
	// chain.
	PemBundle pulumi.StringPtrInput `pulumi:"pemBundle"`
	// A JSON structure configuring the certificate chain.
	PemJson pulumi.StringPtrInput `pulumi:"pemJson"`
	// The default port to connect to if no port is specified as
	// part of the host.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The CQL protocol version to use.
	ProtocolVersion pulumi.IntPtrInput `pulumi:"protocolVersion"`
	// Whether to use TLS when connecting to Cassandra.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// The username to be used in the connection.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SecretBackendConnectionCassandraStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionCassandraState)(nil)).Elem()
}

func (i SecretBackendConnectionCassandraStateArgs) ToSecretBackendConnectionCassandraStateOutput() SecretBackendConnectionCassandraStateOutput {
	return i.ToSecretBackendConnectionCassandraStateOutputWithContext(context.Background())
}

func (i SecretBackendConnectionCassandraStateArgs) ToSecretBackendConnectionCassandraStateOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionCassandraStateOutput)
}

type SecretBackendConnectionCassandraStateOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionCassandraStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionCassandraState)(nil)).Elem()
}

func (o SecretBackendConnectionCassandraStateOutput) ToSecretBackendConnectionCassandraStateOutput() SecretBackendConnectionCassandraStateOutput {
	return o
}

func (o SecretBackendConnectionCassandraStateOutput) ToSecretBackendConnectionCassandraStateOutputWithContext(ctx context.Context) SecretBackendConnectionCassandraStateOutput {
	return o
}

// The number of seconds to use as a connection
// timeout.
func (o SecretBackendConnectionCassandraStateOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraState) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// The hosts to connect to.
func (o SecretBackendConnectionCassandraStateOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraState) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Whether to skip verification of the server
// certificate when using TLS.
func (o SecretBackendConnectionCassandraStateOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraState) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

// The password to be used in the connection.
func (o SecretBackendConnectionCassandraStateOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraState) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Concatenated PEM blocks configuring the certificate
// chain.
func (o SecretBackendConnectionCassandraStateOutput) PemBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraState) *string { return v.PemBundle }).(pulumi.StringPtrOutput)
}

// A JSON structure configuring the certificate chain.
func (o SecretBackendConnectionCassandraStateOutput) PemJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraState) *string { return v.PemJson }).(pulumi.StringPtrOutput)
}

// The default port to connect to if no port is specified as
// part of the host.
func (o SecretBackendConnectionCassandraStateOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraState) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The CQL protocol version to use.
func (o SecretBackendConnectionCassandraStateOutput) ProtocolVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraState) *int { return v.ProtocolVersion }).(pulumi.IntPtrOutput)
}

// Whether to use TLS when connecting to Cassandra.
func (o SecretBackendConnectionCassandraStateOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraState) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// The username to be used in the connection.
func (o SecretBackendConnectionCassandraStateOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionCassandraState) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SecretBackendConnectionElasticsearch struct {
	// The password to be used in the connection.
	Password string `pulumi:"password"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url string `pulumi:"url"`
	// The username to be used in the connection.
	Username string `pulumi:"username"`
}

type SecretBackendConnectionElasticsearchInput interface {
	pulumi.Input

	ToSecretBackendConnectionElasticsearchOutput() SecretBackendConnectionElasticsearchOutput
	ToSecretBackendConnectionElasticsearchOutputWithContext(context.Context) SecretBackendConnectionElasticsearchOutput
}

type SecretBackendConnectionElasticsearchArgs struct {
	// The password to be used in the connection.
	Password pulumi.StringInput `pulumi:"password"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url pulumi.StringInput `pulumi:"url"`
	// The username to be used in the connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SecretBackendConnectionElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionElasticsearch)(nil)).Elem()
}

func (i SecretBackendConnectionElasticsearchArgs) ToSecretBackendConnectionElasticsearchOutput() SecretBackendConnectionElasticsearchOutput {
	return i.ToSecretBackendConnectionElasticsearchOutputWithContext(context.Background())
}

func (i SecretBackendConnectionElasticsearchArgs) ToSecretBackendConnectionElasticsearchOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionElasticsearchOutput)
}

func (i SecretBackendConnectionElasticsearchArgs) ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput {
	return i.ToSecretBackendConnectionElasticsearchPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionElasticsearchArgs) ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionElasticsearchOutput).ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx)
}

type SecretBackendConnectionElasticsearchPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput
	ToSecretBackendConnectionElasticsearchPtrOutputWithContext(context.Context) SecretBackendConnectionElasticsearchPtrOutput
}

type secretBackendConnectionElasticsearchPtrType SecretBackendConnectionElasticsearchArgs

func SecretBackendConnectionElasticsearchPtr(v *SecretBackendConnectionElasticsearchArgs) SecretBackendConnectionElasticsearchPtrInput {
	return (*secretBackendConnectionElasticsearchPtrType)(v)
}

func (*secretBackendConnectionElasticsearchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionElasticsearch)(nil)).Elem()
}

func (i *secretBackendConnectionElasticsearchPtrType) ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput {
	return i.ToSecretBackendConnectionElasticsearchPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionElasticsearchPtrType) ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionElasticsearchPtrOutput)
}

type SecretBackendConnectionElasticsearchOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionElasticsearch)(nil)).Elem()
}

func (o SecretBackendConnectionElasticsearchOutput) ToSecretBackendConnectionElasticsearchOutput() SecretBackendConnectionElasticsearchOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchOutput) ToSecretBackendConnectionElasticsearchOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchOutput) ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput {
	return o.ToSecretBackendConnectionElasticsearchPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionElasticsearchOutput) ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) *SecretBackendConnectionElasticsearch {
		return &v
	}).(SecretBackendConnectionElasticsearchPtrOutput)
}

// The password to be used in the connection.
func (o SecretBackendConnectionElasticsearchOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) string { return v.Password }).(pulumi.StringOutput)
}

// The URL for Elasticsearch's API. https requires certificate
// by trusted CA if used.
func (o SecretBackendConnectionElasticsearchOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) string { return v.Url }).(pulumi.StringOutput)
}

// The username to be used in the connection.
func (o SecretBackendConnectionElasticsearchOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) string { return v.Username }).(pulumi.StringOutput)
}

type SecretBackendConnectionElasticsearchPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionElasticsearchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionElasticsearch)(nil)).Elem()
}

func (o SecretBackendConnectionElasticsearchPtrOutput) ToSecretBackendConnectionElasticsearchPtrOutput() SecretBackendConnectionElasticsearchPtrOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchPtrOutput) ToSecretBackendConnectionElasticsearchPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchPtrOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchPtrOutput) Elem() SecretBackendConnectionElasticsearchOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearch) SecretBackendConnectionElasticsearch { return *v }).(SecretBackendConnectionElasticsearchOutput)
}

// The password to be used in the connection.
func (o SecretBackendConnectionElasticsearchPtrOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) string { return v.Password }).(pulumi.StringOutput)
}

// The URL for Elasticsearch's API. https requires certificate
// by trusted CA if used.
func (o SecretBackendConnectionElasticsearchPtrOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) string { return v.Url }).(pulumi.StringOutput)
}

// The username to be used in the connection.
func (o SecretBackendConnectionElasticsearchPtrOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearch) string { return v.Username }).(pulumi.StringOutput)
}

type SecretBackendConnectionElasticsearchArgs struct {
	// The password to be used in the connection.
	Password string `pulumi:"password"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url string `pulumi:"url"`
	// The username to be used in the connection.
	Username string `pulumi:"username"`
}

type SecretBackendConnectionElasticsearchArgsInput interface {
	pulumi.Input

	ToSecretBackendConnectionElasticsearchArgsOutput() SecretBackendConnectionElasticsearchArgsOutput
	ToSecretBackendConnectionElasticsearchArgsOutputWithContext(context.Context) SecretBackendConnectionElasticsearchArgsOutput
}

type SecretBackendConnectionElasticsearchArgsArgs struct {
	// The password to be used in the connection.
	Password pulumi.StringInput `pulumi:"password"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url pulumi.StringInput `pulumi:"url"`
	// The username to be used in the connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SecretBackendConnectionElasticsearchArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionElasticsearchArgs)(nil)).Elem()
}

func (i SecretBackendConnectionElasticsearchArgsArgs) ToSecretBackendConnectionElasticsearchArgsOutput() SecretBackendConnectionElasticsearchArgsOutput {
	return i.ToSecretBackendConnectionElasticsearchArgsOutputWithContext(context.Background())
}

func (i SecretBackendConnectionElasticsearchArgsArgs) ToSecretBackendConnectionElasticsearchArgsOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionElasticsearchArgsOutput)
}

func (i SecretBackendConnectionElasticsearchArgsArgs) ToSecretBackendConnectionElasticsearchArgsPtrOutput() SecretBackendConnectionElasticsearchArgsPtrOutput {
	return i.ToSecretBackendConnectionElasticsearchArgsPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionElasticsearchArgsArgs) ToSecretBackendConnectionElasticsearchArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionElasticsearchArgsOutput).ToSecretBackendConnectionElasticsearchArgsPtrOutputWithContext(ctx)
}

type SecretBackendConnectionElasticsearchArgsPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionElasticsearchArgsPtrOutput() SecretBackendConnectionElasticsearchArgsPtrOutput
	ToSecretBackendConnectionElasticsearchArgsPtrOutputWithContext(context.Context) SecretBackendConnectionElasticsearchArgsPtrOutput
}

type secretBackendConnectionElasticsearchArgsPtrType SecretBackendConnectionElasticsearchArgsArgs

func SecretBackendConnectionElasticsearchArgsPtr(v *SecretBackendConnectionElasticsearchArgsArgs) SecretBackendConnectionElasticsearchArgsPtrInput {
	return (*secretBackendConnectionElasticsearchArgsPtrType)(v)
}

func (*secretBackendConnectionElasticsearchArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionElasticsearchArgs)(nil)).Elem()
}

func (i *secretBackendConnectionElasticsearchArgsPtrType) ToSecretBackendConnectionElasticsearchArgsPtrOutput() SecretBackendConnectionElasticsearchArgsPtrOutput {
	return i.ToSecretBackendConnectionElasticsearchArgsPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionElasticsearchArgsPtrType) ToSecretBackendConnectionElasticsearchArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionElasticsearchArgsPtrOutput)
}

type SecretBackendConnectionElasticsearchArgsOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionElasticsearchArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionElasticsearchArgs)(nil)).Elem()
}

func (o SecretBackendConnectionElasticsearchArgsOutput) ToSecretBackendConnectionElasticsearchArgsOutput() SecretBackendConnectionElasticsearchArgsOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchArgsOutput) ToSecretBackendConnectionElasticsearchArgsOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchArgsOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchArgsOutput) ToSecretBackendConnectionElasticsearchArgsPtrOutput() SecretBackendConnectionElasticsearchArgsPtrOutput {
	return o.ToSecretBackendConnectionElasticsearchArgsPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionElasticsearchArgsOutput) ToSecretBackendConnectionElasticsearchArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchArgsPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearchArgs) *SecretBackendConnectionElasticsearchArgs {
		return &v
	}).(SecretBackendConnectionElasticsearchArgsPtrOutput)
}

// The password to be used in the connection.
func (o SecretBackendConnectionElasticsearchArgsOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearchArgs) string { return v.Password }).(pulumi.StringOutput)
}

// The URL for Elasticsearch's API. https requires certificate
// by trusted CA if used.
func (o SecretBackendConnectionElasticsearchArgsOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearchArgs) string { return v.Url }).(pulumi.StringOutput)
}

// The username to be used in the connection.
func (o SecretBackendConnectionElasticsearchArgsOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearchArgs) string { return v.Username }).(pulumi.StringOutput)
}

type SecretBackendConnectionElasticsearchArgsPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionElasticsearchArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionElasticsearchArgs)(nil)).Elem()
}

func (o SecretBackendConnectionElasticsearchArgsPtrOutput) ToSecretBackendConnectionElasticsearchArgsPtrOutput() SecretBackendConnectionElasticsearchArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchArgsPtrOutput) ToSecretBackendConnectionElasticsearchArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchArgsPtrOutput) Elem() SecretBackendConnectionElasticsearchArgsOutput {
	return o.ApplyT(func(v *SecretBackendConnectionElasticsearchArgs) SecretBackendConnectionElasticsearchArgs { return *v }).(SecretBackendConnectionElasticsearchArgsOutput)
}

// The password to be used in the connection.
func (o SecretBackendConnectionElasticsearchArgsPtrOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearchArgs) string { return v.Password }).(pulumi.StringOutput)
}

// The URL for Elasticsearch's API. https requires certificate
// by trusted CA if used.
func (o SecretBackendConnectionElasticsearchArgsPtrOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearchArgs) string { return v.Url }).(pulumi.StringOutput)
}

// The username to be used in the connection.
func (o SecretBackendConnectionElasticsearchArgsPtrOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearchArgs) string { return v.Username }).(pulumi.StringOutput)
}

type SecretBackendConnectionElasticsearchState struct {
	// The password to be used in the connection.
	Password string `pulumi:"password"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url string `pulumi:"url"`
	// The username to be used in the connection.
	Username string `pulumi:"username"`
}

type SecretBackendConnectionElasticsearchStateInput interface {
	pulumi.Input

	ToSecretBackendConnectionElasticsearchStateOutput() SecretBackendConnectionElasticsearchStateOutput
	ToSecretBackendConnectionElasticsearchStateOutputWithContext(context.Context) SecretBackendConnectionElasticsearchStateOutput
}

type SecretBackendConnectionElasticsearchStateArgs struct {
	// The password to be used in the connection.
	Password pulumi.StringInput `pulumi:"password"`
	// The URL for Elasticsearch's API. https requires certificate
	// by trusted CA if used.
	Url pulumi.StringInput `pulumi:"url"`
	// The username to be used in the connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SecretBackendConnectionElasticsearchStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionElasticsearchState)(nil)).Elem()
}

func (i SecretBackendConnectionElasticsearchStateArgs) ToSecretBackendConnectionElasticsearchStateOutput() SecretBackendConnectionElasticsearchStateOutput {
	return i.ToSecretBackendConnectionElasticsearchStateOutputWithContext(context.Background())
}

func (i SecretBackendConnectionElasticsearchStateArgs) ToSecretBackendConnectionElasticsearchStateOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionElasticsearchStateOutput)
}

type SecretBackendConnectionElasticsearchStateOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionElasticsearchStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionElasticsearchState)(nil)).Elem()
}

func (o SecretBackendConnectionElasticsearchStateOutput) ToSecretBackendConnectionElasticsearchStateOutput() SecretBackendConnectionElasticsearchStateOutput {
	return o
}

func (o SecretBackendConnectionElasticsearchStateOutput) ToSecretBackendConnectionElasticsearchStateOutputWithContext(ctx context.Context) SecretBackendConnectionElasticsearchStateOutput {
	return o
}

// The password to be used in the connection.
func (o SecretBackendConnectionElasticsearchStateOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearchState) string { return v.Password }).(pulumi.StringOutput)
}

// The URL for Elasticsearch's API. https requires certificate
// by trusted CA if used.
func (o SecretBackendConnectionElasticsearchStateOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearchState) string { return v.Url }).(pulumi.StringOutput)
}

// The username to be used in the connection.
func (o SecretBackendConnectionElasticsearchStateOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SecretBackendConnectionElasticsearchState) string { return v.Username }).(pulumi.StringOutput)
}

type SecretBackendConnectionHana struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionHanaInput interface {
	pulumi.Input

	ToSecretBackendConnectionHanaOutput() SecretBackendConnectionHanaOutput
	ToSecretBackendConnectionHanaOutputWithContext(context.Context) SecretBackendConnectionHanaOutput
}

type SecretBackendConnectionHanaArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionHanaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionHana)(nil)).Elem()
}

func (i SecretBackendConnectionHanaArgs) ToSecretBackendConnectionHanaOutput() SecretBackendConnectionHanaOutput {
	return i.ToSecretBackendConnectionHanaOutputWithContext(context.Background())
}

func (i SecretBackendConnectionHanaArgs) ToSecretBackendConnectionHanaOutputWithContext(ctx context.Context) SecretBackendConnectionHanaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionHanaOutput)
}

func (i SecretBackendConnectionHanaArgs) ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput {
	return i.ToSecretBackendConnectionHanaPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionHanaArgs) ToSecretBackendConnectionHanaPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionHanaOutput).ToSecretBackendConnectionHanaPtrOutputWithContext(ctx)
}

type SecretBackendConnectionHanaPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput
	ToSecretBackendConnectionHanaPtrOutputWithContext(context.Context) SecretBackendConnectionHanaPtrOutput
}

type secretBackendConnectionHanaPtrType SecretBackendConnectionHanaArgs

func SecretBackendConnectionHanaPtr(v *SecretBackendConnectionHanaArgs) SecretBackendConnectionHanaPtrInput {
	return (*secretBackendConnectionHanaPtrType)(v)
}

func (*secretBackendConnectionHanaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionHana)(nil)).Elem()
}

func (i *secretBackendConnectionHanaPtrType) ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput {
	return i.ToSecretBackendConnectionHanaPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionHanaPtrType) ToSecretBackendConnectionHanaPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionHanaPtrOutput)
}

type SecretBackendConnectionHanaOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionHanaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionHana)(nil)).Elem()
}

func (o SecretBackendConnectionHanaOutput) ToSecretBackendConnectionHanaOutput() SecretBackendConnectionHanaOutput {
	return o
}

func (o SecretBackendConnectionHanaOutput) ToSecretBackendConnectionHanaOutputWithContext(ctx context.Context) SecretBackendConnectionHanaOutput {
	return o
}

func (o SecretBackendConnectionHanaOutput) ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput {
	return o.ToSecretBackendConnectionHanaPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionHanaOutput) ToSecretBackendConnectionHanaPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *SecretBackendConnectionHana {
		return &v
	}).(SecretBackendConnectionHanaPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionHanaOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionHanaOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionHanaOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionHanaOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionHanaPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionHanaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionHana)(nil)).Elem()
}

func (o SecretBackendConnectionHanaPtrOutput) ToSecretBackendConnectionHanaPtrOutput() SecretBackendConnectionHanaPtrOutput {
	return o
}

func (o SecretBackendConnectionHanaPtrOutput) ToSecretBackendConnectionHanaPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaPtrOutput {
	return o
}

func (o SecretBackendConnectionHanaPtrOutput) Elem() SecretBackendConnectionHanaOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHana) SecretBackendConnectionHana { return *v }).(SecretBackendConnectionHanaOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionHanaPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionHanaPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionHanaPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionHanaPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHana) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionHanaArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionHanaArgsInput interface {
	pulumi.Input

	ToSecretBackendConnectionHanaArgsOutput() SecretBackendConnectionHanaArgsOutput
	ToSecretBackendConnectionHanaArgsOutputWithContext(context.Context) SecretBackendConnectionHanaArgsOutput
}

type SecretBackendConnectionHanaArgsArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionHanaArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionHanaArgs)(nil)).Elem()
}

func (i SecretBackendConnectionHanaArgsArgs) ToSecretBackendConnectionHanaArgsOutput() SecretBackendConnectionHanaArgsOutput {
	return i.ToSecretBackendConnectionHanaArgsOutputWithContext(context.Background())
}

func (i SecretBackendConnectionHanaArgsArgs) ToSecretBackendConnectionHanaArgsOutputWithContext(ctx context.Context) SecretBackendConnectionHanaArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionHanaArgsOutput)
}

func (i SecretBackendConnectionHanaArgsArgs) ToSecretBackendConnectionHanaArgsPtrOutput() SecretBackendConnectionHanaArgsPtrOutput {
	return i.ToSecretBackendConnectionHanaArgsPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionHanaArgsArgs) ToSecretBackendConnectionHanaArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionHanaArgsOutput).ToSecretBackendConnectionHanaArgsPtrOutputWithContext(ctx)
}

type SecretBackendConnectionHanaArgsPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionHanaArgsPtrOutput() SecretBackendConnectionHanaArgsPtrOutput
	ToSecretBackendConnectionHanaArgsPtrOutputWithContext(context.Context) SecretBackendConnectionHanaArgsPtrOutput
}

type secretBackendConnectionHanaArgsPtrType SecretBackendConnectionHanaArgsArgs

func SecretBackendConnectionHanaArgsPtr(v *SecretBackendConnectionHanaArgsArgs) SecretBackendConnectionHanaArgsPtrInput {
	return (*secretBackendConnectionHanaArgsPtrType)(v)
}

func (*secretBackendConnectionHanaArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionHanaArgs)(nil)).Elem()
}

func (i *secretBackendConnectionHanaArgsPtrType) ToSecretBackendConnectionHanaArgsPtrOutput() SecretBackendConnectionHanaArgsPtrOutput {
	return i.ToSecretBackendConnectionHanaArgsPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionHanaArgsPtrType) ToSecretBackendConnectionHanaArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionHanaArgsPtrOutput)
}

type SecretBackendConnectionHanaArgsOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionHanaArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionHanaArgs)(nil)).Elem()
}

func (o SecretBackendConnectionHanaArgsOutput) ToSecretBackendConnectionHanaArgsOutput() SecretBackendConnectionHanaArgsOutput {
	return o
}

func (o SecretBackendConnectionHanaArgsOutput) ToSecretBackendConnectionHanaArgsOutputWithContext(ctx context.Context) SecretBackendConnectionHanaArgsOutput {
	return o
}

func (o SecretBackendConnectionHanaArgsOutput) ToSecretBackendConnectionHanaArgsPtrOutput() SecretBackendConnectionHanaArgsPtrOutput {
	return o.ToSecretBackendConnectionHanaArgsPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionHanaArgsOutput) ToSecretBackendConnectionHanaArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaArgsPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHanaArgs) *SecretBackendConnectionHanaArgs {
		return &v
	}).(SecretBackendConnectionHanaArgsPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionHanaArgsOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHanaArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionHanaArgsOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHanaArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionHanaArgsOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHanaArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionHanaArgsOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHanaArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionHanaArgsPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionHanaArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionHanaArgs)(nil)).Elem()
}

func (o SecretBackendConnectionHanaArgsPtrOutput) ToSecretBackendConnectionHanaArgsPtrOutput() SecretBackendConnectionHanaArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionHanaArgsPtrOutput) ToSecretBackendConnectionHanaArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionHanaArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionHanaArgsPtrOutput) Elem() SecretBackendConnectionHanaArgsOutput {
	return o.ApplyT(func(v *SecretBackendConnectionHanaArgs) SecretBackendConnectionHanaArgs { return *v }).(SecretBackendConnectionHanaArgsOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionHanaArgsPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHanaArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionHanaArgsPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHanaArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionHanaArgsPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHanaArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionHanaArgsPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHanaArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionHanaState struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionHanaStateInput interface {
	pulumi.Input

	ToSecretBackendConnectionHanaStateOutput() SecretBackendConnectionHanaStateOutput
	ToSecretBackendConnectionHanaStateOutputWithContext(context.Context) SecretBackendConnectionHanaStateOutput
}

type SecretBackendConnectionHanaStateArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionHanaStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionHanaState)(nil)).Elem()
}

func (i SecretBackendConnectionHanaStateArgs) ToSecretBackendConnectionHanaStateOutput() SecretBackendConnectionHanaStateOutput {
	return i.ToSecretBackendConnectionHanaStateOutputWithContext(context.Background())
}

func (i SecretBackendConnectionHanaStateArgs) ToSecretBackendConnectionHanaStateOutputWithContext(ctx context.Context) SecretBackendConnectionHanaStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionHanaStateOutput)
}

type SecretBackendConnectionHanaStateOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionHanaStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionHanaState)(nil)).Elem()
}

func (o SecretBackendConnectionHanaStateOutput) ToSecretBackendConnectionHanaStateOutput() SecretBackendConnectionHanaStateOutput {
	return o
}

func (o SecretBackendConnectionHanaStateOutput) ToSecretBackendConnectionHanaStateOutputWithContext(ctx context.Context) SecretBackendConnectionHanaStateOutput {
	return o
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionHanaStateOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHanaState) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionHanaStateOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHanaState) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionHanaStateOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHanaState) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionHanaStateOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionHanaState) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMongodb struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMongodbInput interface {
	pulumi.Input

	ToSecretBackendConnectionMongodbOutput() SecretBackendConnectionMongodbOutput
	ToSecretBackendConnectionMongodbOutputWithContext(context.Context) SecretBackendConnectionMongodbOutput
}

type SecretBackendConnectionMongodbArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMongodbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMongodb)(nil)).Elem()
}

func (i SecretBackendConnectionMongodbArgs) ToSecretBackendConnectionMongodbOutput() SecretBackendConnectionMongodbOutput {
	return i.ToSecretBackendConnectionMongodbOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMongodbArgs) ToSecretBackendConnectionMongodbOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbOutput)
}

func (i SecretBackendConnectionMongodbArgs) ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput {
	return i.ToSecretBackendConnectionMongodbPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMongodbArgs) ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbOutput).ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx)
}

type SecretBackendConnectionMongodbPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput
	ToSecretBackendConnectionMongodbPtrOutputWithContext(context.Context) SecretBackendConnectionMongodbPtrOutput
}

type secretBackendConnectionMongodbPtrType SecretBackendConnectionMongodbArgs

func SecretBackendConnectionMongodbPtr(v *SecretBackendConnectionMongodbArgs) SecretBackendConnectionMongodbPtrInput {
	return (*secretBackendConnectionMongodbPtrType)(v)
}

func (*secretBackendConnectionMongodbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMongodb)(nil)).Elem()
}

func (i *secretBackendConnectionMongodbPtrType) ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput {
	return i.ToSecretBackendConnectionMongodbPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMongodbPtrType) ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbPtrOutput)
}

type SecretBackendConnectionMongodbOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMongodbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMongodb)(nil)).Elem()
}

func (o SecretBackendConnectionMongodbOutput) ToSecretBackendConnectionMongodbOutput() SecretBackendConnectionMongodbOutput {
	return o
}

func (o SecretBackendConnectionMongodbOutput) ToSecretBackendConnectionMongodbOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbOutput {
	return o
}

func (o SecretBackendConnectionMongodbOutput) ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput {
	return o.ToSecretBackendConnectionMongodbPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMongodbOutput) ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *SecretBackendConnectionMongodb {
		return &v
	}).(SecretBackendConnectionMongodbPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMongodbOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMongodbOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMongodbOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMongodbOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMongodbPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMongodbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMongodb)(nil)).Elem()
}

func (o SecretBackendConnectionMongodbPtrOutput) ToSecretBackendConnectionMongodbPtrOutput() SecretBackendConnectionMongodbPtrOutput {
	return o
}

func (o SecretBackendConnectionMongodbPtrOutput) ToSecretBackendConnectionMongodbPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbPtrOutput {
	return o
}

func (o SecretBackendConnectionMongodbPtrOutput) Elem() SecretBackendConnectionMongodbOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodb) SecretBackendConnectionMongodb { return *v }).(SecretBackendConnectionMongodbOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMongodbPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMongodbPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMongodbPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMongodbPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodb) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMongodbArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMongodbArgsInput interface {
	pulumi.Input

	ToSecretBackendConnectionMongodbArgsOutput() SecretBackendConnectionMongodbArgsOutput
	ToSecretBackendConnectionMongodbArgsOutputWithContext(context.Context) SecretBackendConnectionMongodbArgsOutput
}

type SecretBackendConnectionMongodbArgsArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMongodbArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMongodbArgs)(nil)).Elem()
}

func (i SecretBackendConnectionMongodbArgsArgs) ToSecretBackendConnectionMongodbArgsOutput() SecretBackendConnectionMongodbArgsOutput {
	return i.ToSecretBackendConnectionMongodbArgsOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMongodbArgsArgs) ToSecretBackendConnectionMongodbArgsOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbArgsOutput)
}

func (i SecretBackendConnectionMongodbArgsArgs) ToSecretBackendConnectionMongodbArgsPtrOutput() SecretBackendConnectionMongodbArgsPtrOutput {
	return i.ToSecretBackendConnectionMongodbArgsPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMongodbArgsArgs) ToSecretBackendConnectionMongodbArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbArgsOutput).ToSecretBackendConnectionMongodbArgsPtrOutputWithContext(ctx)
}

type SecretBackendConnectionMongodbArgsPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMongodbArgsPtrOutput() SecretBackendConnectionMongodbArgsPtrOutput
	ToSecretBackendConnectionMongodbArgsPtrOutputWithContext(context.Context) SecretBackendConnectionMongodbArgsPtrOutput
}

type secretBackendConnectionMongodbArgsPtrType SecretBackendConnectionMongodbArgsArgs

func SecretBackendConnectionMongodbArgsPtr(v *SecretBackendConnectionMongodbArgsArgs) SecretBackendConnectionMongodbArgsPtrInput {
	return (*secretBackendConnectionMongodbArgsPtrType)(v)
}

func (*secretBackendConnectionMongodbArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMongodbArgs)(nil)).Elem()
}

func (i *secretBackendConnectionMongodbArgsPtrType) ToSecretBackendConnectionMongodbArgsPtrOutput() SecretBackendConnectionMongodbArgsPtrOutput {
	return i.ToSecretBackendConnectionMongodbArgsPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMongodbArgsPtrType) ToSecretBackendConnectionMongodbArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbArgsPtrOutput)
}

type SecretBackendConnectionMongodbArgsOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMongodbArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMongodbArgs)(nil)).Elem()
}

func (o SecretBackendConnectionMongodbArgsOutput) ToSecretBackendConnectionMongodbArgsOutput() SecretBackendConnectionMongodbArgsOutput {
	return o
}

func (o SecretBackendConnectionMongodbArgsOutput) ToSecretBackendConnectionMongodbArgsOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbArgsOutput {
	return o
}

func (o SecretBackendConnectionMongodbArgsOutput) ToSecretBackendConnectionMongodbArgsPtrOutput() SecretBackendConnectionMongodbArgsPtrOutput {
	return o.ToSecretBackendConnectionMongodbArgsPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMongodbArgsOutput) ToSecretBackendConnectionMongodbArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbArgsPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbArgs) *SecretBackendConnectionMongodbArgs {
		return &v
	}).(SecretBackendConnectionMongodbArgsPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMongodbArgsOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMongodbArgsOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMongodbArgsOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMongodbArgsOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMongodbArgsPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMongodbArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMongodbArgs)(nil)).Elem()
}

func (o SecretBackendConnectionMongodbArgsPtrOutput) ToSecretBackendConnectionMongodbArgsPtrOutput() SecretBackendConnectionMongodbArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionMongodbArgsPtrOutput) ToSecretBackendConnectionMongodbArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionMongodbArgsPtrOutput) Elem() SecretBackendConnectionMongodbArgsOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMongodbArgs) SecretBackendConnectionMongodbArgs { return *v }).(SecretBackendConnectionMongodbArgsOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMongodbArgsPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMongodbArgsPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMongodbArgsPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMongodbArgsPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMongodbState struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMongodbStateInput interface {
	pulumi.Input

	ToSecretBackendConnectionMongodbStateOutput() SecretBackendConnectionMongodbStateOutput
	ToSecretBackendConnectionMongodbStateOutputWithContext(context.Context) SecretBackendConnectionMongodbStateOutput
}

type SecretBackendConnectionMongodbStateArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMongodbStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMongodbState)(nil)).Elem()
}

func (i SecretBackendConnectionMongodbStateArgs) ToSecretBackendConnectionMongodbStateOutput() SecretBackendConnectionMongodbStateOutput {
	return i.ToSecretBackendConnectionMongodbStateOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMongodbStateArgs) ToSecretBackendConnectionMongodbStateOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMongodbStateOutput)
}

type SecretBackendConnectionMongodbStateOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMongodbStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMongodbState)(nil)).Elem()
}

func (o SecretBackendConnectionMongodbStateOutput) ToSecretBackendConnectionMongodbStateOutput() SecretBackendConnectionMongodbStateOutput {
	return o
}

func (o SecretBackendConnectionMongodbStateOutput) ToSecretBackendConnectionMongodbStateOutputWithContext(ctx context.Context) SecretBackendConnectionMongodbStateOutput {
	return o
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMongodbStateOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbState) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMongodbStateOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbState) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMongodbStateOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbState) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMongodbStateOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMongodbState) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMssql struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMssqlInput interface {
	pulumi.Input

	ToSecretBackendConnectionMssqlOutput() SecretBackendConnectionMssqlOutput
	ToSecretBackendConnectionMssqlOutputWithContext(context.Context) SecretBackendConnectionMssqlOutput
}

type SecretBackendConnectionMssqlArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMssqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMssql)(nil)).Elem()
}

func (i SecretBackendConnectionMssqlArgs) ToSecretBackendConnectionMssqlOutput() SecretBackendConnectionMssqlOutput {
	return i.ToSecretBackendConnectionMssqlOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMssqlArgs) ToSecretBackendConnectionMssqlOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMssqlOutput)
}

func (i SecretBackendConnectionMssqlArgs) ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput {
	return i.ToSecretBackendConnectionMssqlPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMssqlArgs) ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMssqlOutput).ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx)
}

type SecretBackendConnectionMssqlPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput
	ToSecretBackendConnectionMssqlPtrOutputWithContext(context.Context) SecretBackendConnectionMssqlPtrOutput
}

type secretBackendConnectionMssqlPtrType SecretBackendConnectionMssqlArgs

func SecretBackendConnectionMssqlPtr(v *SecretBackendConnectionMssqlArgs) SecretBackendConnectionMssqlPtrInput {
	return (*secretBackendConnectionMssqlPtrType)(v)
}

func (*secretBackendConnectionMssqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMssql)(nil)).Elem()
}

func (i *secretBackendConnectionMssqlPtrType) ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput {
	return i.ToSecretBackendConnectionMssqlPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMssqlPtrType) ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMssqlPtrOutput)
}

type SecretBackendConnectionMssqlOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMssqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMssql)(nil)).Elem()
}

func (o SecretBackendConnectionMssqlOutput) ToSecretBackendConnectionMssqlOutput() SecretBackendConnectionMssqlOutput {
	return o
}

func (o SecretBackendConnectionMssqlOutput) ToSecretBackendConnectionMssqlOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlOutput {
	return o
}

func (o SecretBackendConnectionMssqlOutput) ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput {
	return o.ToSecretBackendConnectionMssqlPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMssqlOutput) ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *SecretBackendConnectionMssql {
		return &v
	}).(SecretBackendConnectionMssqlPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMssqlOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMssqlOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMssqlOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMssqlOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMssqlPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMssqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMssql)(nil)).Elem()
}

func (o SecretBackendConnectionMssqlPtrOutput) ToSecretBackendConnectionMssqlPtrOutput() SecretBackendConnectionMssqlPtrOutput {
	return o
}

func (o SecretBackendConnectionMssqlPtrOutput) ToSecretBackendConnectionMssqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlPtrOutput {
	return o
}

func (o SecretBackendConnectionMssqlPtrOutput) Elem() SecretBackendConnectionMssqlOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssql) SecretBackendConnectionMssql { return *v }).(SecretBackendConnectionMssqlOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMssqlPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMssqlPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMssqlPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMssqlPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMssqlArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMssqlArgsInput interface {
	pulumi.Input

	ToSecretBackendConnectionMssqlArgsOutput() SecretBackendConnectionMssqlArgsOutput
	ToSecretBackendConnectionMssqlArgsOutputWithContext(context.Context) SecretBackendConnectionMssqlArgsOutput
}

type SecretBackendConnectionMssqlArgsArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMssqlArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMssqlArgs)(nil)).Elem()
}

func (i SecretBackendConnectionMssqlArgsArgs) ToSecretBackendConnectionMssqlArgsOutput() SecretBackendConnectionMssqlArgsOutput {
	return i.ToSecretBackendConnectionMssqlArgsOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMssqlArgsArgs) ToSecretBackendConnectionMssqlArgsOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMssqlArgsOutput)
}

func (i SecretBackendConnectionMssqlArgsArgs) ToSecretBackendConnectionMssqlArgsPtrOutput() SecretBackendConnectionMssqlArgsPtrOutput {
	return i.ToSecretBackendConnectionMssqlArgsPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMssqlArgsArgs) ToSecretBackendConnectionMssqlArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMssqlArgsOutput).ToSecretBackendConnectionMssqlArgsPtrOutputWithContext(ctx)
}

type SecretBackendConnectionMssqlArgsPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMssqlArgsPtrOutput() SecretBackendConnectionMssqlArgsPtrOutput
	ToSecretBackendConnectionMssqlArgsPtrOutputWithContext(context.Context) SecretBackendConnectionMssqlArgsPtrOutput
}

type secretBackendConnectionMssqlArgsPtrType SecretBackendConnectionMssqlArgsArgs

func SecretBackendConnectionMssqlArgsPtr(v *SecretBackendConnectionMssqlArgsArgs) SecretBackendConnectionMssqlArgsPtrInput {
	return (*secretBackendConnectionMssqlArgsPtrType)(v)
}

func (*secretBackendConnectionMssqlArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMssqlArgs)(nil)).Elem()
}

func (i *secretBackendConnectionMssqlArgsPtrType) ToSecretBackendConnectionMssqlArgsPtrOutput() SecretBackendConnectionMssqlArgsPtrOutput {
	return i.ToSecretBackendConnectionMssqlArgsPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMssqlArgsPtrType) ToSecretBackendConnectionMssqlArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMssqlArgsPtrOutput)
}

type SecretBackendConnectionMssqlArgsOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMssqlArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMssqlArgs)(nil)).Elem()
}

func (o SecretBackendConnectionMssqlArgsOutput) ToSecretBackendConnectionMssqlArgsOutput() SecretBackendConnectionMssqlArgsOutput {
	return o
}

func (o SecretBackendConnectionMssqlArgsOutput) ToSecretBackendConnectionMssqlArgsOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlArgsOutput {
	return o
}

func (o SecretBackendConnectionMssqlArgsOutput) ToSecretBackendConnectionMssqlArgsPtrOutput() SecretBackendConnectionMssqlArgsPtrOutput {
	return o.ToSecretBackendConnectionMssqlArgsPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMssqlArgsOutput) ToSecretBackendConnectionMssqlArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlArgsPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssqlArgs) *SecretBackendConnectionMssqlArgs {
		return &v
	}).(SecretBackendConnectionMssqlArgsPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMssqlArgsOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssqlArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMssqlArgsOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssqlArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMssqlArgsOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssqlArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMssqlArgsOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssqlArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMssqlArgsPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMssqlArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMssqlArgs)(nil)).Elem()
}

func (o SecretBackendConnectionMssqlArgsPtrOutput) ToSecretBackendConnectionMssqlArgsPtrOutput() SecretBackendConnectionMssqlArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionMssqlArgsPtrOutput) ToSecretBackendConnectionMssqlArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionMssqlArgsPtrOutput) Elem() SecretBackendConnectionMssqlArgsOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMssqlArgs) SecretBackendConnectionMssqlArgs { return *v }).(SecretBackendConnectionMssqlArgsOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMssqlArgsPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssqlArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMssqlArgsPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssqlArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMssqlArgsPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssqlArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMssqlArgsPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssqlArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMssqlState struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMssqlStateInput interface {
	pulumi.Input

	ToSecretBackendConnectionMssqlStateOutput() SecretBackendConnectionMssqlStateOutput
	ToSecretBackendConnectionMssqlStateOutputWithContext(context.Context) SecretBackendConnectionMssqlStateOutput
}

type SecretBackendConnectionMssqlStateArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMssqlStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMssqlState)(nil)).Elem()
}

func (i SecretBackendConnectionMssqlStateArgs) ToSecretBackendConnectionMssqlStateOutput() SecretBackendConnectionMssqlStateOutput {
	return i.ToSecretBackendConnectionMssqlStateOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMssqlStateArgs) ToSecretBackendConnectionMssqlStateOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMssqlStateOutput)
}

type SecretBackendConnectionMssqlStateOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMssqlStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMssqlState)(nil)).Elem()
}

func (o SecretBackendConnectionMssqlStateOutput) ToSecretBackendConnectionMssqlStateOutput() SecretBackendConnectionMssqlStateOutput {
	return o
}

func (o SecretBackendConnectionMssqlStateOutput) ToSecretBackendConnectionMssqlStateOutputWithContext(ctx context.Context) SecretBackendConnectionMssqlStateOutput {
	return o
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMssqlStateOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssqlState) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMssqlStateOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssqlState) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMssqlStateOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssqlState) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMssqlStateOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMssqlState) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysql struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMysqlInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlOutput() SecretBackendConnectionMysqlOutput
	ToSecretBackendConnectionMysqlOutputWithContext(context.Context) SecretBackendConnectionMysqlOutput
}

type SecretBackendConnectionMysqlArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysql)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlArgs) ToSecretBackendConnectionMysqlOutput() SecretBackendConnectionMysqlOutput {
	return i.ToSecretBackendConnectionMysqlOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlArgs) ToSecretBackendConnectionMysqlOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlOutput)
}

func (i SecretBackendConnectionMysqlArgs) ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput {
	return i.ToSecretBackendConnectionMysqlPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlArgs) ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlOutput).ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx)
}

type SecretBackendConnectionMysqlPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput
	ToSecretBackendConnectionMysqlPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlPtrOutput
}

type secretBackendConnectionMysqlPtrType SecretBackendConnectionMysqlArgs

func SecretBackendConnectionMysqlPtr(v *SecretBackendConnectionMysqlArgs) SecretBackendConnectionMysqlPtrInput {
	return (*secretBackendConnectionMysqlPtrType)(v)
}

func (*secretBackendConnectionMysqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysql)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlPtrType) ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput {
	return i.ToSecretBackendConnectionMysqlPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlPtrType) ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlPtrOutput)
}

type SecretBackendConnectionMysqlOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysql)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlOutput) ToSecretBackendConnectionMysqlOutput() SecretBackendConnectionMysqlOutput {
	return o
}

func (o SecretBackendConnectionMysqlOutput) ToSecretBackendConnectionMysqlOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlOutput {
	return o
}

func (o SecretBackendConnectionMysqlOutput) ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput {
	return o.ToSecretBackendConnectionMysqlPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlOutput) ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *SecretBackendConnectionMysql {
		return &v
	}).(SecretBackendConnectionMysqlPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysql)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlPtrOutput) ToSecretBackendConnectionMysqlPtrOutput() SecretBackendConnectionMysqlPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlPtrOutput) ToSecretBackendConnectionMysqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlPtrOutput) Elem() SecretBackendConnectionMysqlOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysql) SecretBackendConnectionMysql { return *v }).(SecretBackendConnectionMysqlOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMysqlArgsInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlArgsOutput() SecretBackendConnectionMysqlArgsOutput
	ToSecretBackendConnectionMysqlArgsOutputWithContext(context.Context) SecretBackendConnectionMysqlArgsOutput
}

type SecretBackendConnectionMysqlArgsArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlArgs)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlArgsArgs) ToSecretBackendConnectionMysqlArgsOutput() SecretBackendConnectionMysqlArgsOutput {
	return i.ToSecretBackendConnectionMysqlArgsOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlArgsArgs) ToSecretBackendConnectionMysqlArgsOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlArgsOutput)
}

func (i SecretBackendConnectionMysqlArgsArgs) ToSecretBackendConnectionMysqlArgsPtrOutput() SecretBackendConnectionMysqlArgsPtrOutput {
	return i.ToSecretBackendConnectionMysqlArgsPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlArgsArgs) ToSecretBackendConnectionMysqlArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlArgsOutput).ToSecretBackendConnectionMysqlArgsPtrOutputWithContext(ctx)
}

type SecretBackendConnectionMysqlArgsPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlArgsPtrOutput() SecretBackendConnectionMysqlArgsPtrOutput
	ToSecretBackendConnectionMysqlArgsPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlArgsPtrOutput
}

type secretBackendConnectionMysqlArgsPtrType SecretBackendConnectionMysqlArgsArgs

func SecretBackendConnectionMysqlArgsPtr(v *SecretBackendConnectionMysqlArgsArgs) SecretBackendConnectionMysqlArgsPtrInput {
	return (*secretBackendConnectionMysqlArgsPtrType)(v)
}

func (*secretBackendConnectionMysqlArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlArgs)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlArgsPtrType) ToSecretBackendConnectionMysqlArgsPtrOutput() SecretBackendConnectionMysqlArgsPtrOutput {
	return i.ToSecretBackendConnectionMysqlArgsPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlArgsPtrType) ToSecretBackendConnectionMysqlArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlArgsPtrOutput)
}

type SecretBackendConnectionMysqlArgsOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlArgs)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlArgsOutput) ToSecretBackendConnectionMysqlArgsOutput() SecretBackendConnectionMysqlArgsOutput {
	return o
}

func (o SecretBackendConnectionMysqlArgsOutput) ToSecretBackendConnectionMysqlArgsOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlArgsOutput {
	return o
}

func (o SecretBackendConnectionMysqlArgsOutput) ToSecretBackendConnectionMysqlArgsPtrOutput() SecretBackendConnectionMysqlArgsPtrOutput {
	return o.ToSecretBackendConnectionMysqlArgsPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlArgsOutput) ToSecretBackendConnectionMysqlArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlArgsPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlArgs) *SecretBackendConnectionMysqlArgs {
		return &v
	}).(SecretBackendConnectionMysqlArgsPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlArgsOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlArgsOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlArgsOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlArgsOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlArgsPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlArgs)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlArgsPtrOutput) ToSecretBackendConnectionMysqlArgsPtrOutput() SecretBackendConnectionMysqlArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlArgsPtrOutput) ToSecretBackendConnectionMysqlArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlArgsPtrOutput) Elem() SecretBackendConnectionMysqlArgsOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlArgs) SecretBackendConnectionMysqlArgs { return *v }).(SecretBackendConnectionMysqlArgsOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlArgsPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlArgsPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlArgsPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlArgsPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlAurora struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMysqlAuroraInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlAuroraOutput() SecretBackendConnectionMysqlAuroraOutput
	ToSecretBackendConnectionMysqlAuroraOutputWithContext(context.Context) SecretBackendConnectionMysqlAuroraOutput
}

type SecretBackendConnectionMysqlAuroraArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlAuroraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlAurora)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlAuroraArgs) ToSecretBackendConnectionMysqlAuroraOutput() SecretBackendConnectionMysqlAuroraOutput {
	return i.ToSecretBackendConnectionMysqlAuroraOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlAuroraArgs) ToSecretBackendConnectionMysqlAuroraOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlAuroraOutput)
}

func (i SecretBackendConnectionMysqlAuroraArgs) ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput {
	return i.ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlAuroraArgs) ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlAuroraOutput).ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx)
}

type SecretBackendConnectionMysqlAuroraPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput
	ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlAuroraPtrOutput
}

type secretBackendConnectionMysqlAuroraPtrType SecretBackendConnectionMysqlAuroraArgs

func SecretBackendConnectionMysqlAuroraPtr(v *SecretBackendConnectionMysqlAuroraArgs) SecretBackendConnectionMysqlAuroraPtrInput {
	return (*secretBackendConnectionMysqlAuroraPtrType)(v)
}

func (*secretBackendConnectionMysqlAuroraPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlAurora)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlAuroraPtrType) ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput {
	return i.ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlAuroraPtrType) ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlAuroraPtrOutput)
}

type SecretBackendConnectionMysqlAuroraOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlAuroraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlAurora)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlAuroraOutput) ToSecretBackendConnectionMysqlAuroraOutput() SecretBackendConnectionMysqlAuroraOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraOutput) ToSecretBackendConnectionMysqlAuroraOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraOutput) ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput {
	return o.ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlAuroraOutput) ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *SecretBackendConnectionMysqlAurora {
		return &v
	}).(SecretBackendConnectionMysqlAuroraPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlAuroraOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlAuroraOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlAuroraOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlAuroraOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlAuroraPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlAuroraPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlAurora)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlAuroraPtrOutput) ToSecretBackendConnectionMysqlAuroraPtrOutput() SecretBackendConnectionMysqlAuroraPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraPtrOutput) ToSecretBackendConnectionMysqlAuroraPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraPtrOutput) Elem() SecretBackendConnectionMysqlAuroraOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAurora) SecretBackendConnectionMysqlAurora { return *v }).(SecretBackendConnectionMysqlAuroraOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlAuroraPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAurora) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlAuroraArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMysqlAuroraArgsInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlAuroraArgsOutput() SecretBackendConnectionMysqlAuroraArgsOutput
	ToSecretBackendConnectionMysqlAuroraArgsOutputWithContext(context.Context) SecretBackendConnectionMysqlAuroraArgsOutput
}

type SecretBackendConnectionMysqlAuroraArgsArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlAuroraArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlAuroraArgs)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlAuroraArgsArgs) ToSecretBackendConnectionMysqlAuroraArgsOutput() SecretBackendConnectionMysqlAuroraArgsOutput {
	return i.ToSecretBackendConnectionMysqlAuroraArgsOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlAuroraArgsArgs) ToSecretBackendConnectionMysqlAuroraArgsOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlAuroraArgsOutput)
}

func (i SecretBackendConnectionMysqlAuroraArgsArgs) ToSecretBackendConnectionMysqlAuroraArgsPtrOutput() SecretBackendConnectionMysqlAuroraArgsPtrOutput {
	return i.ToSecretBackendConnectionMysqlAuroraArgsPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlAuroraArgsArgs) ToSecretBackendConnectionMysqlAuroraArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlAuroraArgsOutput).ToSecretBackendConnectionMysqlAuroraArgsPtrOutputWithContext(ctx)
}

type SecretBackendConnectionMysqlAuroraArgsPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlAuroraArgsPtrOutput() SecretBackendConnectionMysqlAuroraArgsPtrOutput
	ToSecretBackendConnectionMysqlAuroraArgsPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlAuroraArgsPtrOutput
}

type secretBackendConnectionMysqlAuroraArgsPtrType SecretBackendConnectionMysqlAuroraArgsArgs

func SecretBackendConnectionMysqlAuroraArgsPtr(v *SecretBackendConnectionMysqlAuroraArgsArgs) SecretBackendConnectionMysqlAuroraArgsPtrInput {
	return (*secretBackendConnectionMysqlAuroraArgsPtrType)(v)
}

func (*secretBackendConnectionMysqlAuroraArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlAuroraArgs)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlAuroraArgsPtrType) ToSecretBackendConnectionMysqlAuroraArgsPtrOutput() SecretBackendConnectionMysqlAuroraArgsPtrOutput {
	return i.ToSecretBackendConnectionMysqlAuroraArgsPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlAuroraArgsPtrType) ToSecretBackendConnectionMysqlAuroraArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlAuroraArgsPtrOutput)
}

type SecretBackendConnectionMysqlAuroraArgsOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlAuroraArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlAuroraArgs)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlAuroraArgsOutput) ToSecretBackendConnectionMysqlAuroraArgsOutput() SecretBackendConnectionMysqlAuroraArgsOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraArgsOutput) ToSecretBackendConnectionMysqlAuroraArgsOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraArgsOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraArgsOutput) ToSecretBackendConnectionMysqlAuroraArgsPtrOutput() SecretBackendConnectionMysqlAuroraArgsPtrOutput {
	return o.ToSecretBackendConnectionMysqlAuroraArgsPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlAuroraArgsOutput) ToSecretBackendConnectionMysqlAuroraArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraArgsPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAuroraArgs) *SecretBackendConnectionMysqlAuroraArgs {
		return &v
	}).(SecretBackendConnectionMysqlAuroraArgsPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlAuroraArgsOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAuroraArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlAuroraArgsOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAuroraArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlAuroraArgsOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAuroraArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlAuroraArgsOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAuroraArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlAuroraArgsPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlAuroraArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlAuroraArgs)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlAuroraArgsPtrOutput) ToSecretBackendConnectionMysqlAuroraArgsPtrOutput() SecretBackendConnectionMysqlAuroraArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraArgsPtrOutput) ToSecretBackendConnectionMysqlAuroraArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraArgsPtrOutput) Elem() SecretBackendConnectionMysqlAuroraArgsOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlAuroraArgs) SecretBackendConnectionMysqlAuroraArgs { return *v }).(SecretBackendConnectionMysqlAuroraArgsOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlAuroraArgsPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAuroraArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlAuroraArgsPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAuroraArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlAuroraArgsPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAuroraArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlAuroraArgsPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAuroraArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlAuroraState struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMysqlAuroraStateInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlAuroraStateOutput() SecretBackendConnectionMysqlAuroraStateOutput
	ToSecretBackendConnectionMysqlAuroraStateOutputWithContext(context.Context) SecretBackendConnectionMysqlAuroraStateOutput
}

type SecretBackendConnectionMysqlAuroraStateArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlAuroraStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlAuroraState)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlAuroraStateArgs) ToSecretBackendConnectionMysqlAuroraStateOutput() SecretBackendConnectionMysqlAuroraStateOutput {
	return i.ToSecretBackendConnectionMysqlAuroraStateOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlAuroraStateArgs) ToSecretBackendConnectionMysqlAuroraStateOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlAuroraStateOutput)
}

type SecretBackendConnectionMysqlAuroraStateOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlAuroraStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlAuroraState)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlAuroraStateOutput) ToSecretBackendConnectionMysqlAuroraStateOutput() SecretBackendConnectionMysqlAuroraStateOutput {
	return o
}

func (o SecretBackendConnectionMysqlAuroraStateOutput) ToSecretBackendConnectionMysqlAuroraStateOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlAuroraStateOutput {
	return o
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlAuroraStateOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAuroraState) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlAuroraStateOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAuroraState) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlAuroraStateOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAuroraState) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlAuroraStateOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlAuroraState) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlLegacy struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMysqlLegacyInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlLegacyOutput() SecretBackendConnectionMysqlLegacyOutput
	ToSecretBackendConnectionMysqlLegacyOutputWithContext(context.Context) SecretBackendConnectionMysqlLegacyOutput
}

type SecretBackendConnectionMysqlLegacyArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlLegacyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlLegacy)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlLegacyArgs) ToSecretBackendConnectionMysqlLegacyOutput() SecretBackendConnectionMysqlLegacyOutput {
	return i.ToSecretBackendConnectionMysqlLegacyOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlLegacyArgs) ToSecretBackendConnectionMysqlLegacyOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlLegacyOutput)
}

func (i SecretBackendConnectionMysqlLegacyArgs) ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput {
	return i.ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlLegacyArgs) ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlLegacyOutput).ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx)
}

type SecretBackendConnectionMysqlLegacyPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput
	ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlLegacyPtrOutput
}

type secretBackendConnectionMysqlLegacyPtrType SecretBackendConnectionMysqlLegacyArgs

func SecretBackendConnectionMysqlLegacyPtr(v *SecretBackendConnectionMysqlLegacyArgs) SecretBackendConnectionMysqlLegacyPtrInput {
	return (*secretBackendConnectionMysqlLegacyPtrType)(v)
}

func (*secretBackendConnectionMysqlLegacyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlLegacy)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlLegacyPtrType) ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput {
	return i.ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlLegacyPtrType) ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlLegacyPtrOutput)
}

type SecretBackendConnectionMysqlLegacyOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlLegacyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlLegacy)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlLegacyOutput) ToSecretBackendConnectionMysqlLegacyOutput() SecretBackendConnectionMysqlLegacyOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyOutput) ToSecretBackendConnectionMysqlLegacyOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyOutput) ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput {
	return o.ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlLegacyOutput) ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *SecretBackendConnectionMysqlLegacy {
		return &v
	}).(SecretBackendConnectionMysqlLegacyPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlLegacyOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlLegacyOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlLegacyOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlLegacyOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlLegacyPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlLegacyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlLegacy)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlLegacyPtrOutput) ToSecretBackendConnectionMysqlLegacyPtrOutput() SecretBackendConnectionMysqlLegacyPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyPtrOutput) ToSecretBackendConnectionMysqlLegacyPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyPtrOutput) Elem() SecretBackendConnectionMysqlLegacyOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacy) SecretBackendConnectionMysqlLegacy { return *v }).(SecretBackendConnectionMysqlLegacyOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlLegacyPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacy) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlLegacyArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMysqlLegacyArgsInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlLegacyArgsOutput() SecretBackendConnectionMysqlLegacyArgsOutput
	ToSecretBackendConnectionMysqlLegacyArgsOutputWithContext(context.Context) SecretBackendConnectionMysqlLegacyArgsOutput
}

type SecretBackendConnectionMysqlLegacyArgsArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlLegacyArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlLegacyArgs)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlLegacyArgsArgs) ToSecretBackendConnectionMysqlLegacyArgsOutput() SecretBackendConnectionMysqlLegacyArgsOutput {
	return i.ToSecretBackendConnectionMysqlLegacyArgsOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlLegacyArgsArgs) ToSecretBackendConnectionMysqlLegacyArgsOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlLegacyArgsOutput)
}

func (i SecretBackendConnectionMysqlLegacyArgsArgs) ToSecretBackendConnectionMysqlLegacyArgsPtrOutput() SecretBackendConnectionMysqlLegacyArgsPtrOutput {
	return i.ToSecretBackendConnectionMysqlLegacyArgsPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlLegacyArgsArgs) ToSecretBackendConnectionMysqlLegacyArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlLegacyArgsOutput).ToSecretBackendConnectionMysqlLegacyArgsPtrOutputWithContext(ctx)
}

type SecretBackendConnectionMysqlLegacyArgsPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlLegacyArgsPtrOutput() SecretBackendConnectionMysqlLegacyArgsPtrOutput
	ToSecretBackendConnectionMysqlLegacyArgsPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlLegacyArgsPtrOutput
}

type secretBackendConnectionMysqlLegacyArgsPtrType SecretBackendConnectionMysqlLegacyArgsArgs

func SecretBackendConnectionMysqlLegacyArgsPtr(v *SecretBackendConnectionMysqlLegacyArgsArgs) SecretBackendConnectionMysqlLegacyArgsPtrInput {
	return (*secretBackendConnectionMysqlLegacyArgsPtrType)(v)
}

func (*secretBackendConnectionMysqlLegacyArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlLegacyArgs)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlLegacyArgsPtrType) ToSecretBackendConnectionMysqlLegacyArgsPtrOutput() SecretBackendConnectionMysqlLegacyArgsPtrOutput {
	return i.ToSecretBackendConnectionMysqlLegacyArgsPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlLegacyArgsPtrType) ToSecretBackendConnectionMysqlLegacyArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlLegacyArgsPtrOutput)
}

type SecretBackendConnectionMysqlLegacyArgsOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlLegacyArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlLegacyArgs)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlLegacyArgsOutput) ToSecretBackendConnectionMysqlLegacyArgsOutput() SecretBackendConnectionMysqlLegacyArgsOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyArgsOutput) ToSecretBackendConnectionMysqlLegacyArgsOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyArgsOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyArgsOutput) ToSecretBackendConnectionMysqlLegacyArgsPtrOutput() SecretBackendConnectionMysqlLegacyArgsPtrOutput {
	return o.ToSecretBackendConnectionMysqlLegacyArgsPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlLegacyArgsOutput) ToSecretBackendConnectionMysqlLegacyArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyArgsPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacyArgs) *SecretBackendConnectionMysqlLegacyArgs {
		return &v
	}).(SecretBackendConnectionMysqlLegacyArgsPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlLegacyArgsOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacyArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlLegacyArgsOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacyArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlLegacyArgsOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacyArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlLegacyArgsOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacyArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlLegacyArgsPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlLegacyArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlLegacyArgs)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlLegacyArgsPtrOutput) ToSecretBackendConnectionMysqlLegacyArgsPtrOutput() SecretBackendConnectionMysqlLegacyArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyArgsPtrOutput) ToSecretBackendConnectionMysqlLegacyArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyArgsPtrOutput) Elem() SecretBackendConnectionMysqlLegacyArgsOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlLegacyArgs) SecretBackendConnectionMysqlLegacyArgs { return *v }).(SecretBackendConnectionMysqlLegacyArgsOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlLegacyArgsPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacyArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlLegacyArgsPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacyArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlLegacyArgsPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacyArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlLegacyArgsPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacyArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlLegacyState struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMysqlLegacyStateInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlLegacyStateOutput() SecretBackendConnectionMysqlLegacyStateOutput
	ToSecretBackendConnectionMysqlLegacyStateOutputWithContext(context.Context) SecretBackendConnectionMysqlLegacyStateOutput
}

type SecretBackendConnectionMysqlLegacyStateArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlLegacyStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlLegacyState)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlLegacyStateArgs) ToSecretBackendConnectionMysqlLegacyStateOutput() SecretBackendConnectionMysqlLegacyStateOutput {
	return i.ToSecretBackendConnectionMysqlLegacyStateOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlLegacyStateArgs) ToSecretBackendConnectionMysqlLegacyStateOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlLegacyStateOutput)
}

type SecretBackendConnectionMysqlLegacyStateOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlLegacyStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlLegacyState)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlLegacyStateOutput) ToSecretBackendConnectionMysqlLegacyStateOutput() SecretBackendConnectionMysqlLegacyStateOutput {
	return o
}

func (o SecretBackendConnectionMysqlLegacyStateOutput) ToSecretBackendConnectionMysqlLegacyStateOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlLegacyStateOutput {
	return o
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlLegacyStateOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacyState) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlLegacyStateOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacyState) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlLegacyStateOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacyState) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlLegacyStateOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlLegacyState) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlRds struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMysqlRdsInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlRdsOutput() SecretBackendConnectionMysqlRdsOutput
	ToSecretBackendConnectionMysqlRdsOutputWithContext(context.Context) SecretBackendConnectionMysqlRdsOutput
}

type SecretBackendConnectionMysqlRdsArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlRdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlRds)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlRdsArgs) ToSecretBackendConnectionMysqlRdsOutput() SecretBackendConnectionMysqlRdsOutput {
	return i.ToSecretBackendConnectionMysqlRdsOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlRdsArgs) ToSecretBackendConnectionMysqlRdsOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlRdsOutput)
}

func (i SecretBackendConnectionMysqlRdsArgs) ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput {
	return i.ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlRdsArgs) ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlRdsOutput).ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx)
}

type SecretBackendConnectionMysqlRdsPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput
	ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlRdsPtrOutput
}

type secretBackendConnectionMysqlRdsPtrType SecretBackendConnectionMysqlRdsArgs

func SecretBackendConnectionMysqlRdsPtr(v *SecretBackendConnectionMysqlRdsArgs) SecretBackendConnectionMysqlRdsPtrInput {
	return (*secretBackendConnectionMysqlRdsPtrType)(v)
}

func (*secretBackendConnectionMysqlRdsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlRds)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlRdsPtrType) ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput {
	return i.ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlRdsPtrType) ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlRdsPtrOutput)
}

type SecretBackendConnectionMysqlRdsOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlRdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlRds)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlRdsOutput) ToSecretBackendConnectionMysqlRdsOutput() SecretBackendConnectionMysqlRdsOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsOutput) ToSecretBackendConnectionMysqlRdsOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsOutput) ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput {
	return o.ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlRdsOutput) ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *SecretBackendConnectionMysqlRds {
		return &v
	}).(SecretBackendConnectionMysqlRdsPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlRdsOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlRdsOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlRdsOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlRdsOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlRdsPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlRdsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlRds)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlRdsPtrOutput) ToSecretBackendConnectionMysqlRdsPtrOutput() SecretBackendConnectionMysqlRdsPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsPtrOutput) ToSecretBackendConnectionMysqlRdsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsPtrOutput) Elem() SecretBackendConnectionMysqlRdsOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRds) SecretBackendConnectionMysqlRds { return *v }).(SecretBackendConnectionMysqlRdsOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlRdsPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlRdsPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlRdsPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlRdsPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRds) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlRdsArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMysqlRdsArgsInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlRdsArgsOutput() SecretBackendConnectionMysqlRdsArgsOutput
	ToSecretBackendConnectionMysqlRdsArgsOutputWithContext(context.Context) SecretBackendConnectionMysqlRdsArgsOutput
}

type SecretBackendConnectionMysqlRdsArgsArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlRdsArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlRdsArgs)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlRdsArgsArgs) ToSecretBackendConnectionMysqlRdsArgsOutput() SecretBackendConnectionMysqlRdsArgsOutput {
	return i.ToSecretBackendConnectionMysqlRdsArgsOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlRdsArgsArgs) ToSecretBackendConnectionMysqlRdsArgsOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlRdsArgsOutput)
}

func (i SecretBackendConnectionMysqlRdsArgsArgs) ToSecretBackendConnectionMysqlRdsArgsPtrOutput() SecretBackendConnectionMysqlRdsArgsPtrOutput {
	return i.ToSecretBackendConnectionMysqlRdsArgsPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlRdsArgsArgs) ToSecretBackendConnectionMysqlRdsArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlRdsArgsOutput).ToSecretBackendConnectionMysqlRdsArgsPtrOutputWithContext(ctx)
}

type SecretBackendConnectionMysqlRdsArgsPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlRdsArgsPtrOutput() SecretBackendConnectionMysqlRdsArgsPtrOutput
	ToSecretBackendConnectionMysqlRdsArgsPtrOutputWithContext(context.Context) SecretBackendConnectionMysqlRdsArgsPtrOutput
}

type secretBackendConnectionMysqlRdsArgsPtrType SecretBackendConnectionMysqlRdsArgsArgs

func SecretBackendConnectionMysqlRdsArgsPtr(v *SecretBackendConnectionMysqlRdsArgsArgs) SecretBackendConnectionMysqlRdsArgsPtrInput {
	return (*secretBackendConnectionMysqlRdsArgsPtrType)(v)
}

func (*secretBackendConnectionMysqlRdsArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlRdsArgs)(nil)).Elem()
}

func (i *secretBackendConnectionMysqlRdsArgsPtrType) ToSecretBackendConnectionMysqlRdsArgsPtrOutput() SecretBackendConnectionMysqlRdsArgsPtrOutput {
	return i.ToSecretBackendConnectionMysqlRdsArgsPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionMysqlRdsArgsPtrType) ToSecretBackendConnectionMysqlRdsArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlRdsArgsPtrOutput)
}

type SecretBackendConnectionMysqlRdsArgsOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlRdsArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlRdsArgs)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlRdsArgsOutput) ToSecretBackendConnectionMysqlRdsArgsOutput() SecretBackendConnectionMysqlRdsArgsOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsArgsOutput) ToSecretBackendConnectionMysqlRdsArgsOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsArgsOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsArgsOutput) ToSecretBackendConnectionMysqlRdsArgsPtrOutput() SecretBackendConnectionMysqlRdsArgsPtrOutput {
	return o.ToSecretBackendConnectionMysqlRdsArgsPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionMysqlRdsArgsOutput) ToSecretBackendConnectionMysqlRdsArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsArgsPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRdsArgs) *SecretBackendConnectionMysqlRdsArgs {
		return &v
	}).(SecretBackendConnectionMysqlRdsArgsPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlRdsArgsOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRdsArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlRdsArgsOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRdsArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlRdsArgsOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRdsArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlRdsArgsOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRdsArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlRdsArgsPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlRdsArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionMysqlRdsArgs)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlRdsArgsPtrOutput) ToSecretBackendConnectionMysqlRdsArgsPtrOutput() SecretBackendConnectionMysqlRdsArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsArgsPtrOutput) ToSecretBackendConnectionMysqlRdsArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsArgsPtrOutput) Elem() SecretBackendConnectionMysqlRdsArgsOutput {
	return o.ApplyT(func(v *SecretBackendConnectionMysqlRdsArgs) SecretBackendConnectionMysqlRdsArgs { return *v }).(SecretBackendConnectionMysqlRdsArgsOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlRdsArgsPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRdsArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlRdsArgsPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRdsArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlRdsArgsPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRdsArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlRdsArgsPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRdsArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlRdsState struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMysqlRdsStateInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlRdsStateOutput() SecretBackendConnectionMysqlRdsStateOutput
	ToSecretBackendConnectionMysqlRdsStateOutputWithContext(context.Context) SecretBackendConnectionMysqlRdsStateOutput
}

type SecretBackendConnectionMysqlRdsStateArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlRdsStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlRdsState)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlRdsStateArgs) ToSecretBackendConnectionMysqlRdsStateOutput() SecretBackendConnectionMysqlRdsStateOutput {
	return i.ToSecretBackendConnectionMysqlRdsStateOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlRdsStateArgs) ToSecretBackendConnectionMysqlRdsStateOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlRdsStateOutput)
}

type SecretBackendConnectionMysqlRdsStateOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlRdsStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlRdsState)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlRdsStateOutput) ToSecretBackendConnectionMysqlRdsStateOutput() SecretBackendConnectionMysqlRdsStateOutput {
	return o
}

func (o SecretBackendConnectionMysqlRdsStateOutput) ToSecretBackendConnectionMysqlRdsStateOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlRdsStateOutput {
	return o
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlRdsStateOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRdsState) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlRdsStateOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRdsState) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlRdsStateOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRdsState) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlRdsStateOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlRdsState) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionMysqlState struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionMysqlStateInput interface {
	pulumi.Input

	ToSecretBackendConnectionMysqlStateOutput() SecretBackendConnectionMysqlStateOutput
	ToSecretBackendConnectionMysqlStateOutputWithContext(context.Context) SecretBackendConnectionMysqlStateOutput
}

type SecretBackendConnectionMysqlStateArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionMysqlStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlState)(nil)).Elem()
}

func (i SecretBackendConnectionMysqlStateArgs) ToSecretBackendConnectionMysqlStateOutput() SecretBackendConnectionMysqlStateOutput {
	return i.ToSecretBackendConnectionMysqlStateOutputWithContext(context.Background())
}

func (i SecretBackendConnectionMysqlStateArgs) ToSecretBackendConnectionMysqlStateOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionMysqlStateOutput)
}

type SecretBackendConnectionMysqlStateOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionMysqlStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionMysqlState)(nil)).Elem()
}

func (o SecretBackendConnectionMysqlStateOutput) ToSecretBackendConnectionMysqlStateOutput() SecretBackendConnectionMysqlStateOutput {
	return o
}

func (o SecretBackendConnectionMysqlStateOutput) ToSecretBackendConnectionMysqlStateOutputWithContext(ctx context.Context) SecretBackendConnectionMysqlStateOutput {
	return o
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionMysqlStateOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlState) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionMysqlStateOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlState) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionMysqlStateOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlState) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionMysqlStateOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionMysqlState) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionOracle struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionOracleInput interface {
	pulumi.Input

	ToSecretBackendConnectionOracleOutput() SecretBackendConnectionOracleOutput
	ToSecretBackendConnectionOracleOutputWithContext(context.Context) SecretBackendConnectionOracleOutput
}

type SecretBackendConnectionOracleArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionOracleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionOracle)(nil)).Elem()
}

func (i SecretBackendConnectionOracleArgs) ToSecretBackendConnectionOracleOutput() SecretBackendConnectionOracleOutput {
	return i.ToSecretBackendConnectionOracleOutputWithContext(context.Background())
}

func (i SecretBackendConnectionOracleArgs) ToSecretBackendConnectionOracleOutputWithContext(ctx context.Context) SecretBackendConnectionOracleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionOracleOutput)
}

func (i SecretBackendConnectionOracleArgs) ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput {
	return i.ToSecretBackendConnectionOraclePtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionOracleArgs) ToSecretBackendConnectionOraclePtrOutputWithContext(ctx context.Context) SecretBackendConnectionOraclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionOracleOutput).ToSecretBackendConnectionOraclePtrOutputWithContext(ctx)
}

type SecretBackendConnectionOraclePtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput
	ToSecretBackendConnectionOraclePtrOutputWithContext(context.Context) SecretBackendConnectionOraclePtrOutput
}

type secretBackendConnectionOraclePtrType SecretBackendConnectionOracleArgs

func SecretBackendConnectionOraclePtr(v *SecretBackendConnectionOracleArgs) SecretBackendConnectionOraclePtrInput {
	return (*secretBackendConnectionOraclePtrType)(v)
}

func (*secretBackendConnectionOraclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionOracle)(nil)).Elem()
}

func (i *secretBackendConnectionOraclePtrType) ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput {
	return i.ToSecretBackendConnectionOraclePtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionOraclePtrType) ToSecretBackendConnectionOraclePtrOutputWithContext(ctx context.Context) SecretBackendConnectionOraclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionOraclePtrOutput)
}

type SecretBackendConnectionOracleOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionOracleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionOracle)(nil)).Elem()
}

func (o SecretBackendConnectionOracleOutput) ToSecretBackendConnectionOracleOutput() SecretBackendConnectionOracleOutput {
	return o
}

func (o SecretBackendConnectionOracleOutput) ToSecretBackendConnectionOracleOutputWithContext(ctx context.Context) SecretBackendConnectionOracleOutput {
	return o
}

func (o SecretBackendConnectionOracleOutput) ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput {
	return o.ToSecretBackendConnectionOraclePtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionOracleOutput) ToSecretBackendConnectionOraclePtrOutputWithContext(ctx context.Context) SecretBackendConnectionOraclePtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *SecretBackendConnectionOracle {
		return &v
	}).(SecretBackendConnectionOraclePtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionOracleOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionOracleOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionOracleOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionOracleOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionOraclePtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionOraclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionOracle)(nil)).Elem()
}

func (o SecretBackendConnectionOraclePtrOutput) ToSecretBackendConnectionOraclePtrOutput() SecretBackendConnectionOraclePtrOutput {
	return o
}

func (o SecretBackendConnectionOraclePtrOutput) ToSecretBackendConnectionOraclePtrOutputWithContext(ctx context.Context) SecretBackendConnectionOraclePtrOutput {
	return o
}

func (o SecretBackendConnectionOraclePtrOutput) Elem() SecretBackendConnectionOracleOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracle) SecretBackendConnectionOracle { return *v }).(SecretBackendConnectionOracleOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionOraclePtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionOraclePtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionOraclePtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionOraclePtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracle) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionOracleArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionOracleArgsInput interface {
	pulumi.Input

	ToSecretBackendConnectionOracleArgsOutput() SecretBackendConnectionOracleArgsOutput
	ToSecretBackendConnectionOracleArgsOutputWithContext(context.Context) SecretBackendConnectionOracleArgsOutput
}

type SecretBackendConnectionOracleArgsArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionOracleArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionOracleArgs)(nil)).Elem()
}

func (i SecretBackendConnectionOracleArgsArgs) ToSecretBackendConnectionOracleArgsOutput() SecretBackendConnectionOracleArgsOutput {
	return i.ToSecretBackendConnectionOracleArgsOutputWithContext(context.Background())
}

func (i SecretBackendConnectionOracleArgsArgs) ToSecretBackendConnectionOracleArgsOutputWithContext(ctx context.Context) SecretBackendConnectionOracleArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionOracleArgsOutput)
}

func (i SecretBackendConnectionOracleArgsArgs) ToSecretBackendConnectionOracleArgsPtrOutput() SecretBackendConnectionOracleArgsPtrOutput {
	return i.ToSecretBackendConnectionOracleArgsPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionOracleArgsArgs) ToSecretBackendConnectionOracleArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionOracleArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionOracleArgsOutput).ToSecretBackendConnectionOracleArgsPtrOutputWithContext(ctx)
}

type SecretBackendConnectionOracleArgsPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionOracleArgsPtrOutput() SecretBackendConnectionOracleArgsPtrOutput
	ToSecretBackendConnectionOracleArgsPtrOutputWithContext(context.Context) SecretBackendConnectionOracleArgsPtrOutput
}

type secretBackendConnectionOracleArgsPtrType SecretBackendConnectionOracleArgsArgs

func SecretBackendConnectionOracleArgsPtr(v *SecretBackendConnectionOracleArgsArgs) SecretBackendConnectionOracleArgsPtrInput {
	return (*secretBackendConnectionOracleArgsPtrType)(v)
}

func (*secretBackendConnectionOracleArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionOracleArgs)(nil)).Elem()
}

func (i *secretBackendConnectionOracleArgsPtrType) ToSecretBackendConnectionOracleArgsPtrOutput() SecretBackendConnectionOracleArgsPtrOutput {
	return i.ToSecretBackendConnectionOracleArgsPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionOracleArgsPtrType) ToSecretBackendConnectionOracleArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionOracleArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionOracleArgsPtrOutput)
}

type SecretBackendConnectionOracleArgsOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionOracleArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionOracleArgs)(nil)).Elem()
}

func (o SecretBackendConnectionOracleArgsOutput) ToSecretBackendConnectionOracleArgsOutput() SecretBackendConnectionOracleArgsOutput {
	return o
}

func (o SecretBackendConnectionOracleArgsOutput) ToSecretBackendConnectionOracleArgsOutputWithContext(ctx context.Context) SecretBackendConnectionOracleArgsOutput {
	return o
}

func (o SecretBackendConnectionOracleArgsOutput) ToSecretBackendConnectionOracleArgsPtrOutput() SecretBackendConnectionOracleArgsPtrOutput {
	return o.ToSecretBackendConnectionOracleArgsPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionOracleArgsOutput) ToSecretBackendConnectionOracleArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionOracleArgsPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracleArgs) *SecretBackendConnectionOracleArgs {
		return &v
	}).(SecretBackendConnectionOracleArgsPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionOracleArgsOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracleArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionOracleArgsOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracleArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionOracleArgsOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracleArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionOracleArgsOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracleArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionOracleArgsPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionOracleArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionOracleArgs)(nil)).Elem()
}

func (o SecretBackendConnectionOracleArgsPtrOutput) ToSecretBackendConnectionOracleArgsPtrOutput() SecretBackendConnectionOracleArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionOracleArgsPtrOutput) ToSecretBackendConnectionOracleArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionOracleArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionOracleArgsPtrOutput) Elem() SecretBackendConnectionOracleArgsOutput {
	return o.ApplyT(func(v *SecretBackendConnectionOracleArgs) SecretBackendConnectionOracleArgs { return *v }).(SecretBackendConnectionOracleArgsOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionOracleArgsPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracleArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionOracleArgsPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracleArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionOracleArgsPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracleArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionOracleArgsPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracleArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionOracleState struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionOracleStateInput interface {
	pulumi.Input

	ToSecretBackendConnectionOracleStateOutput() SecretBackendConnectionOracleStateOutput
	ToSecretBackendConnectionOracleStateOutputWithContext(context.Context) SecretBackendConnectionOracleStateOutput
}

type SecretBackendConnectionOracleStateArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionOracleStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionOracleState)(nil)).Elem()
}

func (i SecretBackendConnectionOracleStateArgs) ToSecretBackendConnectionOracleStateOutput() SecretBackendConnectionOracleStateOutput {
	return i.ToSecretBackendConnectionOracleStateOutputWithContext(context.Background())
}

func (i SecretBackendConnectionOracleStateArgs) ToSecretBackendConnectionOracleStateOutputWithContext(ctx context.Context) SecretBackendConnectionOracleStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionOracleStateOutput)
}

type SecretBackendConnectionOracleStateOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionOracleStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionOracleState)(nil)).Elem()
}

func (o SecretBackendConnectionOracleStateOutput) ToSecretBackendConnectionOracleStateOutput() SecretBackendConnectionOracleStateOutput {
	return o
}

func (o SecretBackendConnectionOracleStateOutput) ToSecretBackendConnectionOracleStateOutputWithContext(ctx context.Context) SecretBackendConnectionOracleStateOutput {
	return o
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionOracleStateOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracleState) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionOracleStateOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracleState) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionOracleStateOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracleState) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionOracleStateOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionOracleState) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionPostgresql struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionPostgresqlInput interface {
	pulumi.Input

	ToSecretBackendConnectionPostgresqlOutput() SecretBackendConnectionPostgresqlOutput
	ToSecretBackendConnectionPostgresqlOutputWithContext(context.Context) SecretBackendConnectionPostgresqlOutput
}

type SecretBackendConnectionPostgresqlArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionPostgresqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionPostgresql)(nil)).Elem()
}

func (i SecretBackendConnectionPostgresqlArgs) ToSecretBackendConnectionPostgresqlOutput() SecretBackendConnectionPostgresqlOutput {
	return i.ToSecretBackendConnectionPostgresqlOutputWithContext(context.Background())
}

func (i SecretBackendConnectionPostgresqlArgs) ToSecretBackendConnectionPostgresqlOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionPostgresqlOutput)
}

func (i SecretBackendConnectionPostgresqlArgs) ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput {
	return i.ToSecretBackendConnectionPostgresqlPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionPostgresqlArgs) ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionPostgresqlOutput).ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx)
}

type SecretBackendConnectionPostgresqlPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput
	ToSecretBackendConnectionPostgresqlPtrOutputWithContext(context.Context) SecretBackendConnectionPostgresqlPtrOutput
}

type secretBackendConnectionPostgresqlPtrType SecretBackendConnectionPostgresqlArgs

func SecretBackendConnectionPostgresqlPtr(v *SecretBackendConnectionPostgresqlArgs) SecretBackendConnectionPostgresqlPtrInput {
	return (*secretBackendConnectionPostgresqlPtrType)(v)
}

func (*secretBackendConnectionPostgresqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionPostgresql)(nil)).Elem()
}

func (i *secretBackendConnectionPostgresqlPtrType) ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput {
	return i.ToSecretBackendConnectionPostgresqlPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionPostgresqlPtrType) ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionPostgresqlPtrOutput)
}

type SecretBackendConnectionPostgresqlOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionPostgresqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionPostgresql)(nil)).Elem()
}

func (o SecretBackendConnectionPostgresqlOutput) ToSecretBackendConnectionPostgresqlOutput() SecretBackendConnectionPostgresqlOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlOutput) ToSecretBackendConnectionPostgresqlOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlOutput) ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput {
	return o.ToSecretBackendConnectionPostgresqlPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionPostgresqlOutput) ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *SecretBackendConnectionPostgresql {
		return &v
	}).(SecretBackendConnectionPostgresqlPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionPostgresqlOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionPostgresqlOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionPostgresqlOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionPostgresqlOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionPostgresqlPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionPostgresqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionPostgresql)(nil)).Elem()
}

func (o SecretBackendConnectionPostgresqlPtrOutput) ToSecretBackendConnectionPostgresqlPtrOutput() SecretBackendConnectionPostgresqlPtrOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlPtrOutput) ToSecretBackendConnectionPostgresqlPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlPtrOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlPtrOutput) Elem() SecretBackendConnectionPostgresqlOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresql) SecretBackendConnectionPostgresql { return *v }).(SecretBackendConnectionPostgresqlOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionPostgresqlPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionPostgresqlPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionPostgresqlPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionPostgresqlPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresql) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionPostgresqlArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionPostgresqlArgsInput interface {
	pulumi.Input

	ToSecretBackendConnectionPostgresqlArgsOutput() SecretBackendConnectionPostgresqlArgsOutput
	ToSecretBackendConnectionPostgresqlArgsOutputWithContext(context.Context) SecretBackendConnectionPostgresqlArgsOutput
}

type SecretBackendConnectionPostgresqlArgsArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionPostgresqlArgsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionPostgresqlArgs)(nil)).Elem()
}

func (i SecretBackendConnectionPostgresqlArgsArgs) ToSecretBackendConnectionPostgresqlArgsOutput() SecretBackendConnectionPostgresqlArgsOutput {
	return i.ToSecretBackendConnectionPostgresqlArgsOutputWithContext(context.Background())
}

func (i SecretBackendConnectionPostgresqlArgsArgs) ToSecretBackendConnectionPostgresqlArgsOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlArgsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionPostgresqlArgsOutput)
}

func (i SecretBackendConnectionPostgresqlArgsArgs) ToSecretBackendConnectionPostgresqlArgsPtrOutput() SecretBackendConnectionPostgresqlArgsPtrOutput {
	return i.ToSecretBackendConnectionPostgresqlArgsPtrOutputWithContext(context.Background())
}

func (i SecretBackendConnectionPostgresqlArgsArgs) ToSecretBackendConnectionPostgresqlArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionPostgresqlArgsOutput).ToSecretBackendConnectionPostgresqlArgsPtrOutputWithContext(ctx)
}

type SecretBackendConnectionPostgresqlArgsPtrInput interface {
	pulumi.Input

	ToSecretBackendConnectionPostgresqlArgsPtrOutput() SecretBackendConnectionPostgresqlArgsPtrOutput
	ToSecretBackendConnectionPostgresqlArgsPtrOutputWithContext(context.Context) SecretBackendConnectionPostgresqlArgsPtrOutput
}

type secretBackendConnectionPostgresqlArgsPtrType SecretBackendConnectionPostgresqlArgsArgs

func SecretBackendConnectionPostgresqlArgsPtr(v *SecretBackendConnectionPostgresqlArgsArgs) SecretBackendConnectionPostgresqlArgsPtrInput {
	return (*secretBackendConnectionPostgresqlArgsPtrType)(v)
}

func (*secretBackendConnectionPostgresqlArgsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionPostgresqlArgs)(nil)).Elem()
}

func (i *secretBackendConnectionPostgresqlArgsPtrType) ToSecretBackendConnectionPostgresqlArgsPtrOutput() SecretBackendConnectionPostgresqlArgsPtrOutput {
	return i.ToSecretBackendConnectionPostgresqlArgsPtrOutputWithContext(context.Background())
}

func (i *secretBackendConnectionPostgresqlArgsPtrType) ToSecretBackendConnectionPostgresqlArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlArgsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionPostgresqlArgsPtrOutput)
}

type SecretBackendConnectionPostgresqlArgsOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionPostgresqlArgsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionPostgresqlArgs)(nil)).Elem()
}

func (o SecretBackendConnectionPostgresqlArgsOutput) ToSecretBackendConnectionPostgresqlArgsOutput() SecretBackendConnectionPostgresqlArgsOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlArgsOutput) ToSecretBackendConnectionPostgresqlArgsOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlArgsOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlArgsOutput) ToSecretBackendConnectionPostgresqlArgsPtrOutput() SecretBackendConnectionPostgresqlArgsPtrOutput {
	return o.ToSecretBackendConnectionPostgresqlArgsPtrOutputWithContext(context.Background())
}

func (o SecretBackendConnectionPostgresqlArgsOutput) ToSecretBackendConnectionPostgresqlArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlArgsPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresqlArgs) *SecretBackendConnectionPostgresqlArgs {
		return &v
	}).(SecretBackendConnectionPostgresqlArgsPtrOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionPostgresqlArgsOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresqlArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionPostgresqlArgsOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresqlArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionPostgresqlArgsOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresqlArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionPostgresqlArgsOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresqlArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionPostgresqlArgsPtrOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionPostgresqlArgsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretBackendConnectionPostgresqlArgs)(nil)).Elem()
}

func (o SecretBackendConnectionPostgresqlArgsPtrOutput) ToSecretBackendConnectionPostgresqlArgsPtrOutput() SecretBackendConnectionPostgresqlArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlArgsPtrOutput) ToSecretBackendConnectionPostgresqlArgsPtrOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlArgsPtrOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlArgsPtrOutput) Elem() SecretBackendConnectionPostgresqlArgsOutput {
	return o.ApplyT(func(v *SecretBackendConnectionPostgresqlArgs) SecretBackendConnectionPostgresqlArgs { return *v }).(SecretBackendConnectionPostgresqlArgsOutput)
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionPostgresqlArgsPtrOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresqlArgs) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionPostgresqlArgsPtrOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresqlArgs) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionPostgresqlArgsPtrOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresqlArgs) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionPostgresqlArgsPtrOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresqlArgs) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

type SecretBackendConnectionPostgresqlState struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl *string `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime *int `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections *int `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections *int `pulumi:"maxOpenConnections"`
}

type SecretBackendConnectionPostgresqlStateInput interface {
	pulumi.Input

	ToSecretBackendConnectionPostgresqlStateOutput() SecretBackendConnectionPostgresqlStateOutput
	ToSecretBackendConnectionPostgresqlStateOutputWithContext(context.Context) SecretBackendConnectionPostgresqlStateOutput
}

type SecretBackendConnectionPostgresqlStateArgs struct {
	// A URL containing connection information. See
	// the [Vault
	// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
	// for an example.
	ConnectionUrl pulumi.StringPtrInput `pulumi:"connectionUrl"`
	// The maximum number of seconds to keep
	// a connection alive for.
	MaxConnectionLifetime pulumi.IntPtrInput `pulumi:"maxConnectionLifetime"`
	// The maximum number of idle connections to
	// maintain.
	MaxIdleConnections pulumi.IntPtrInput `pulumi:"maxIdleConnections"`
	// The maximum number of open connections to
	// use.
	MaxOpenConnections pulumi.IntPtrInput `pulumi:"maxOpenConnections"`
}

func (SecretBackendConnectionPostgresqlStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionPostgresqlState)(nil)).Elem()
}

func (i SecretBackendConnectionPostgresqlStateArgs) ToSecretBackendConnectionPostgresqlStateOutput() SecretBackendConnectionPostgresqlStateOutput {
	return i.ToSecretBackendConnectionPostgresqlStateOutputWithContext(context.Background())
}

func (i SecretBackendConnectionPostgresqlStateArgs) ToSecretBackendConnectionPostgresqlStateOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretBackendConnectionPostgresqlStateOutput)
}

type SecretBackendConnectionPostgresqlStateOutput struct{ *pulumi.OutputState }

func (SecretBackendConnectionPostgresqlStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretBackendConnectionPostgresqlState)(nil)).Elem()
}

func (o SecretBackendConnectionPostgresqlStateOutput) ToSecretBackendConnectionPostgresqlStateOutput() SecretBackendConnectionPostgresqlStateOutput {
	return o
}

func (o SecretBackendConnectionPostgresqlStateOutput) ToSecretBackendConnectionPostgresqlStateOutputWithContext(ctx context.Context) SecretBackendConnectionPostgresqlStateOutput {
	return o
}

// A URL containing connection information. See
// the [Vault
// docs](https://www.vaultproject.io/api/secret/databases/oracle.html#sample-payload)
// for an example.
func (o SecretBackendConnectionPostgresqlStateOutput) ConnectionUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresqlState) *string { return v.ConnectionUrl }).(pulumi.StringPtrOutput)
}

// The maximum number of seconds to keep
// a connection alive for.
func (o SecretBackendConnectionPostgresqlStateOutput) MaxConnectionLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresqlState) *int { return v.MaxConnectionLifetime }).(pulumi.IntPtrOutput)
}

// The maximum number of idle connections to
// maintain.
func (o SecretBackendConnectionPostgresqlStateOutput) MaxIdleConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresqlState) *int { return v.MaxIdleConnections }).(pulumi.IntPtrOutput)
}

// The maximum number of open connections to
// use.
func (o SecretBackendConnectionPostgresqlStateOutput) MaxOpenConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretBackendConnectionPostgresqlState) *int { return v.MaxOpenConnections }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(SecretBackendConnectionCassandraOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionCassandraPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionCassandraArgsOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionCassandraArgsPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionCassandraStateOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionElasticsearchOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionElasticsearchPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionElasticsearchArgsOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionElasticsearchArgsPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionElasticsearchStateOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionHanaOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionHanaPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionHanaArgsOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionHanaArgsPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionHanaStateOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMongodbOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMongodbPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMongodbArgsOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMongodbArgsPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMongodbStateOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMssqlOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMssqlPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMssqlArgsOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMssqlArgsPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMssqlStateOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlArgsOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlArgsPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlAuroraOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlAuroraPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlAuroraArgsOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlAuroraArgsPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlAuroraStateOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlLegacyOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlLegacyPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlLegacyArgsOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlLegacyArgsPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlLegacyStateOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlRdsOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlRdsPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlRdsArgsOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlRdsArgsPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlRdsStateOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionMysqlStateOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionOracleOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionOraclePtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionOracleArgsOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionOracleArgsPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionOracleStateOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionPostgresqlOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionPostgresqlPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionPostgresqlArgsOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionPostgresqlArgsPtrOutput{})
	pulumi.RegisterOutputType(SecretBackendConnectionPostgresqlStateOutput{})
}
