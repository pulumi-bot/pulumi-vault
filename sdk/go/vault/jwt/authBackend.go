// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package jwt

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource for managing an
// [JWT auth backend within Vault](https://www.vaultproject.io/docs/auth/jwt.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/jwt_auth_backend.html.markdown.
type AuthBackend struct {
	s *pulumi.ResourceState
}

// NewAuthBackend registers a new resource with the given unique name, arguments, and options.
func NewAuthBackend(ctx *pulumi.Context,
	name string, args *AuthBackendArgs, opts ...pulumi.ResourceOpt) (*AuthBackend, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["boundIssuer"] = nil
		inputs["defaultRole"] = nil
		inputs["description"] = nil
		inputs["jwksCaPem"] = nil
		inputs["jwksUrl"] = nil
		inputs["jwtSupportedAlgs"] = nil
		inputs["jwtValidationPubkeys"] = nil
		inputs["oidcClientId"] = nil
		inputs["oidcClientSecret"] = nil
		inputs["oidcDiscoveryCaPem"] = nil
		inputs["oidcDiscoveryUrl"] = nil
		inputs["path"] = nil
		inputs["tune"] = nil
		inputs["type"] = nil
	} else {
		inputs["boundIssuer"] = args.BoundIssuer
		inputs["defaultRole"] = args.DefaultRole
		inputs["description"] = args.Description
		inputs["jwksCaPem"] = args.JwksCaPem
		inputs["jwksUrl"] = args.JwksUrl
		inputs["jwtSupportedAlgs"] = args.JwtSupportedAlgs
		inputs["jwtValidationPubkeys"] = args.JwtValidationPubkeys
		inputs["oidcClientId"] = args.OidcClientId
		inputs["oidcClientSecret"] = args.OidcClientSecret
		inputs["oidcDiscoveryCaPem"] = args.OidcDiscoveryCaPem
		inputs["oidcDiscoveryUrl"] = args.OidcDiscoveryUrl
		inputs["path"] = args.Path
		inputs["tune"] = args.Tune
		inputs["type"] = args.Type
	}
	inputs["accessor"] = nil
	s, err := ctx.RegisterResource("vault:jwt/authBackend:AuthBackend", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackend{s: s}, nil
}

// GetAuthBackend gets an existing AuthBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackend(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthBackendState, opts ...pulumi.ResourceOpt) (*AuthBackend, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessor"] = state.Accessor
		inputs["boundIssuer"] = state.BoundIssuer
		inputs["defaultRole"] = state.DefaultRole
		inputs["description"] = state.Description
		inputs["jwksCaPem"] = state.JwksCaPem
		inputs["jwksUrl"] = state.JwksUrl
		inputs["jwtSupportedAlgs"] = state.JwtSupportedAlgs
		inputs["jwtValidationPubkeys"] = state.JwtValidationPubkeys
		inputs["oidcClientId"] = state.OidcClientId
		inputs["oidcClientSecret"] = state.OidcClientSecret
		inputs["oidcDiscoveryCaPem"] = state.OidcDiscoveryCaPem
		inputs["oidcDiscoveryUrl"] = state.OidcDiscoveryUrl
		inputs["path"] = state.Path
		inputs["tune"] = state.Tune
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("vault:jwt/authBackend:AuthBackend", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackend{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthBackend) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthBackend) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The accessor of the JWT auth backend
func (r *AuthBackend) Accessor() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessor"])
}

// The value against which to match the iss claim in a JWT
func (r *AuthBackend) BoundIssuer() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["boundIssuer"])
}

// The default role to use if none is provided during login
func (r *AuthBackend) DefaultRole() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["defaultRole"])
}

// The description of the auth backend
func (r *AuthBackend) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
func (r *AuthBackend) JwksCaPem() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["jwksCaPem"])
}

// JWKS URL to use to authenticate signatures. Cannot be used with "oidcDiscoveryUrl" or "jwtValidationPubkeys".
func (r *AuthBackend) JwksUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["jwksUrl"])
}

// A list of supported signing algorithms. Vault 1.1.0 defaults to [RS256] but future or past versions of Vault may differ
func (r *AuthBackend) JwtSupportedAlgs() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["jwtSupportedAlgs"])
}

// A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used in combination with `oidcDiscoveryUrl`
func (r *AuthBackend) JwtValidationPubkeys() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["jwtValidationPubkeys"])
}

// Client ID used for OIDC backends
func (r *AuthBackend) OidcClientId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["oidcClientId"])
}

// Client Secret used for OIDC backends
func (r *AuthBackend) OidcClientSecret() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["oidcClientSecret"])
}

// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
func (r *AuthBackend) OidcDiscoveryCaPem() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["oidcDiscoveryCaPem"])
}

// The OIDC Discovery URL, without any .well-known component (base path). Cannot be used in combination with `jwtValidationPubkeys`
func (r *AuthBackend) OidcDiscoveryUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["oidcDiscoveryUrl"])
}

// Path to mount the JWT/OIDC auth backend
func (r *AuthBackend) Path() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["path"])
}

func (r *AuthBackend) Tune() pulumi.Output {
	return r.s.State["tune"]
}

// Type of auth backend. Should be one of `jwt` or `oidc`. Default - `jwt`
func (r *AuthBackend) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering AuthBackend resources.
type AuthBackendState struct {
	// The accessor of the JWT auth backend
	Accessor interface{}
	// The value against which to match the iss claim in a JWT
	BoundIssuer interface{}
	// The default role to use if none is provided during login
	DefaultRole interface{}
	// The description of the auth backend
	Description interface{}
	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
	JwksCaPem interface{}
	// JWKS URL to use to authenticate signatures. Cannot be used with "oidcDiscoveryUrl" or "jwtValidationPubkeys".
	JwksUrl interface{}
	// A list of supported signing algorithms. Vault 1.1.0 defaults to [RS256] but future or past versions of Vault may differ
	JwtSupportedAlgs interface{}
	// A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used in combination with `oidcDiscoveryUrl`
	JwtValidationPubkeys interface{}
	// Client ID used for OIDC backends
	OidcClientId interface{}
	// Client Secret used for OIDC backends
	OidcClientSecret interface{}
	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
	OidcDiscoveryCaPem interface{}
	// The OIDC Discovery URL, without any .well-known component (base path). Cannot be used in combination with `jwtValidationPubkeys`
	OidcDiscoveryUrl interface{}
	// Path to mount the JWT/OIDC auth backend
	Path interface{}
	Tune interface{}
	// Type of auth backend. Should be one of `jwt` or `oidc`. Default - `jwt`
	Type interface{}
}

// The set of arguments for constructing a AuthBackend resource.
type AuthBackendArgs struct {
	// The value against which to match the iss claim in a JWT
	BoundIssuer interface{}
	// The default role to use if none is provided during login
	DefaultRole interface{}
	// The description of the auth backend
	Description interface{}
	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
	JwksCaPem interface{}
	// JWKS URL to use to authenticate signatures. Cannot be used with "oidcDiscoveryUrl" or "jwtValidationPubkeys".
	JwksUrl interface{}
	// A list of supported signing algorithms. Vault 1.1.0 defaults to [RS256] but future or past versions of Vault may differ
	JwtSupportedAlgs interface{}
	// A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used in combination with `oidcDiscoveryUrl`
	JwtValidationPubkeys interface{}
	// Client ID used for OIDC backends
	OidcClientId interface{}
	// Client Secret used for OIDC backends
	OidcClientSecret interface{}
	// The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
	OidcDiscoveryCaPem interface{}
	// The OIDC Discovery URL, without any .well-known component (base path). Cannot be used in combination with `jwtValidationPubkeys`
	OidcDiscoveryUrl interface{}
	// Path to mount the JWT/OIDC auth backend
	Path interface{}
	Tune interface{}
	// Type of auth backend. Should be one of `jwt` or `oidc`. Default - `jwt`
	Type interface{}
}
