// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package generic

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/generic_endpoint.html.markdown.
type Endpoint struct {
	s *pulumi.ResourceState
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOpt) (*Endpoint, error) {
	if args == nil || args.DataJson == nil {
		return nil, errors.New("missing required argument 'DataJson'")
	}
	if args == nil || args.Path == nil {
		return nil, errors.New("missing required argument 'Path'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dataJson"] = nil
		inputs["disableDelete"] = nil
		inputs["disableRead"] = nil
		inputs["ignoreAbsentFields"] = nil
		inputs["path"] = nil
		inputs["writeFields"] = nil
	} else {
		inputs["dataJson"] = args.DataJson
		inputs["disableDelete"] = args.DisableDelete
		inputs["disableRead"] = args.DisableRead
		inputs["ignoreAbsentFields"] = args.IgnoreAbsentFields
		inputs["path"] = args.Path
		inputs["writeFields"] = args.WriteFields
	}
	inputs["writeData"] = nil
	inputs["writeDataJson"] = nil
	s, err := ctx.RegisterResource("vault:generic/endpoint:Endpoint", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Endpoint{s: s}, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EndpointState, opts ...pulumi.ResourceOpt) (*Endpoint, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dataJson"] = state.DataJson
		inputs["disableDelete"] = state.DisableDelete
		inputs["disableRead"] = state.DisableRead
		inputs["ignoreAbsentFields"] = state.IgnoreAbsentFields
		inputs["path"] = state.Path
		inputs["writeData"] = state.WriteData
		inputs["writeDataJson"] = state.WriteDataJson
		inputs["writeFields"] = state.WriteFields
	}
	s, err := ctx.ReadResource("vault:generic/endpoint:Endpoint", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Endpoint{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Endpoint) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Endpoint) ID() pulumi.IDOutput {
	return r.s.ID()
}

// String containing a JSON-encoded object that will be
// written to the given path as the secret data.
func (r *Endpoint) DataJson() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dataJson"])
}

// Don't attempt to delete the path from Vault if true
func (r *Endpoint) DisableDelete() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["disableDelete"])
}

// True/false. Set this to true if your vault
// authentication is not able to read the data or if the endpoint does
// not support the `GET` method. Setting this to `true` will break drift
// detection. You should set this to `true` for endpoints that are
// write-only. Defaults to false.
func (r *Endpoint) DisableRead() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["disableRead"])
}

// When reading, disregard fields not present in data_json
func (r *Endpoint) IgnoreAbsentFields() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["ignoreAbsentFields"])
}

// The full logical path at which to write the given
// data. Consult each backend's documentation to see which endpoints
// support the `PUT` methods and to determine whether they also support
// `DELETE` and `GET`.
func (r *Endpoint) Path() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["path"])
}

// Map of strings returned by write operation
func (r *Endpoint) WriteData() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["writeData"])
}

// JSON data returned by write operation
func (r *Endpoint) WriteDataJson() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["writeDataJson"])
}

// Top-level fields returned by write to persist in state
func (r *Endpoint) WriteFields() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["writeFields"])
}

// Input properties used for looking up and filtering Endpoint resources.
type EndpointState struct {
	// String containing a JSON-encoded object that will be
	// written to the given path as the secret data.
	DataJson interface{}
	// Don't attempt to delete the path from Vault if true
	DisableDelete interface{}
	// True/false. Set this to true if your vault
	// authentication is not able to read the data or if the endpoint does
	// not support the `GET` method. Setting this to `true` will break drift
	// detection. You should set this to `true` for endpoints that are
	// write-only. Defaults to false.
	DisableRead interface{}
	// When reading, disregard fields not present in data_json
	IgnoreAbsentFields interface{}
	// The full logical path at which to write the given
	// data. Consult each backend's documentation to see which endpoints
	// support the `PUT` methods and to determine whether they also support
	// `DELETE` and `GET`.
	Path interface{}
	// Map of strings returned by write operation
	WriteData interface{}
	// JSON data returned by write operation
	WriteDataJson interface{}
	// Top-level fields returned by write to persist in state
	WriteFields interface{}
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	// String containing a JSON-encoded object that will be
	// written to the given path as the secret data.
	DataJson interface{}
	// Don't attempt to delete the path from Vault if true
	DisableDelete interface{}
	// True/false. Set this to true if your vault
	// authentication is not able to read the data or if the endpoint does
	// not support the `GET` method. Setting this to `true` will break drift
	// detection. You should set this to `true` for endpoints that are
	// write-only. Defaults to false.
	DisableRead interface{}
	// When reading, disregard fields not present in data_json
	IgnoreAbsentFields interface{}
	// The full logical path at which to write the given
	// data. Consult each backend's documentation to see which endpoints
	// support the `PUT` methods and to determine whether they also support
	// `DELETE` and `GET`.
	Path interface{}
	// Top-level fields returned by write to persist in state
	WriteFields interface{}
}
