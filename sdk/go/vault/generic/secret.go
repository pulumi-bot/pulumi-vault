// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package generic

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/generic_secret.html.markdown.
type Secret struct {
	s *pulumi.ResourceState
}

// NewSecret registers a new resource with the given unique name, arguments, and options.
func NewSecret(ctx *pulumi.Context,
	name string, args *SecretArgs, opts ...pulumi.ResourceOpt) (*Secret, error) {
	if args == nil || args.DataJson == nil {
		return nil, errors.New("missing required argument 'DataJson'")
	}
	if args == nil || args.Path == nil {
		return nil, errors.New("missing required argument 'Path'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dataJson"] = nil
		inputs["disableRead"] = nil
		inputs["path"] = nil
	} else {
		inputs["dataJson"] = args.DataJson
		inputs["disableRead"] = args.DisableRead
		inputs["path"] = args.Path
	}
	inputs["data"] = nil
	s, err := ctx.RegisterResource("vault:generic/secret:Secret", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Secret{s: s}, nil
}

// GetSecret gets an existing Secret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecret(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecretState, opts ...pulumi.ResourceOpt) (*Secret, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["data"] = state.Data
		inputs["dataJson"] = state.DataJson
		inputs["disableRead"] = state.DisableRead
		inputs["path"] = state.Path
	}
	s, err := ctx.ReadResource("vault:generic/secret:Secret", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Secret{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Secret) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Secret) ID() pulumi.IDOutput {
	return r.s.ID()
}

// A mapping whose keys are the top-level data keys returned from
// Vault and whose values are the corresponding values. This map can only
// represent string data, so any non-string values returned from Vault are
// serialized as JSON.
func (r *Secret) Data() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["data"])
}

// String containing a JSON-encoded object that will be
// written as the secret data at the given path.
func (r *Secret) DataJson() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dataJson"])
}

// True/false. Set this to true if your vault
// authentication is not able to read the data. Setting this to `true` will
// break drift detection. Defaults to false.
func (r *Secret) DisableRead() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["disableRead"])
}

// The full logical path at which to write the given data.
// To write data into the "generic" secret backend mounted in Vault by default,
// this should be prefixed with `secret/`. Writing to other backends with this
// resource is possible; consult each backend's documentation to see which
// endpoints support the `PUT` and `DELETE` methods.
func (r *Secret) Path() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["path"])
}

// Input properties used for looking up and filtering Secret resources.
type SecretState struct {
	// A mapping whose keys are the top-level data keys returned from
	// Vault and whose values are the corresponding values. This map can only
	// represent string data, so any non-string values returned from Vault are
	// serialized as JSON.
	Data interface{}
	// String containing a JSON-encoded object that will be
	// written as the secret data at the given path.
	DataJson interface{}
	// True/false. Set this to true if your vault
	// authentication is not able to read the data. Setting this to `true` will
	// break drift detection. Defaults to false.
	DisableRead interface{}
	// The full logical path at which to write the given data.
	// To write data into the "generic" secret backend mounted in Vault by default,
	// this should be prefixed with `secret/`. Writing to other backends with this
	// resource is possible; consult each backend's documentation to see which
	// endpoints support the `PUT` and `DELETE` methods.
	Path interface{}
}

// The set of arguments for constructing a Secret resource.
type SecretArgs struct {
	// String containing a JSON-encoded object that will be
	// written as the secret data at the given path.
	DataJson interface{}
	// True/false. Set this to true if your vault
	// authentication is not able to read the data. Setting this to `true` will
	// break drift detection. Defaults to false.
	DisableRead interface{}
	// The full logical path at which to write the given data.
	// To write data into the "generic" secret backend mounted in Vault by default,
	// this should be prefixed with `secret/`. Writing to other backends with this
	// resource is possible; consult each backend's documentation to see which
	// endpoints support the `PUT` and `DELETE` methods.
	Path interface{}
}
