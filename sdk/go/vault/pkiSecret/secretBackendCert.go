// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pkiSecret

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/pki_secret_backend_cert.html.markdown.
type SecretBackendCert struct {
	s *pulumi.ResourceState
}

// NewSecretBackendCert registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendCert(ctx *pulumi.Context,
	name string, args *SecretBackendCertArgs, opts ...pulumi.ResourceOpt) (*SecretBackendCert, error) {
	if args == nil || args.Backend == nil {
		return nil, errors.New("missing required argument 'Backend'")
	}
	if args == nil || args.CommonName == nil {
		return nil, errors.New("missing required argument 'CommonName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["altNames"] = nil
		inputs["autoRenew"] = nil
		inputs["backend"] = nil
		inputs["commonName"] = nil
		inputs["excludeCnFromSans"] = nil
		inputs["format"] = nil
		inputs["ipSans"] = nil
		inputs["minSecondsRemaining"] = nil
		inputs["name"] = nil
		inputs["otherSans"] = nil
		inputs["privateKeyFormat"] = nil
		inputs["ttl"] = nil
	} else {
		inputs["altNames"] = args.AltNames
		inputs["autoRenew"] = args.AutoRenew
		inputs["backend"] = args.Backend
		inputs["commonName"] = args.CommonName
		inputs["excludeCnFromSans"] = args.ExcludeCnFromSans
		inputs["format"] = args.Format
		inputs["ipSans"] = args.IpSans
		inputs["minSecondsRemaining"] = args.MinSecondsRemaining
		inputs["name"] = args.Name
		inputs["otherSans"] = args.OtherSans
		inputs["privateKeyFormat"] = args.PrivateKeyFormat
		inputs["ttl"] = args.Ttl
	}
	inputs["caChain"] = nil
	inputs["certificate"] = nil
	inputs["expiration"] = nil
	inputs["issuingCa"] = nil
	inputs["privateKey"] = nil
	inputs["privateKeyType"] = nil
	inputs["serialNumber"] = nil
	s, err := ctx.RegisterResource("vault:pkiSecret/secretBackendCert:SecretBackendCert", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendCert{s: s}, nil
}

// GetSecretBackendCert gets an existing SecretBackendCert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendCert(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecretBackendCertState, opts ...pulumi.ResourceOpt) (*SecretBackendCert, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["altNames"] = state.AltNames
		inputs["autoRenew"] = state.AutoRenew
		inputs["backend"] = state.Backend
		inputs["caChain"] = state.CaChain
		inputs["certificate"] = state.Certificate
		inputs["commonName"] = state.CommonName
		inputs["excludeCnFromSans"] = state.ExcludeCnFromSans
		inputs["expiration"] = state.Expiration
		inputs["format"] = state.Format
		inputs["ipSans"] = state.IpSans
		inputs["issuingCa"] = state.IssuingCa
		inputs["minSecondsRemaining"] = state.MinSecondsRemaining
		inputs["name"] = state.Name
		inputs["otherSans"] = state.OtherSans
		inputs["privateKey"] = state.PrivateKey
		inputs["privateKeyFormat"] = state.PrivateKeyFormat
		inputs["privateKeyType"] = state.PrivateKeyType
		inputs["serialNumber"] = state.SerialNumber
		inputs["ttl"] = state.Ttl
	}
	s, err := ctx.ReadResource("vault:pkiSecret/secretBackendCert:SecretBackendCert", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendCert{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecretBackendCert) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecretBackendCert) ID() pulumi.IDOutput {
	return r.s.ID()
}

// List of alternative names
func (r *SecretBackendCert) AltNames() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["altNames"])
}

// If set to `true`, certs will be renewed if the expiration is within `minSecondsRemaining`. Default `false`
func (r *SecretBackendCert) AutoRenew() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["autoRenew"])
}

// The PKI secret backend the resource belongs to.
func (r *SecretBackendCert) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// The CA chain
func (r *SecretBackendCert) CaChain() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["caChain"])
}

// The certificate
func (r *SecretBackendCert) Certificate() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["certificate"])
}

// CN of certificate to create
func (r *SecretBackendCert) CommonName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["commonName"])
}

// Flag to exclude CN from SANs
func (r *SecretBackendCert) ExcludeCnFromSans() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["excludeCnFromSans"])
}

// The expiration date of the certificate in unix epoch format
func (r *SecretBackendCert) Expiration() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["expiration"])
}

// The format of data
func (r *SecretBackendCert) Format() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["format"])
}

// List of alternative IPs
func (r *SecretBackendCert) IpSans() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["ipSans"])
}

// The issuing CA
func (r *SecretBackendCert) IssuingCa() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["issuingCa"])
}

// Generate a new certificate when the expiration is within this number of seconds, default is 604800 (7 days)
func (r *SecretBackendCert) MinSecondsRemaining() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["minSecondsRemaining"])
}

// Name of the role to create the certificate against
func (r *SecretBackendCert) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// List of other SANs
func (r *SecretBackendCert) OtherSans() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["otherSans"])
}

// The private key
func (r *SecretBackendCert) PrivateKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privateKey"])
}

// The private key format
func (r *SecretBackendCert) PrivateKeyFormat() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privateKeyFormat"])
}

// The private key type
func (r *SecretBackendCert) PrivateKeyType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privateKeyType"])
}

// The serial number
func (r *SecretBackendCert) SerialNumber() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serialNumber"])
}

// Time to live
func (r *SecretBackendCert) Ttl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ttl"])
}

// Input properties used for looking up and filtering SecretBackendCert resources.
type SecretBackendCertState struct {
	// List of alternative names
	AltNames interface{}
	// If set to `true`, certs will be renewed if the expiration is within `minSecondsRemaining`. Default `false`
	AutoRenew interface{}
	// The PKI secret backend the resource belongs to.
	Backend interface{}
	// The CA chain
	CaChain interface{}
	// The certificate
	Certificate interface{}
	// CN of certificate to create
	CommonName interface{}
	// Flag to exclude CN from SANs
	ExcludeCnFromSans interface{}
	// The expiration date of the certificate in unix epoch format
	Expiration interface{}
	// The format of data
	Format interface{}
	// List of alternative IPs
	IpSans interface{}
	// The issuing CA
	IssuingCa interface{}
	// Generate a new certificate when the expiration is within this number of seconds, default is 604800 (7 days)
	MinSecondsRemaining interface{}
	// Name of the role to create the certificate against
	Name interface{}
	// List of other SANs
	OtherSans interface{}
	// The private key
	PrivateKey interface{}
	// The private key format
	PrivateKeyFormat interface{}
	// The private key type
	PrivateKeyType interface{}
	// The serial number
	SerialNumber interface{}
	// Time to live
	Ttl interface{}
}

// The set of arguments for constructing a SecretBackendCert resource.
type SecretBackendCertArgs struct {
	// List of alternative names
	AltNames interface{}
	// If set to `true`, certs will be renewed if the expiration is within `minSecondsRemaining`. Default `false`
	AutoRenew interface{}
	// The PKI secret backend the resource belongs to.
	Backend interface{}
	// CN of certificate to create
	CommonName interface{}
	// Flag to exclude CN from SANs
	ExcludeCnFromSans interface{}
	// The format of data
	Format interface{}
	// List of alternative IPs
	IpSans interface{}
	// Generate a new certificate when the expiration is within this number of seconds, default is 604800 (7 days)
	MinSecondsRemaining interface{}
	// Name of the role to create the certificate against
	Name interface{}
	// List of other SANs
	OtherSans interface{}
	// The private key format
	PrivateKeyFormat interface{}
	// Time to live
	Ttl interface{}
}
