// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pkiSecret

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/pki_secret_backend_root_cert.html.markdown.
type SecretBackendRootCert struct {
	s *pulumi.ResourceState
}

// NewSecretBackendRootCert registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendRootCert(ctx *pulumi.Context,
	name string, args *SecretBackendRootCertArgs, opts ...pulumi.ResourceOpt) (*SecretBackendRootCert, error) {
	if args == nil || args.Backend == nil {
		return nil, errors.New("missing required argument 'Backend'")
	}
	if args == nil || args.CommonName == nil {
		return nil, errors.New("missing required argument 'CommonName'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["altNames"] = nil
		inputs["backend"] = nil
		inputs["commonName"] = nil
		inputs["country"] = nil
		inputs["excludeCnFromSans"] = nil
		inputs["format"] = nil
		inputs["ipSans"] = nil
		inputs["keyBits"] = nil
		inputs["keyType"] = nil
		inputs["locality"] = nil
		inputs["maxPathLength"] = nil
		inputs["organization"] = nil
		inputs["otherSans"] = nil
		inputs["ou"] = nil
		inputs["permittedDnsDomains"] = nil
		inputs["postalCode"] = nil
		inputs["privateKeyFormat"] = nil
		inputs["province"] = nil
		inputs["streetAddress"] = nil
		inputs["ttl"] = nil
		inputs["type"] = nil
		inputs["uriSans"] = nil
	} else {
		inputs["altNames"] = args.AltNames
		inputs["backend"] = args.Backend
		inputs["commonName"] = args.CommonName
		inputs["country"] = args.Country
		inputs["excludeCnFromSans"] = args.ExcludeCnFromSans
		inputs["format"] = args.Format
		inputs["ipSans"] = args.IpSans
		inputs["keyBits"] = args.KeyBits
		inputs["keyType"] = args.KeyType
		inputs["locality"] = args.Locality
		inputs["maxPathLength"] = args.MaxPathLength
		inputs["organization"] = args.Organization
		inputs["otherSans"] = args.OtherSans
		inputs["ou"] = args.Ou
		inputs["permittedDnsDomains"] = args.PermittedDnsDomains
		inputs["postalCode"] = args.PostalCode
		inputs["privateKeyFormat"] = args.PrivateKeyFormat
		inputs["province"] = args.Province
		inputs["streetAddress"] = args.StreetAddress
		inputs["ttl"] = args.Ttl
		inputs["type"] = args.Type
		inputs["uriSans"] = args.UriSans
	}
	inputs["certificate"] = nil
	inputs["issuingCa"] = nil
	inputs["serial"] = nil
	s, err := ctx.RegisterResource("vault:pkiSecret/secretBackendRootCert:SecretBackendRootCert", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendRootCert{s: s}, nil
}

// GetSecretBackendRootCert gets an existing SecretBackendRootCert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendRootCert(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecretBackendRootCertState, opts ...pulumi.ResourceOpt) (*SecretBackendRootCert, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["altNames"] = state.AltNames
		inputs["backend"] = state.Backend
		inputs["certificate"] = state.Certificate
		inputs["commonName"] = state.CommonName
		inputs["country"] = state.Country
		inputs["excludeCnFromSans"] = state.ExcludeCnFromSans
		inputs["format"] = state.Format
		inputs["ipSans"] = state.IpSans
		inputs["issuingCa"] = state.IssuingCa
		inputs["keyBits"] = state.KeyBits
		inputs["keyType"] = state.KeyType
		inputs["locality"] = state.Locality
		inputs["maxPathLength"] = state.MaxPathLength
		inputs["organization"] = state.Organization
		inputs["otherSans"] = state.OtherSans
		inputs["ou"] = state.Ou
		inputs["permittedDnsDomains"] = state.PermittedDnsDomains
		inputs["postalCode"] = state.PostalCode
		inputs["privateKeyFormat"] = state.PrivateKeyFormat
		inputs["province"] = state.Province
		inputs["serial"] = state.Serial
		inputs["streetAddress"] = state.StreetAddress
		inputs["ttl"] = state.Ttl
		inputs["type"] = state.Type
		inputs["uriSans"] = state.UriSans
	}
	s, err := ctx.ReadResource("vault:pkiSecret/secretBackendRootCert:SecretBackendRootCert", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendRootCert{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecretBackendRootCert) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecretBackendRootCert) ID() pulumi.IDOutput {
	return r.s.ID()
}

// List of alternative names
func (r *SecretBackendRootCert) AltNames() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["altNames"])
}

// The PKI secret backend the resource belongs to.
func (r *SecretBackendRootCert) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// The certificate
func (r *SecretBackendRootCert) Certificate() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["certificate"])
}

// CN of intermediate to create
func (r *SecretBackendRootCert) CommonName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["commonName"])
}

// The country
func (r *SecretBackendRootCert) Country() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["country"])
}

// Flag to exclude CN from SANs
func (r *SecretBackendRootCert) ExcludeCnFromSans() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["excludeCnFromSans"])
}

// The format of data
func (r *SecretBackendRootCert) Format() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["format"])
}

// List of alternative IPs
func (r *SecretBackendRootCert) IpSans() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["ipSans"])
}

// The issuing CA
func (r *SecretBackendRootCert) IssuingCa() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["issuingCa"])
}

// The number of bits to use
func (r *SecretBackendRootCert) KeyBits() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["keyBits"])
}

// The desired key type
func (r *SecretBackendRootCert) KeyType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["keyType"])
}

// The locality
func (r *SecretBackendRootCert) Locality() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["locality"])
}

// The maximum path length to encode in the generated certificate
func (r *SecretBackendRootCert) MaxPathLength() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxPathLength"])
}

// The organization
func (r *SecretBackendRootCert) Organization() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["organization"])
}

// List of other SANs
func (r *SecretBackendRootCert) OtherSans() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["otherSans"])
}

// The organization unit
func (r *SecretBackendRootCert) Ou() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ou"])
}

// List of domains for which certificates are allowed to be issued
func (r *SecretBackendRootCert) PermittedDnsDomains() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["permittedDnsDomains"])
}

// The postal code
func (r *SecretBackendRootCert) PostalCode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["postalCode"])
}

// The private key format
func (r *SecretBackendRootCert) PrivateKeyFormat() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privateKeyFormat"])
}

// The province
func (r *SecretBackendRootCert) Province() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["province"])
}

// The serial
func (r *SecretBackendRootCert) Serial() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serial"])
}

// The street address
func (r *SecretBackendRootCert) StreetAddress() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["streetAddress"])
}

// Time to live
func (r *SecretBackendRootCert) Ttl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ttl"])
}

// Type of intermediate to create. Must be either \"exported\" or \"internal\"
func (r *SecretBackendRootCert) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// List of alternative URIs
func (r *SecretBackendRootCert) UriSans() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["uriSans"])
}

// Input properties used for looking up and filtering SecretBackendRootCert resources.
type SecretBackendRootCertState struct {
	// List of alternative names
	AltNames interface{}
	// The PKI secret backend the resource belongs to.
	Backend interface{}
	// The certificate
	Certificate interface{}
	// CN of intermediate to create
	CommonName interface{}
	// The country
	Country interface{}
	// Flag to exclude CN from SANs
	ExcludeCnFromSans interface{}
	// The format of data
	Format interface{}
	// List of alternative IPs
	IpSans interface{}
	// The issuing CA
	IssuingCa interface{}
	// The number of bits to use
	KeyBits interface{}
	// The desired key type
	KeyType interface{}
	// The locality
	Locality interface{}
	// The maximum path length to encode in the generated certificate
	MaxPathLength interface{}
	// The organization
	Organization interface{}
	// List of other SANs
	OtherSans interface{}
	// The organization unit
	Ou interface{}
	// List of domains for which certificates are allowed to be issued
	PermittedDnsDomains interface{}
	// The postal code
	PostalCode interface{}
	// The private key format
	PrivateKeyFormat interface{}
	// The province
	Province interface{}
	// The serial
	Serial interface{}
	// The street address
	StreetAddress interface{}
	// Time to live
	Ttl interface{}
	// Type of intermediate to create. Must be either \"exported\" or \"internal\"
	Type interface{}
	// List of alternative URIs
	UriSans interface{}
}

// The set of arguments for constructing a SecretBackendRootCert resource.
type SecretBackendRootCertArgs struct {
	// List of alternative names
	AltNames interface{}
	// The PKI secret backend the resource belongs to.
	Backend interface{}
	// CN of intermediate to create
	CommonName interface{}
	// The country
	Country interface{}
	// Flag to exclude CN from SANs
	ExcludeCnFromSans interface{}
	// The format of data
	Format interface{}
	// List of alternative IPs
	IpSans interface{}
	// The number of bits to use
	KeyBits interface{}
	// The desired key type
	KeyType interface{}
	// The locality
	Locality interface{}
	// The maximum path length to encode in the generated certificate
	MaxPathLength interface{}
	// The organization
	Organization interface{}
	// List of other SANs
	OtherSans interface{}
	// The organization unit
	Ou interface{}
	// List of domains for which certificates are allowed to be issued
	PermittedDnsDomains interface{}
	// The postal code
	PostalCode interface{}
	// The private key format
	PrivateKeyFormat interface{}
	// The province
	Province interface{}
	// The street address
	StreetAddress interface{}
	// Time to live
	Ttl interface{}
	// Type of intermediate to create. Must be either \"exported\" or \"internal\"
	Type interface{}
	// List of alternative URIs
	UriSans interface{}
}
