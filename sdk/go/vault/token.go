// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to generate a vault token with its options. The token renewing is supported through optional
// arguments.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/token.html.markdown.
type Token struct {
	s *pulumi.ResourceState
}

// NewToken registers a new resource with the given unique name, arguments, and options.
func NewToken(ctx *pulumi.Context,
	name string, args *TokenArgs, opts ...pulumi.ResourceOpt) (*Token, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["displayName"] = nil
		inputs["explicitMaxTtl"] = nil
		inputs["noDefaultPolicy"] = nil
		inputs["noParent"] = nil
		inputs["numUses"] = nil
		inputs["period"] = nil
		inputs["policies"] = nil
		inputs["renewIncrement"] = nil
		inputs["renewMinLease"] = nil
		inputs["renewable"] = nil
		inputs["roleName"] = nil
		inputs["ttl"] = nil
		inputs["wrappingTtl"] = nil
	} else {
		inputs["displayName"] = args.DisplayName
		inputs["explicitMaxTtl"] = args.ExplicitMaxTtl
		inputs["noDefaultPolicy"] = args.NoDefaultPolicy
		inputs["noParent"] = args.NoParent
		inputs["numUses"] = args.NumUses
		inputs["period"] = args.Period
		inputs["policies"] = args.Policies
		inputs["renewIncrement"] = args.RenewIncrement
		inputs["renewMinLease"] = args.RenewMinLease
		inputs["renewable"] = args.Renewable
		inputs["roleName"] = args.RoleName
		inputs["ttl"] = args.Ttl
		inputs["wrappingTtl"] = args.WrappingTtl
	}
	inputs["clientToken"] = nil
	inputs["leaseDuration"] = nil
	inputs["leaseStarted"] = nil
	inputs["wrappedToken"] = nil
	inputs["wrappingAccessor"] = nil
	s, err := ctx.RegisterResource("vault:index/token:Token", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Token{s: s}, nil
}

// GetToken gets an existing Token resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetToken(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TokenState, opts ...pulumi.ResourceOpt) (*Token, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clientToken"] = state.ClientToken
		inputs["displayName"] = state.DisplayName
		inputs["explicitMaxTtl"] = state.ExplicitMaxTtl
		inputs["leaseDuration"] = state.LeaseDuration
		inputs["leaseStarted"] = state.LeaseStarted
		inputs["noDefaultPolicy"] = state.NoDefaultPolicy
		inputs["noParent"] = state.NoParent
		inputs["numUses"] = state.NumUses
		inputs["period"] = state.Period
		inputs["policies"] = state.Policies
		inputs["renewIncrement"] = state.RenewIncrement
		inputs["renewMinLease"] = state.RenewMinLease
		inputs["renewable"] = state.Renewable
		inputs["roleName"] = state.RoleName
		inputs["ttl"] = state.Ttl
		inputs["wrappedToken"] = state.WrappedToken
		inputs["wrappingAccessor"] = state.WrappingAccessor
		inputs["wrappingTtl"] = state.WrappingTtl
	}
	s, err := ctx.ReadResource("vault:index/token:Token", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Token{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Token) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Token) ID() pulumi.IDOutput {
	return r.s.ID()
}

// String containing the client token if stored in present file
func (r *Token) ClientToken() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientToken"])
}

// String containing the token display name
func (r *Token) DisplayName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["displayName"])
}

// The explicit max TTL of this token
func (r *Token) ExplicitMaxTtl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["explicitMaxTtl"])
}

// String containing the token lease duration if present in state file
func (r *Token) LeaseDuration() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["leaseDuration"])
}

// String containing the token lease started time if present in state file
func (r *Token) LeaseStarted() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["leaseStarted"])
}

// Flag to not attach the default policy to this token
func (r *Token) NoDefaultPolicy() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["noDefaultPolicy"])
}

// Flag to create a token without parent
func (r *Token) NoParent() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["noParent"])
}

// The number of allowed uses of this token
func (r *Token) NumUses() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["numUses"])
}

// The period of this token
func (r *Token) Period() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["period"])
}

// List of policies to attach to this token
func (r *Token) Policies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["policies"])
}

// The renew increment
func (r *Token) RenewIncrement() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["renewIncrement"])
}

// The minimal lease to renew this token
func (r *Token) RenewMinLease() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["renewMinLease"])
}

// Flag to allow to renew this token
func (r *Token) Renewable() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["renewable"])
}

// The token role name
func (r *Token) RoleName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["roleName"])
}

// The TTL period of this token
func (r *Token) Ttl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ttl"])
}

// The client wrapped token.
func (r *Token) WrappedToken() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["wrappedToken"])
}

// The client wrapping accessor.
func (r *Token) WrappingAccessor() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["wrappingAccessor"])
}

// The TTL period of the wrapped token.
func (r *Token) WrappingTtl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["wrappingTtl"])
}

// Input properties used for looking up and filtering Token resources.
type TokenState struct {
	// String containing the client token if stored in present file
	ClientToken interface{}
	// String containing the token display name
	DisplayName interface{}
	// The explicit max TTL of this token
	ExplicitMaxTtl interface{}
	// String containing the token lease duration if present in state file
	LeaseDuration interface{}
	// String containing the token lease started time if present in state file
	LeaseStarted interface{}
	// Flag to not attach the default policy to this token
	NoDefaultPolicy interface{}
	// Flag to create a token without parent
	NoParent interface{}
	// The number of allowed uses of this token
	NumUses interface{}
	// The period of this token
	Period interface{}
	// List of policies to attach to this token
	Policies interface{}
	// The renew increment
	RenewIncrement interface{}
	// The minimal lease to renew this token
	RenewMinLease interface{}
	// Flag to allow to renew this token
	Renewable interface{}
	// The token role name
	RoleName interface{}
	// The TTL period of this token
	Ttl interface{}
	// The client wrapped token.
	WrappedToken interface{}
	// The client wrapping accessor.
	WrappingAccessor interface{}
	// The TTL period of the wrapped token.
	WrappingTtl interface{}
}

// The set of arguments for constructing a Token resource.
type TokenArgs struct {
	// String containing the token display name
	DisplayName interface{}
	// The explicit max TTL of this token
	ExplicitMaxTtl interface{}
	// Flag to not attach the default policy to this token
	NoDefaultPolicy interface{}
	// Flag to create a token without parent
	NoParent interface{}
	// The number of allowed uses of this token
	NumUses interface{}
	// The period of this token
	Period interface{}
	// List of policies to attach to this token
	Policies interface{}
	// The renew increment
	RenewIncrement interface{}
	// The minimal lease to renew this token
	RenewMinLease interface{}
	// Flag to allow to renew this token
	Renewable interface{}
	// The token role name
	RoleName interface{}
	// The TTL period of this token
	Ttl interface{}
	// The TTL period of the wrapped token.
	WrappingTtl interface{}
}
