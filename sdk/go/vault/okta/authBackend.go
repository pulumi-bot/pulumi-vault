// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package okta

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource for managing an
// [Okta auth backend within Vault](https://www.vaultproject.io/docs/auth/okta.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/okta_auth_backend.html.markdown.
type AuthBackend struct {
	s *pulumi.ResourceState
}

// NewAuthBackend registers a new resource with the given unique name, arguments, and options.
func NewAuthBackend(ctx *pulumi.Context,
	name string, args *AuthBackendArgs, opts ...pulumi.ResourceOpt) (*AuthBackend, error) {
	if args == nil || args.Organization == nil {
		return nil, errors.New("missing required argument 'Organization'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["baseUrl"] = nil
		inputs["bypassOktaMfa"] = nil
		inputs["description"] = nil
		inputs["groups"] = nil
		inputs["maxTtl"] = nil
		inputs["organization"] = nil
		inputs["path"] = nil
		inputs["token"] = nil
		inputs["ttl"] = nil
		inputs["users"] = nil
	} else {
		inputs["baseUrl"] = args.BaseUrl
		inputs["bypassOktaMfa"] = args.BypassOktaMfa
		inputs["description"] = args.Description
		inputs["groups"] = args.Groups
		inputs["maxTtl"] = args.MaxTtl
		inputs["organization"] = args.Organization
		inputs["path"] = args.Path
		inputs["token"] = args.Token
		inputs["ttl"] = args.Ttl
		inputs["users"] = args.Users
	}
	inputs["accessor"] = nil
	s, err := ctx.RegisterResource("vault:okta/authBackend:AuthBackend", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackend{s: s}, nil
}

// GetAuthBackend gets an existing AuthBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackend(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthBackendState, opts ...pulumi.ResourceOpt) (*AuthBackend, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessor"] = state.Accessor
		inputs["baseUrl"] = state.BaseUrl
		inputs["bypassOktaMfa"] = state.BypassOktaMfa
		inputs["description"] = state.Description
		inputs["groups"] = state.Groups
		inputs["maxTtl"] = state.MaxTtl
		inputs["organization"] = state.Organization
		inputs["path"] = state.Path
		inputs["token"] = state.Token
		inputs["ttl"] = state.Ttl
		inputs["users"] = state.Users
	}
	s, err := ctx.ReadResource("vault:okta/authBackend:AuthBackend", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackend{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthBackend) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthBackend) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The mount accessor related to the auth mount. It is useful for integration with [Identity Secrets Engine](https://www.vaultproject.io/docs/secrets/identity/index.html).
func (r *AuthBackend) Accessor() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessor"])
}

// The Okta url. Examples: oktapreview.com, okta.com
func (r *AuthBackend) BaseUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["baseUrl"])
}

// When true, requests by Okta for a MFA check will be bypassed. This also disallows certain status checks on the account, such as whether the password is expired.
func (r *AuthBackend) BypassOktaMfa() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["bypassOktaMfa"])
}

// The description of the auth backend
func (r *AuthBackend) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Associate Okta groups with policies within Vault.
// See below for more details.
func (r *AuthBackend) Groups() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["groups"])
}

// Maximum duration after which authentication will be expired
// [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
func (r *AuthBackend) MaxTtl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["maxTtl"])
}

// The Okta organization. This will be the first part of the url `https://XXX.okta.com`
func (r *AuthBackend) Organization() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["organization"])
}

// Path to mount the Okta auth backend
func (r *AuthBackend) Path() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["path"])
}

// The Okta API token. This is required to query Okta for user group membership.
// If this is not supplied only locally configured groups will be enabled.
func (r *AuthBackend) Token() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["token"])
}

// Duration after which authentication will be expired.
// [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
func (r *AuthBackend) Ttl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ttl"])
}

// Associate Okta users with groups or policies within Vault.
// See below for more details.
func (r *AuthBackend) Users() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["users"])
}

// Input properties used for looking up and filtering AuthBackend resources.
type AuthBackendState struct {
	// The mount accessor related to the auth mount. It is useful for integration with [Identity Secrets Engine](https://www.vaultproject.io/docs/secrets/identity/index.html).
	Accessor interface{}
	// The Okta url. Examples: oktapreview.com, okta.com
	BaseUrl interface{}
	// When true, requests by Okta for a MFA check will be bypassed. This also disallows certain status checks on the account, such as whether the password is expired.
	BypassOktaMfa interface{}
	// The description of the auth backend
	Description interface{}
	// Associate Okta groups with policies within Vault.
	// See below for more details.
	Groups interface{}
	// Maximum duration after which authentication will be expired
	// [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
	MaxTtl interface{}
	// The Okta organization. This will be the first part of the url `https://XXX.okta.com`
	Organization interface{}
	// Path to mount the Okta auth backend
	Path interface{}
	// The Okta API token. This is required to query Okta for user group membership.
	// If this is not supplied only locally configured groups will be enabled.
	Token interface{}
	// Duration after which authentication will be expired.
	// [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
	Ttl interface{}
	// Associate Okta users with groups or policies within Vault.
	// See below for more details.
	Users interface{}
}

// The set of arguments for constructing a AuthBackend resource.
type AuthBackendArgs struct {
	// The Okta url. Examples: oktapreview.com, okta.com
	BaseUrl interface{}
	// When true, requests by Okta for a MFA check will be bypassed. This also disallows certain status checks on the account, such as whether the password is expired.
	BypassOktaMfa interface{}
	// The description of the auth backend
	Description interface{}
	// Associate Okta groups with policies within Vault.
	// See below for more details.
	Groups interface{}
	// Maximum duration after which authentication will be expired
	// [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
	MaxTtl interface{}
	// The Okta organization. This will be the first part of the url `https://XXX.okta.com`
	Organization interface{}
	// Path to mount the Okta auth backend
	Path interface{}
	// The Okta API token. This is required to query Okta for user group membership.
	// If this is not supplied only locally configured groups will be enabled.
	Token interface{}
	// Duration after which authentication will be expired.
	// [See the documentation for info on valid duration formats](https://golang.org/pkg/time/#ParseDuration).
	Ttl interface{}
	// Associate Okta users with groups or policies within Vault.
	// See below for more details.
	Users interface{}
}
