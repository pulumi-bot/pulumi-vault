// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rabbitMq

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/rabbitmq_secret_backend.html.markdown.
type SecretBackend struct {
	s *pulumi.ResourceState
}

// NewSecretBackend registers a new resource with the given unique name, arguments, and options.
func NewSecretBackend(ctx *pulumi.Context,
	name string, args *SecretBackendArgs, opts ...pulumi.ResourceOpt) (*SecretBackend, error) {
	if args == nil || args.ConnectionUri == nil {
		return nil, errors.New("missing required argument 'ConnectionUri'")
	}
	if args == nil || args.Password == nil {
		return nil, errors.New("missing required argument 'Password'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["connectionUri"] = nil
		inputs["defaultLeaseTtlSeconds"] = nil
		inputs["description"] = nil
		inputs["maxLeaseTtlSeconds"] = nil
		inputs["password"] = nil
		inputs["path"] = nil
		inputs["username"] = nil
		inputs["verifyConnection"] = nil
	} else {
		inputs["connectionUri"] = args.ConnectionUri
		inputs["defaultLeaseTtlSeconds"] = args.DefaultLeaseTtlSeconds
		inputs["description"] = args.Description
		inputs["maxLeaseTtlSeconds"] = args.MaxLeaseTtlSeconds
		inputs["password"] = args.Password
		inputs["path"] = args.Path
		inputs["username"] = args.Username
		inputs["verifyConnection"] = args.VerifyConnection
	}
	s, err := ctx.RegisterResource("vault:rabbitMq/secretBackend:SecretBackend", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackend{s: s}, nil
}

// GetSecretBackend gets an existing SecretBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackend(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecretBackendState, opts ...pulumi.ResourceOpt) (*SecretBackend, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["connectionUri"] = state.ConnectionUri
		inputs["defaultLeaseTtlSeconds"] = state.DefaultLeaseTtlSeconds
		inputs["description"] = state.Description
		inputs["maxLeaseTtlSeconds"] = state.MaxLeaseTtlSeconds
		inputs["password"] = state.Password
		inputs["path"] = state.Path
		inputs["username"] = state.Username
		inputs["verifyConnection"] = state.VerifyConnection
	}
	s, err := ctx.ReadResource("vault:rabbitMq/secretBackend:SecretBackend", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackend{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecretBackend) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecretBackend) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Specifies the RabbitMQ connection URI.
func (r *SecretBackend) ConnectionUri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["connectionUri"])
}

// The default TTL for credentials
// issued by this backend.
func (r *SecretBackend) DefaultLeaseTtlSeconds() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["defaultLeaseTtlSeconds"])
}

// A human-friendly description for this backend.
func (r *SecretBackend) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The maximum TTL that can be requested
// for credentials issued by this backend.
func (r *SecretBackend) MaxLeaseTtlSeconds() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxLeaseTtlSeconds"])
}

// Specifies the RabbitMQ management administrator password.
func (r *SecretBackend) Password() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["password"])
}

// The unique path this backend should be mounted at. Must
// not begin or end with a `/`. Defaults to `aws`.
func (r *SecretBackend) Path() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["path"])
}

// Specifies the RabbitMQ management administrator username.
func (r *SecretBackend) Username() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["username"])
}

// Specifies whether to verify connection URI, username, and password.
// Defaults to `true`.
func (r *SecretBackend) VerifyConnection() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["verifyConnection"])
}

// Input properties used for looking up and filtering SecretBackend resources.
type SecretBackendState struct {
	// Specifies the RabbitMQ connection URI.
	ConnectionUri interface{}
	// The default TTL for credentials
	// issued by this backend.
	DefaultLeaseTtlSeconds interface{}
	// A human-friendly description for this backend.
	Description interface{}
	// The maximum TTL that can be requested
	// for credentials issued by this backend.
	MaxLeaseTtlSeconds interface{}
	// Specifies the RabbitMQ management administrator password.
	Password interface{}
	// The unique path this backend should be mounted at. Must
	// not begin or end with a `/`. Defaults to `aws`.
	Path interface{}
	// Specifies the RabbitMQ management administrator username.
	Username interface{}
	// Specifies whether to verify connection URI, username, and password.
	// Defaults to `true`.
	VerifyConnection interface{}
}

// The set of arguments for constructing a SecretBackend resource.
type SecretBackendArgs struct {
	// Specifies the RabbitMQ connection URI.
	ConnectionUri interface{}
	// The default TTL for credentials
	// issued by this backend.
	DefaultLeaseTtlSeconds interface{}
	// A human-friendly description for this backend.
	Description interface{}
	// The maximum TTL that can be requested
	// for credentials issued by this backend.
	MaxLeaseTtlSeconds interface{}
	// Specifies the RabbitMQ management administrator password.
	Password interface{}
	// The unique path this backend should be mounted at. Must
	// not begin or end with a `/`. Defaults to `aws`.
	Path interface{}
	// Specifies the RabbitMQ management administrator username.
	Username interface{}
	// Specifies whether to verify connection URI, username, and password.
	// Defaults to `true`.
	VerifyConnection interface{}
}
