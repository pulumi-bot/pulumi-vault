// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rabbitMq

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/rabbitmq_secret_backend_role.html.markdown.
type SecretBackendRole struct {
	s *pulumi.ResourceState
}

// NewSecretBackendRole registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendRole(ctx *pulumi.Context,
	name string, args *SecretBackendRoleArgs, opts ...pulumi.ResourceOpt) (*SecretBackendRole, error) {
	if args == nil || args.Backend == nil {
		return nil, errors.New("missing required argument 'Backend'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backend"] = nil
		inputs["name"] = nil
		inputs["tags"] = nil
		inputs["vhosts"] = nil
	} else {
		inputs["backend"] = args.Backend
		inputs["name"] = args.Name
		inputs["tags"] = args.Tags
		inputs["vhosts"] = args.Vhosts
	}
	s, err := ctx.RegisterResource("vault:rabbitMq/secretBackendRole:SecretBackendRole", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendRole{s: s}, nil
}

// GetSecretBackendRole gets an existing SecretBackendRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendRole(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecretBackendRoleState, opts ...pulumi.ResourceOpt) (*SecretBackendRole, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backend"] = state.Backend
		inputs["name"] = state.Name
		inputs["tags"] = state.Tags
		inputs["vhosts"] = state.Vhosts
	}
	s, err := ctx.ReadResource("vault:rabbitMq/secretBackendRole:SecretBackendRole", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendRole{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecretBackendRole) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecretBackendRole) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The path the RabbitMQ secret backend is mounted at,
// with no leading or trailing `/`s.
func (r *SecretBackendRole) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// The name to identify this role within the backend.
// Must be unique within the backend.
func (r *SecretBackendRole) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Specifies a comma-separated RabbitMQ management tags.
func (r *SecretBackendRole) Tags() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tags"])
}

// Specifies a map of virtual hosts to permissions.
func (r *SecretBackendRole) Vhosts() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["vhosts"])
}

// Input properties used for looking up and filtering SecretBackendRole resources.
type SecretBackendRoleState struct {
	// The path the RabbitMQ secret backend is mounted at,
	// with no leading or trailing `/`s.
	Backend interface{}
	// The name to identify this role within the backend.
	// Must be unique within the backend.
	Name interface{}
	// Specifies a comma-separated RabbitMQ management tags.
	Tags interface{}
	// Specifies a map of virtual hosts to permissions.
	Vhosts interface{}
}

// The set of arguments for constructing a SecretBackendRole resource.
type SecretBackendRoleArgs struct {
	// The path the RabbitMQ secret backend is mounted at,
	// with no leading or trailing `/`s.
	Backend interface{}
	// The name to identify this role within the backend.
	// Must be unique within the backend.
	Name interface{}
	// Specifies a comma-separated RabbitMQ management tags.
	Tags interface{}
	// Specifies a map of virtual hosts to permissions.
	Vhosts interface{}
}
