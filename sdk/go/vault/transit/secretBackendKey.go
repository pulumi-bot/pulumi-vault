// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package transit

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates an Encryption Keyring on a Transit Secret Backend for Vault.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/transit_secret_backend_key.html.markdown.
type SecretBackendKey struct {
	s *pulumi.ResourceState
}

// NewSecretBackendKey registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendKey(ctx *pulumi.Context,
	name string, args *SecretBackendKeyArgs, opts ...pulumi.ResourceOpt) (*SecretBackendKey, error) {
	if args == nil || args.Backend == nil {
		return nil, errors.New("missing required argument 'Backend'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowPlaintextBackup"] = nil
		inputs["backend"] = nil
		inputs["convergentEncryption"] = nil
		inputs["deletionAllowed"] = nil
		inputs["derived"] = nil
		inputs["exportable"] = nil
		inputs["minDecryptionVersion"] = nil
		inputs["minEncryptionVersion"] = nil
		inputs["name"] = nil
		inputs["type"] = nil
	} else {
		inputs["allowPlaintextBackup"] = args.AllowPlaintextBackup
		inputs["backend"] = args.Backend
		inputs["convergentEncryption"] = args.ConvergentEncryption
		inputs["deletionAllowed"] = args.DeletionAllowed
		inputs["derived"] = args.Derived
		inputs["exportable"] = args.Exportable
		inputs["minDecryptionVersion"] = args.MinDecryptionVersion
		inputs["minEncryptionVersion"] = args.MinEncryptionVersion
		inputs["name"] = args.Name
		inputs["type"] = args.Type
	}
	inputs["keys"] = nil
	inputs["latestVersion"] = nil
	inputs["minAvailableVersion"] = nil
	inputs["supportsDecryption"] = nil
	inputs["supportsDerivation"] = nil
	inputs["supportsEncryption"] = nil
	inputs["supportsSigning"] = nil
	s, err := ctx.RegisterResource("vault:transit/secretBackendKey:SecretBackendKey", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendKey{s: s}, nil
}

// GetSecretBackendKey gets an existing SecretBackendKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendKey(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecretBackendKeyState, opts ...pulumi.ResourceOpt) (*SecretBackendKey, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowPlaintextBackup"] = state.AllowPlaintextBackup
		inputs["backend"] = state.Backend
		inputs["convergentEncryption"] = state.ConvergentEncryption
		inputs["deletionAllowed"] = state.DeletionAllowed
		inputs["derived"] = state.Derived
		inputs["exportable"] = state.Exportable
		inputs["keys"] = state.Keys
		inputs["latestVersion"] = state.LatestVersion
		inputs["minAvailableVersion"] = state.MinAvailableVersion
		inputs["minDecryptionVersion"] = state.MinDecryptionVersion
		inputs["minEncryptionVersion"] = state.MinEncryptionVersion
		inputs["name"] = state.Name
		inputs["supportsDecryption"] = state.SupportsDecryption
		inputs["supportsDerivation"] = state.SupportsDerivation
		inputs["supportsEncryption"] = state.SupportsEncryption
		inputs["supportsSigning"] = state.SupportsSigning
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("vault:transit/secretBackendKey:SecretBackendKey", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendKey{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecretBackendKey) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecretBackendKey) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Enables taking backup of entire keyring in the plaintext format. Once set, this cannot be disabled.
// * Refer to Vault API documentation on key backups for more information: [Backup Key](https://www.vaultproject.io/api/secret/transit/index.html#backup-key)
func (r *SecretBackendKey) AllowPlaintextBackup() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["allowPlaintextBackup"])
}

// The path the transit secret backend is mounted at, with no leading or trailing `/`s.
func (r *SecretBackendKey) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires `derived` to be set to `true`.
func (r *SecretBackendKey) ConvergentEncryption() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["convergentEncryption"])
}

// Specifies if the key is allowed to be deleted.
func (r *SecretBackendKey) DeletionAllowed() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["deletionAllowed"])
}

// Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context which is used for key derivation.
func (r *SecretBackendKey) Derived() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["derived"])
}

// Enables keys to be exportable. This allows for all valid private keys in the keyring to be exported. Once set, this cannot be disabled.
func (r *SecretBackendKey) Exportable() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["exportable"])
}

// List of key versions in the keyring. This attribute is zero-indexed and will contain a map of values depending on the `type` of the encryption key.
// * for key types `aes256-gcm96` and `chacha20-poly1305`, each key version will be a map of a single value `id` which is just a hash of the key's metadata.
// * for key types `ed25519`, `ecdsa-p256`, `rsa-2048` and `rsa-4096`, each key version will be a map of the following:
func (r *SecretBackendKey) Keys() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["keys"])
}

// Latest key version available. This value is 1-indexed, so if `latestVersion` is `1`, then the key's information can be referenced from `keys` by selecting element `0`
func (r *SecretBackendKey) LatestVersion() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["latestVersion"])
}

// Minimum key version available for use. If keys have been archived by increasing `minDecryptionVersion`, this attribute will reflect that change.
func (r *SecretBackendKey) MinAvailableVersion() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["minAvailableVersion"])
}

// Minimum key version to use for decryption.
func (r *SecretBackendKey) MinDecryptionVersion() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["minDecryptionVersion"])
}

// Minimum key version to use for encryption
func (r *SecretBackendKey) MinEncryptionVersion() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["minEncryptionVersion"])
}

// The name to identify this key within the backend. Must be unique within the backend.
func (r *SecretBackendKey) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Whether or not the key supports decryption, based on key type.
func (r *SecretBackendKey) SupportsDecryption() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["supportsDecryption"])
}

// Whether or not the key supports derivation, based on key type.
func (r *SecretBackendKey) SupportsDerivation() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["supportsDerivation"])
}

// Whether or not the key supports encryption, based on key type.
func (r *SecretBackendKey) SupportsEncryption() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["supportsEncryption"])
}

// Whether or not the key supports signing, based on key type.
func (r *SecretBackendKey) SupportsSigning() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["supportsSigning"])
}

// Specifies the type of key to create. The currently-supported types are: `aes256-gcm96` (default), `chacha20-poly1305`, `ed25519`, `ecdsa-p256`, `rsa-2048` and `rsa-4096`. 
// * Refer to the Vault documentation on transit key types for more information: [Key Types](https://www.vaultproject.io/docs/secrets/transit/index.html#key-types)
func (r *SecretBackendKey) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering SecretBackendKey resources.
type SecretBackendKeyState struct {
	// Enables taking backup of entire keyring in the plaintext format. Once set, this cannot be disabled.
	// * Refer to Vault API documentation on key backups for more information: [Backup Key](https://www.vaultproject.io/api/secret/transit/index.html#backup-key)
	AllowPlaintextBackup interface{}
	// The path the transit secret backend is mounted at, with no leading or trailing `/`s.
	Backend interface{}
	// Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires `derived` to be set to `true`.
	ConvergentEncryption interface{}
	// Specifies if the key is allowed to be deleted.
	DeletionAllowed interface{}
	// Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context which is used for key derivation.
	Derived interface{}
	// Enables keys to be exportable. This allows for all valid private keys in the keyring to be exported. Once set, this cannot be disabled.
	Exportable interface{}
	// List of key versions in the keyring. This attribute is zero-indexed and will contain a map of values depending on the `type` of the encryption key.
	// * for key types `aes256-gcm96` and `chacha20-poly1305`, each key version will be a map of a single value `id` which is just a hash of the key's metadata.
	// * for key types `ed25519`, `ecdsa-p256`, `rsa-2048` and `rsa-4096`, each key version will be a map of the following:
	Keys interface{}
	// Latest key version available. This value is 1-indexed, so if `latestVersion` is `1`, then the key's information can be referenced from `keys` by selecting element `0`
	LatestVersion interface{}
	// Minimum key version available for use. If keys have been archived by increasing `minDecryptionVersion`, this attribute will reflect that change.
	MinAvailableVersion interface{}
	// Minimum key version to use for decryption.
	MinDecryptionVersion interface{}
	// Minimum key version to use for encryption
	MinEncryptionVersion interface{}
	// The name to identify this key within the backend. Must be unique within the backend.
	Name interface{}
	// Whether or not the key supports decryption, based on key type.
	SupportsDecryption interface{}
	// Whether or not the key supports derivation, based on key type.
	SupportsDerivation interface{}
	// Whether or not the key supports encryption, based on key type.
	SupportsEncryption interface{}
	// Whether or not the key supports signing, based on key type.
	SupportsSigning interface{}
	// Specifies the type of key to create. The currently-supported types are: `aes256-gcm96` (default), `chacha20-poly1305`, `ed25519`, `ecdsa-p256`, `rsa-2048` and `rsa-4096`. 
	// * Refer to the Vault documentation on transit key types for more information: [Key Types](https://www.vaultproject.io/docs/secrets/transit/index.html#key-types)
	Type interface{}
}

// The set of arguments for constructing a SecretBackendKey resource.
type SecretBackendKeyArgs struct {
	// Enables taking backup of entire keyring in the plaintext format. Once set, this cannot be disabled.
	// * Refer to Vault API documentation on key backups for more information: [Backup Key](https://www.vaultproject.io/api/secret/transit/index.html#backup-key)
	AllowPlaintextBackup interface{}
	// The path the transit secret backend is mounted at, with no leading or trailing `/`s.
	Backend interface{}
	// Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires `derived` to be set to `true`.
	ConvergentEncryption interface{}
	// Specifies if the key is allowed to be deleted.
	DeletionAllowed interface{}
	// Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context which is used for key derivation.
	Derived interface{}
	// Enables keys to be exportable. This allows for all valid private keys in the keyring to be exported. Once set, this cannot be disabled.
	Exportable interface{}
	// Minimum key version to use for decryption.
	MinDecryptionVersion interface{}
	// Minimum key version to use for encryption
	MinEncryptionVersion interface{}
	// The name to identify this key within the backend. Must be unique within the backend.
	Name interface{}
	// Specifies the type of key to create. The currently-supported types are: `aes256-gcm96` (default), `chacha20-poly1305`, `ed25519`, `ecdsa-p256`, `rsa-2048` and `rsa-4096`. 
	// * Refer to the Vault documentation on transit key types for more information: [Key Types](https://www.vaultproject.io/docs/secrets/transit/index.html#key-types)
	Type interface{}
}
