// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage Endpoint Governing Policy (EGP) via [Sentinel](https://www.vaultproject.io/docs/enterprise/sentinel/index.html).
// 
// **Note** this feature is available only with Vault Enterprise.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/egp_policy.html.markdown.
type EgpPolicy struct {
	s *pulumi.ResourceState
}

// NewEgpPolicy registers a new resource with the given unique name, arguments, and options.
func NewEgpPolicy(ctx *pulumi.Context,
	name string, args *EgpPolicyArgs, opts ...pulumi.ResourceOpt) (*EgpPolicy, error) {
	if args == nil || args.EnforcementLevel == nil {
		return nil, errors.New("missing required argument 'EnforcementLevel'")
	}
	if args == nil || args.Paths == nil {
		return nil, errors.New("missing required argument 'Paths'")
	}
	if args == nil || args.Policy == nil {
		return nil, errors.New("missing required argument 'Policy'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["enforcementLevel"] = nil
		inputs["name"] = nil
		inputs["paths"] = nil
		inputs["policy"] = nil
	} else {
		inputs["enforcementLevel"] = args.EnforcementLevel
		inputs["name"] = args.Name
		inputs["paths"] = args.Paths
		inputs["policy"] = args.Policy
	}
	s, err := ctx.RegisterResource("vault:index/egpPolicy:EgpPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EgpPolicy{s: s}, nil
}

// GetEgpPolicy gets an existing EgpPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEgpPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EgpPolicyState, opts ...pulumi.ResourceOpt) (*EgpPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["enforcementLevel"] = state.EnforcementLevel
		inputs["name"] = state.Name
		inputs["paths"] = state.Paths
		inputs["policy"] = state.Policy
	}
	s, err := ctx.ReadResource("vault:index/egpPolicy:EgpPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EgpPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *EgpPolicy) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *EgpPolicy) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Enforcement level of Sentinel policy. Can be either `advisory` or `soft-mandatory` or `hard-mandatory`
func (r *EgpPolicy) EnforcementLevel() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["enforcementLevel"])
}

// The name of the policy
func (r *EgpPolicy) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// List of paths to which the policy will be applied to
func (r *EgpPolicy) Paths() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["paths"])
}

// String containing a Sentinel policy
func (r *EgpPolicy) Policy() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["policy"])
}

// Input properties used for looking up and filtering EgpPolicy resources.
type EgpPolicyState struct {
	// Enforcement level of Sentinel policy. Can be either `advisory` or `soft-mandatory` or `hard-mandatory`
	EnforcementLevel interface{}
	// The name of the policy
	Name interface{}
	// List of paths to which the policy will be applied to
	Paths interface{}
	// String containing a Sentinel policy
	Policy interface{}
}

// The set of arguments for constructing a EgpPolicy resource.
type EgpPolicyArgs struct {
	// Enforcement level of Sentinel policy. Can be either `advisory` or `soft-mandatory` or `hard-mandatory`
	EnforcementLevel interface{}
	// The name of the policy
	Name interface{}
	// List of paths to which the policy will be applied to
	Paths interface{}
	// String containing a Sentinel policy
	Policy interface{}
}
