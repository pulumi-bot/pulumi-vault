// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage [Namespaces](https://www.vaultproject.io/docs/enterprise/namespaces/index.html).
// 
// **Note** this feature is available only with Vault Enterprise.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/namespace.html.markdown.
type Namespace struct {
	s *pulumi.ResourceState
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOpt) (*Namespace, error) {
	if args == nil || args.Path == nil {
		return nil, errors.New("missing required argument 'Path'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["path"] = nil
	} else {
		inputs["path"] = args.Path
	}
	s, err := ctx.RegisterResource("vault:index/namespace:Namespace", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Namespace{s: s}, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NamespaceState, opts ...pulumi.ResourceOpt) (*Namespace, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["path"] = state.Path
	}
	s, err := ctx.ReadResource("vault:index/namespace:Namespace", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Namespace{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Namespace) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Namespace) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The path of the namespace. Must not have a trailing `/`
func (r *Namespace) Path() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["path"])
}

// Input properties used for looking up and filtering Namespace resources.
type NamespaceState struct {
	// The path of the namespace. Must not have a trailing `/`
	Path interface{}
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// The path of the namespace. Must not have a trailing `/`
	Path interface{}
}
