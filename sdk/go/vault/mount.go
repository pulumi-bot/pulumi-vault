// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Mount struct {
	s *pulumi.ResourceState
}

// NewMount registers a new resource with the given unique name, arguments, and options.
func NewMount(ctx *pulumi.Context,
	name string, args *MountArgs, opts ...pulumi.ResourceOpt) (*Mount, error) {
	if args == nil || args.Path == nil {
		return nil, errors.New("missing required argument 'Path'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["defaultLeaseTtlSeconds"] = nil
		inputs["description"] = nil
		inputs["local"] = nil
		inputs["maxLeaseTtlSeconds"] = nil
		inputs["options"] = nil
		inputs["path"] = nil
		inputs["type"] = nil
	} else {
		inputs["defaultLeaseTtlSeconds"] = args.DefaultLeaseTtlSeconds
		inputs["description"] = args.Description
		inputs["local"] = args.Local
		inputs["maxLeaseTtlSeconds"] = args.MaxLeaseTtlSeconds
		inputs["options"] = args.Options
		inputs["path"] = args.Path
		inputs["type"] = args.Type
	}
	inputs["accessor"] = nil
	s, err := ctx.RegisterResource("vault:index/mount:Mount", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Mount{s: s}, nil
}

// GetMount gets an existing Mount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMount(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MountState, opts ...pulumi.ResourceOpt) (*Mount, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessor"] = state.Accessor
		inputs["defaultLeaseTtlSeconds"] = state.DefaultLeaseTtlSeconds
		inputs["description"] = state.Description
		inputs["local"] = state.Local
		inputs["maxLeaseTtlSeconds"] = state.MaxLeaseTtlSeconds
		inputs["options"] = state.Options
		inputs["path"] = state.Path
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("vault:index/mount:Mount", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Mount{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Mount) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Mount) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The accessor for this mount.
func (r *Mount) Accessor() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessor"])
}

// Default lease duration for tokens and secrets in seconds
func (r *Mount) DefaultLeaseTtlSeconds() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["defaultLeaseTtlSeconds"])
}

// Human-friendly description of the mount
func (r *Mount) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
func (r *Mount) Local() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["local"])
}

// Maximum possible lease duration for tokens and secrets in seconds
func (r *Mount) MaxLeaseTtlSeconds() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxLeaseTtlSeconds"])
}

// Specifies mount type specific options that are passed to the backend
func (r *Mount) Options() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["options"])
}

// Where the secret backend will be mounted
func (r *Mount) Path() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["path"])
}

// Type of the backend, such as "aws"
func (r *Mount) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering Mount resources.
type MountState struct {
	// The accessor for this mount.
	Accessor interface{}
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds interface{}
	// Human-friendly description of the mount
	Description interface{}
	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	Local interface{}
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds interface{}
	// Specifies mount type specific options that are passed to the backend
	Options interface{}
	// Where the secret backend will be mounted
	Path interface{}
	// Type of the backend, such as "aws"
	Type interface{}
}

// The set of arguments for constructing a Mount resource.
type MountArgs struct {
	// Default lease duration for tokens and secrets in seconds
	DefaultLeaseTtlSeconds interface{}
	// Human-friendly description of the mount
	Description interface{}
	// Boolean flag that can be explicitly set to true to enforce local mount in HA environment
	Local interface{}
	// Maximum possible lease duration for tokens and secrets in seconds
	MaxLeaseTtlSeconds interface{}
	// Specifies mount type specific options that are passed to the backend
	Options interface{}
	// Where the secret backend will be mounted
	Path interface{}
	// Type of the backend, such as "aws"
	Type interface{}
}
