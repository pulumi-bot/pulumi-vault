// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages policy mappings for Github Users authenticated via Github. See the [Vault
// documentation](https://www.vaultproject.io/docs/auth/github.html) for more
// information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/github_user.html.markdown.
type User struct {
	s *pulumi.ResourceState
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOpt) (*User, error) {
	if args == nil || args.User == nil {
		return nil, errors.New("missing required argument 'User'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backend"] = nil
		inputs["policies"] = nil
		inputs["tokenBoundCidrs"] = nil
		inputs["tokenExplicitMaxTtl"] = nil
		inputs["tokenMaxTtl"] = nil
		inputs["tokenNoDefaultPolicy"] = nil
		inputs["tokenNumUses"] = nil
		inputs["tokenPeriod"] = nil
		inputs["tokenPolicies"] = nil
		inputs["tokenTtl"] = nil
		inputs["tokenType"] = nil
		inputs["user"] = nil
	} else {
		inputs["backend"] = args.Backend
		inputs["policies"] = args.Policies
		inputs["tokenBoundCidrs"] = args.TokenBoundCidrs
		inputs["tokenExplicitMaxTtl"] = args.TokenExplicitMaxTtl
		inputs["tokenMaxTtl"] = args.TokenMaxTtl
		inputs["tokenNoDefaultPolicy"] = args.TokenNoDefaultPolicy
		inputs["tokenNumUses"] = args.TokenNumUses
		inputs["tokenPeriod"] = args.TokenPeriod
		inputs["tokenPolicies"] = args.TokenPolicies
		inputs["tokenTtl"] = args.TokenTtl
		inputs["tokenType"] = args.TokenType
		inputs["user"] = args.User
	}
	s, err := ctx.RegisterResource("vault:github/user:User", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &User{s: s}, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserState, opts ...pulumi.ResourceOpt) (*User, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backend"] = state.Backend
		inputs["policies"] = state.Policies
		inputs["tokenBoundCidrs"] = state.TokenBoundCidrs
		inputs["tokenExplicitMaxTtl"] = state.TokenExplicitMaxTtl
		inputs["tokenMaxTtl"] = state.TokenMaxTtl
		inputs["tokenNoDefaultPolicy"] = state.TokenNoDefaultPolicy
		inputs["tokenNumUses"] = state.TokenNumUses
		inputs["tokenPeriod"] = state.TokenPeriod
		inputs["tokenPolicies"] = state.TokenPolicies
		inputs["tokenTtl"] = state.TokenTtl
		inputs["tokenType"] = state.TokenType
		inputs["user"] = state.User
	}
	s, err := ctx.ReadResource("vault:github/user:User", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &User{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *User) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *User) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Path where the github auth backend is mounted. Defaults to `github`
// if not specified.
func (r *User) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// An array of strings specifying the policies to be set on tokens issued
// using this role.
func (r *User) Policies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["policies"])
}

// Specifies the blocks of IP addresses which are allowed to use the generated token
func (r *User) TokenBoundCidrs() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tokenBoundCidrs"])
}

// Generated Token's Explicit Maximum TTL in seconds
func (r *User) TokenExplicitMaxTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenExplicitMaxTtl"])
}

// The maximum lifetime of the generated token
func (r *User) TokenMaxTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenMaxTtl"])
}

// If true, the 'default' policy will not automatically be added to generated tokens
func (r *User) TokenNoDefaultPolicy() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["tokenNoDefaultPolicy"])
}

// The maximum number of times a token may be used, a value of zero means unlimited
func (r *User) TokenNumUses() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenNumUses"])
}

// Generated Token's Period
func (r *User) TokenPeriod() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenPeriod"])
}

// Generated Token's Policies
func (r *User) TokenPolicies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tokenPolicies"])
}

// The initial ttl of the token to generate in seconds
func (r *User) TokenTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenTtl"])
}

// The type of token to generate, service or batch
func (r *User) TokenType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tokenType"])
}

// GitHub user name.
func (r *User) User() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["user"])
}

// Input properties used for looking up and filtering User resources.
type UserState struct {
	// Path where the github auth backend is mounted. Defaults to `github`
	// if not specified.
	Backend interface{}
	// An array of strings specifying the policies to be set on tokens issued
	// using this role.
	Policies interface{}
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenBoundCidrs interface{}
	// Generated Token's Explicit Maximum TTL in seconds
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenExplicitMaxTtl interface{}
	// The maximum lifetime of the generated token
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenMaxTtl interface{}
	// If true, the 'default' policy will not automatically be added to generated tokens
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenNoDefaultPolicy interface{}
	// The maximum number of times a token may be used, a value of zero means unlimited
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenNumUses interface{}
	// Generated Token's Period
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenPeriod interface{}
	// Generated Token's Policies
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenPolicies interface{}
	// The initial ttl of the token to generate in seconds
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenTtl interface{}
	// The type of token to generate, service or batch
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenType interface{}
	// GitHub user name.
	User interface{}
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Path where the github auth backend is mounted. Defaults to `github`
	// if not specified.
	Backend interface{}
	// An array of strings specifying the policies to be set on tokens issued
	// using this role.
	Policies interface{}
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenBoundCidrs interface{}
	// Generated Token's Explicit Maximum TTL in seconds
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenExplicitMaxTtl interface{}
	// The maximum lifetime of the generated token
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenMaxTtl interface{}
	// If true, the 'default' policy will not automatically be added to generated tokens
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenNoDefaultPolicy interface{}
	// The maximum number of times a token may be used, a value of zero means unlimited
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenNumUses interface{}
	// Generated Token's Period
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenPeriod interface{}
	// Generated Token's Policies
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenPolicies interface{}
	// The initial ttl of the token to generate in seconds
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenTtl interface{}
	// The type of token to generate, service or batch
	// Deprecated: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenType interface{}
	// GitHub user name.
	User interface{}
}
