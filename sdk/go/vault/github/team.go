// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages policy mappings for Github Teams authenticated via Github. See the [Vault
// documentation](https://www.vaultproject.io/docs/auth/github.html) for more
// information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/github_team.html.markdown.
type Team struct {
	s *pulumi.ResourceState
}

// NewTeam registers a new resource with the given unique name, arguments, and options.
func NewTeam(ctx *pulumi.Context,
	name string, args *TeamArgs, opts ...pulumi.ResourceOpt) (*Team, error) {
	if args == nil || args.Team == nil {
		return nil, errors.New("missing required argument 'Team'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backend"] = nil
		inputs["policies"] = nil
		inputs["team"] = nil
		inputs["tokenBoundCidrs"] = nil
		inputs["tokenExplicitMaxTtl"] = nil
		inputs["tokenMaxTtl"] = nil
		inputs["tokenNoDefaultPolicy"] = nil
		inputs["tokenNumUses"] = nil
		inputs["tokenPeriod"] = nil
		inputs["tokenPolicies"] = nil
		inputs["tokenTtl"] = nil
		inputs["tokenType"] = nil
	} else {
		inputs["backend"] = args.Backend
		inputs["policies"] = args.Policies
		inputs["team"] = args.Team
		inputs["tokenBoundCidrs"] = args.TokenBoundCidrs
		inputs["tokenExplicitMaxTtl"] = args.TokenExplicitMaxTtl
		inputs["tokenMaxTtl"] = args.TokenMaxTtl
		inputs["tokenNoDefaultPolicy"] = args.TokenNoDefaultPolicy
		inputs["tokenNumUses"] = args.TokenNumUses
		inputs["tokenPeriod"] = args.TokenPeriod
		inputs["tokenPolicies"] = args.TokenPolicies
		inputs["tokenTtl"] = args.TokenTtl
		inputs["tokenType"] = args.TokenType
	}
	s, err := ctx.RegisterResource("vault:github/team:Team", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Team{s: s}, nil
}

// GetTeam gets an existing Team resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeam(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TeamState, opts ...pulumi.ResourceOpt) (*Team, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backend"] = state.Backend
		inputs["policies"] = state.Policies
		inputs["team"] = state.Team
		inputs["tokenBoundCidrs"] = state.TokenBoundCidrs
		inputs["tokenExplicitMaxTtl"] = state.TokenExplicitMaxTtl
		inputs["tokenMaxTtl"] = state.TokenMaxTtl
		inputs["tokenNoDefaultPolicy"] = state.TokenNoDefaultPolicy
		inputs["tokenNumUses"] = state.TokenNumUses
		inputs["tokenPeriod"] = state.TokenPeriod
		inputs["tokenPolicies"] = state.TokenPolicies
		inputs["tokenTtl"] = state.TokenTtl
		inputs["tokenType"] = state.TokenType
	}
	s, err := ctx.ReadResource("vault:github/team:Team", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Team{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Team) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Team) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Path where the github auth backend is mounted. Defaults to `github`
// if not specified.
func (r *Team) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// An array of strings specifying the policies to be set on tokens
// issued using this role.
func (r *Team) Policies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["policies"])
}

// GitHub team name in "slugified" format.
func (r *Team) Team() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["team"])
}

// Specifies the blocks of IP addresses which are allowed to use the generated token
func (r *Team) TokenBoundCidrs() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tokenBoundCidrs"])
}

// Generated Token's Explicit Maximum TTL in seconds
func (r *Team) TokenExplicitMaxTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenExplicitMaxTtl"])
}

// The maximum lifetime of the generated token
func (r *Team) TokenMaxTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenMaxTtl"])
}

// If true, the 'default' policy will not automatically be added to generated tokens
func (r *Team) TokenNoDefaultPolicy() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["tokenNoDefaultPolicy"])
}

// The maximum number of times a token may be used, a value of zero means unlimited
func (r *Team) TokenNumUses() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenNumUses"])
}

// Generated Token's Period
func (r *Team) TokenPeriod() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenPeriod"])
}

// Generated Token's Policies
func (r *Team) TokenPolicies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tokenPolicies"])
}

// The initial ttl of the token to generate in seconds
func (r *Team) TokenTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenTtl"])
}

// The type of token to generate, service or batch
func (r *Team) TokenType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tokenType"])
}

// Input properties used for looking up and filtering Team resources.
type TeamState struct {
	// Path where the github auth backend is mounted. Defaults to `github`
	// if not specified.
	Backend interface{}
	// An array of strings specifying the policies to be set on tokens
	// issued using this role.
	Policies interface{}
	// GitHub team name in "slugified" format.
	Team interface{}
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenBoundCidrs interface{}
	// Generated Token's Explicit Maximum TTL in seconds
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenExplicitMaxTtl interface{}
	// The maximum lifetime of the generated token
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenMaxTtl interface{}
	// If true, the 'default' policy will not automatically be added to generated tokens
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenNoDefaultPolicy interface{}
	// The maximum number of times a token may be used, a value of zero means unlimited
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenNumUses interface{}
	// Generated Token's Period
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenPeriod interface{}
	// Generated Token's Policies
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenPolicies interface{}
	// The initial ttl of the token to generate in seconds
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenTtl interface{}
	// The type of token to generate, service or batch
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenType interface{}
}

// The set of arguments for constructing a Team resource.
type TeamArgs struct {
	// Path where the github auth backend is mounted. Defaults to `github`
	// if not specified.
	Backend interface{}
	// An array of strings specifying the policies to be set on tokens
	// issued using this role.
	Policies interface{}
	// GitHub team name in "slugified" format.
	Team interface{}
	// Specifies the blocks of IP addresses which are allowed to use the generated token
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenBoundCidrs interface{}
	// Generated Token's Explicit Maximum TTL in seconds
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenExplicitMaxTtl interface{}
	// The maximum lifetime of the generated token
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenMaxTtl interface{}
	// If true, the 'default' policy will not automatically be added to generated tokens
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenNoDefaultPolicy interface{}
	// The maximum number of times a token may be used, a value of zero means unlimited
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenNumUses interface{}
	// Generated Token's Period
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenPeriod interface{}
	// Generated Token's Policies
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenPolicies interface{}
	// The initial ttl of the token to generate in seconds
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenTtl interface{}
	// The type of token to generate, service or batch
	// DeprecationMessage: This parameter should be moved to the Github Auth backend config block. It does nothing in a user/team block.
	TokenType interface{}
}
