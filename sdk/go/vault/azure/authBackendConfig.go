// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azure

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/azure_auth_backend_config.html.markdown.
type AuthBackendConfig struct {
	s *pulumi.ResourceState
}

// NewAuthBackendConfig registers a new resource with the given unique name, arguments, and options.
func NewAuthBackendConfig(ctx *pulumi.Context,
	name string, args *AuthBackendConfigArgs, opts ...pulumi.ResourceOpt) (*AuthBackendConfig, error) {
	if args == nil || args.Resource == nil {
		return nil, errors.New("missing required argument 'Resource'")
	}
	if args == nil || args.TenantId == nil {
		return nil, errors.New("missing required argument 'TenantId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backend"] = nil
		inputs["clientId"] = nil
		inputs["clientSecret"] = nil
		inputs["environment"] = nil
		inputs["resource"] = nil
		inputs["tenantId"] = nil
	} else {
		inputs["backend"] = args.Backend
		inputs["clientId"] = args.ClientId
		inputs["clientSecret"] = args.ClientSecret
		inputs["environment"] = args.Environment
		inputs["resource"] = args.Resource
		inputs["tenantId"] = args.TenantId
	}
	s, err := ctx.RegisterResource("vault:azure/authBackendConfig:AuthBackendConfig", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackendConfig{s: s}, nil
}

// GetAuthBackendConfig gets an existing AuthBackendConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackendConfig(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthBackendConfigState, opts ...pulumi.ResourceOpt) (*AuthBackendConfig, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backend"] = state.Backend
		inputs["clientId"] = state.ClientId
		inputs["clientSecret"] = state.ClientSecret
		inputs["environment"] = state.Environment
		inputs["resource"] = state.Resource
		inputs["tenantId"] = state.TenantId
	}
	s, err := ctx.ReadResource("vault:azure/authBackendConfig:AuthBackendConfig", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackendConfig{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthBackendConfig) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthBackendConfig) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The path the Azure auth backend being configured was
// mounted at.  Defaults to `azure`.
func (r *AuthBackendConfig) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// The client id for credentials to query the Azure APIs.
// Currently read permissions to query compute resources are required.
func (r *AuthBackendConfig) ClientId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientId"])
}

// The client secret for credentials to query the
// Azure APIs.
func (r *AuthBackendConfig) ClientSecret() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientSecret"])
}

// The Azure cloud environment. Valid values:
// AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud,
// AzureGermanCloud.  Defaults to `AzurePublicCloud`.
func (r *AuthBackendConfig) Environment() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["environment"])
}

// The configured URL for the application registered in
// Azure Active Directory.
func (r *AuthBackendConfig) Resource() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resource"])
}

// The tenant id for the Azure Active Directory
// organization.
func (r *AuthBackendConfig) TenantId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tenantId"])
}

// Input properties used for looking up and filtering AuthBackendConfig resources.
type AuthBackendConfigState struct {
	// The path the Azure auth backend being configured was
	// mounted at.  Defaults to `azure`.
	Backend interface{}
	// The client id for credentials to query the Azure APIs.
	// Currently read permissions to query compute resources are required.
	ClientId interface{}
	// The client secret for credentials to query the
	// Azure APIs.
	ClientSecret interface{}
	// The Azure cloud environment. Valid values:
	// AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud,
	// AzureGermanCloud.  Defaults to `AzurePublicCloud`.
	Environment interface{}
	// The configured URL for the application registered in
	// Azure Active Directory.
	Resource interface{}
	// The tenant id for the Azure Active Directory
	// organization.
	TenantId interface{}
}

// The set of arguments for constructing a AuthBackendConfig resource.
type AuthBackendConfigArgs struct {
	// The path the Azure auth backend being configured was
	// mounted at.  Defaults to `azure`.
	Backend interface{}
	// The client id for credentials to query the Azure APIs.
	// Currently read permissions to query compute resources are required.
	ClientId interface{}
	// The client secret for credentials to query the
	// Azure APIs.
	ClientSecret interface{}
	// The Azure cloud environment. Valid values:
	// AzurePublicCloud, AzureUSGovernmentCloud, AzureChinaCloud,
	// AzureGermanCloud.  Defaults to `AzurePublicCloud`.
	Environment interface{}
	// The configured URL for the application registered in
	// Azure Active Directory.
	Resource interface{}
	// The tenant id for the Azure Active Directory
	// organization.
	TenantId interface{}
}
