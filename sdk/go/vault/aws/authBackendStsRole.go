// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/aws_auth_backend_sts_role.html.markdown.
type AuthBackendStsRole struct {
	s *pulumi.ResourceState
}

// NewAuthBackendStsRole registers a new resource with the given unique name, arguments, and options.
func NewAuthBackendStsRole(ctx *pulumi.Context,
	name string, args *AuthBackendStsRoleArgs, opts ...pulumi.ResourceOpt) (*AuthBackendStsRole, error) {
	if args == nil || args.AccountId == nil {
		return nil, errors.New("missing required argument 'AccountId'")
	}
	if args == nil || args.StsRole == nil {
		return nil, errors.New("missing required argument 'StsRole'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountId"] = nil
		inputs["backend"] = nil
		inputs["stsRole"] = nil
	} else {
		inputs["accountId"] = args.AccountId
		inputs["backend"] = args.Backend
		inputs["stsRole"] = args.StsRole
	}
	s, err := ctx.RegisterResource("vault:aws/authBackendStsRole:AuthBackendStsRole", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackendStsRole{s: s}, nil
}

// GetAuthBackendStsRole gets an existing AuthBackendStsRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackendStsRole(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthBackendStsRoleState, opts ...pulumi.ResourceOpt) (*AuthBackendStsRole, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountId"] = state.AccountId
		inputs["backend"] = state.Backend
		inputs["stsRole"] = state.StsRole
	}
	s, err := ctx.ReadResource("vault:aws/authBackendStsRole:AuthBackendStsRole", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackendStsRole{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthBackendStsRole) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthBackendStsRole) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The AWS account ID to configure the STS role for.
func (r *AuthBackendStsRole) AccountId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accountId"])
}

// The path the AWS auth backend being configured was
// mounted at.  Defaults to `aws`.
func (r *AuthBackendStsRole) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// The STS role to assume when verifying requests made
// by EC2 instances in the account specified by `accountId`.
func (r *AuthBackendStsRole) StsRole() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["stsRole"])
}

// Input properties used for looking up and filtering AuthBackendStsRole resources.
type AuthBackendStsRoleState struct {
	// The AWS account ID to configure the STS role for.
	AccountId interface{}
	// The path the AWS auth backend being configured was
	// mounted at.  Defaults to `aws`.
	Backend interface{}
	// The STS role to assume when verifying requests made
	// by EC2 instances in the account specified by `accountId`.
	StsRole interface{}
}

// The set of arguments for constructing a AuthBackendStsRole resource.
type AuthBackendStsRoleArgs struct {
	// The AWS account ID to configure the STS role for.
	AccountId interface{}
	// The path the AWS auth backend being configured was
	// mounted at.  Defaults to `aws`.
	Backend interface{}
	// The STS role to assume when verifying requests made
	// by EC2 instances in the account specified by `accountId`.
	StsRole interface{}
}
