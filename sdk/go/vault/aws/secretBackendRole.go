// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package aws

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type SecretBackendRole struct {
	pulumi.CustomResourceState

	// The path of the AWS Secret Backend the role belongs to.
	Backend pulumi.StringOutput `pulumi:"backend"`
	// Role credential type.
	CredentialType pulumi.StringOutput `pulumi:"credentialType"`
	// The default TTL in seconds for STS credentials. When a TTL is not specified when STS credentials are requested, and a
	// default TTL is specified on the role, then this default TTL will be used. Valid only when credential_type is one of
	// assumed_role or federation_token.
	DefaultStsTtl pulumi.IntOutput `pulumi:"defaultStsTtl"`
	// The max allowed TTL in seconds for STS credentials (credentials TTL are capped to max_sts_ttl). Valid only when
	// credential_type is one of assumed_role or federation_token.
	MaxStsTtl pulumi.IntOutput `pulumi:"maxStsTtl"`
	// Unique name for the role.
	Name pulumi.StringOutput `pulumi:"name"`
	// ARN for an existing IAM policy the role should use.
	PolicyArns pulumi.StringArrayOutput `pulumi:"policyArns"`
	// IAM policy the role should use in JSON format.
	PolicyDocument pulumi.StringPtrOutput `pulumi:"policyDocument"`
	// ARNs of AWS roles allowed to be assumed. Only valid when credential_type is 'assumed_role'
	RoleArns pulumi.StringArrayOutput `pulumi:"roleArns"`
}

// NewSecretBackendRole registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendRole(ctx *pulumi.Context,
	name string, args *SecretBackendRoleArgs, opts ...pulumi.ResourceOption) (*SecretBackendRole, error) {
	if args == nil || args.Backend == nil {
		return nil, errors.New("missing required argument 'Backend'")
	}
	if args == nil || args.CredentialType == nil {
		return nil, errors.New("missing required argument 'CredentialType'")
	}
	if args == nil {
		args = &SecretBackendRoleArgs{}
	}
	var resource SecretBackendRole
	err := ctx.RegisterResource("vault:aws/secretBackendRole:SecretBackendRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretBackendRole gets an existing SecretBackendRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretBackendRoleState, opts ...pulumi.ResourceOption) (*SecretBackendRole, error) {
	var resource SecretBackendRole
	err := ctx.ReadResource("vault:aws/secretBackendRole:SecretBackendRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretBackendRole resources.
type secretBackendRoleState struct {
	// The path of the AWS Secret Backend the role belongs to.
	Backend *string `pulumi:"backend"`
	// Role credential type.
	CredentialType *string `pulumi:"credentialType"`
	// The default TTL in seconds for STS credentials. When a TTL is not specified when STS credentials are requested, and a
	// default TTL is specified on the role, then this default TTL will be used. Valid only when credential_type is one of
	// assumed_role or federation_token.
	DefaultStsTtl *int `pulumi:"defaultStsTtl"`
	// The max allowed TTL in seconds for STS credentials (credentials TTL are capped to max_sts_ttl). Valid only when
	// credential_type is one of assumed_role or federation_token.
	MaxStsTtl *int `pulumi:"maxStsTtl"`
	// Unique name for the role.
	Name *string `pulumi:"name"`
	// ARN for an existing IAM policy the role should use.
	PolicyArns []string `pulumi:"policyArns"`
	// IAM policy the role should use in JSON format.
	PolicyDocument *string `pulumi:"policyDocument"`
	// ARNs of AWS roles allowed to be assumed. Only valid when credential_type is 'assumed_role'
	RoleArns []string `pulumi:"roleArns"`
}

type SecretBackendRoleState struct {
	// The path of the AWS Secret Backend the role belongs to.
	Backend pulumi.StringPtrInput
	// Role credential type.
	CredentialType pulumi.StringPtrInput
	// The default TTL in seconds for STS credentials. When a TTL is not specified when STS credentials are requested, and a
	// default TTL is specified on the role, then this default TTL will be used. Valid only when credential_type is one of
	// assumed_role or federation_token.
	DefaultStsTtl pulumi.IntPtrInput
	// The max allowed TTL in seconds for STS credentials (credentials TTL are capped to max_sts_ttl). Valid only when
	// credential_type is one of assumed_role or federation_token.
	MaxStsTtl pulumi.IntPtrInput
	// Unique name for the role.
	Name pulumi.StringPtrInput
	// ARN for an existing IAM policy the role should use.
	PolicyArns pulumi.StringArrayInput
	// IAM policy the role should use in JSON format.
	PolicyDocument pulumi.StringPtrInput
	// ARNs of AWS roles allowed to be assumed. Only valid when credential_type is 'assumed_role'
	RoleArns pulumi.StringArrayInput
}

func (SecretBackendRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendRoleState)(nil)).Elem()
}

type secretBackendRoleArgs struct {
	// The path of the AWS Secret Backend the role belongs to.
	Backend string `pulumi:"backend"`
	// Role credential type.
	CredentialType string `pulumi:"credentialType"`
	// The default TTL in seconds for STS credentials. When a TTL is not specified when STS credentials are requested, and a
	// default TTL is specified on the role, then this default TTL will be used. Valid only when credential_type is one of
	// assumed_role or federation_token.
	DefaultStsTtl *int `pulumi:"defaultStsTtl"`
	// The max allowed TTL in seconds for STS credentials (credentials TTL are capped to max_sts_ttl). Valid only when
	// credential_type is one of assumed_role or federation_token.
	MaxStsTtl *int `pulumi:"maxStsTtl"`
	// Unique name for the role.
	Name *string `pulumi:"name"`
	// ARN for an existing IAM policy the role should use.
	PolicyArns []string `pulumi:"policyArns"`
	// IAM policy the role should use in JSON format.
	PolicyDocument *string `pulumi:"policyDocument"`
	// ARNs of AWS roles allowed to be assumed. Only valid when credential_type is 'assumed_role'
	RoleArns []string `pulumi:"roleArns"`
}

// The set of arguments for constructing a SecretBackendRole resource.
type SecretBackendRoleArgs struct {
	// The path of the AWS Secret Backend the role belongs to.
	Backend pulumi.StringInput
	// Role credential type.
	CredentialType pulumi.StringInput
	// The default TTL in seconds for STS credentials. When a TTL is not specified when STS credentials are requested, and a
	// default TTL is specified on the role, then this default TTL will be used. Valid only when credential_type is one of
	// assumed_role or federation_token.
	DefaultStsTtl pulumi.IntPtrInput
	// The max allowed TTL in seconds for STS credentials (credentials TTL are capped to max_sts_ttl). Valid only when
	// credential_type is one of assumed_role or federation_token.
	MaxStsTtl pulumi.IntPtrInput
	// Unique name for the role.
	Name pulumi.StringPtrInput
	// ARN for an existing IAM policy the role should use.
	PolicyArns pulumi.StringArrayInput
	// IAM policy the role should use in JSON format.
	PolicyDocument pulumi.StringPtrInput
	// ARNs of AWS roles allowed to be assumed. Only valid when credential_type is 'assumed_role'
	RoleArns pulumi.StringArrayInput
}

func (SecretBackendRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendRoleArgs)(nil)).Elem()
}

