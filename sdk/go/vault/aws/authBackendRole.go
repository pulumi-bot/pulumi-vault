// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an AWS auth backend role in a Vault server. Roles constrain the
// instances or principals that can perform the login operation against the
// backend. See the [Vault
// documentation](https://www.vaultproject.io/docs/auth/aws.html) for more
// information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/aws_auth_backend_role.html.markdown.
type AuthBackendRole struct {
	s *pulumi.ResourceState
}

// NewAuthBackendRole registers a new resource with the given unique name, arguments, and options.
func NewAuthBackendRole(ctx *pulumi.Context,
	name string, args *AuthBackendRoleArgs, opts ...pulumi.ResourceOpt) (*AuthBackendRole, error) {
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowInstanceMigration"] = nil
		inputs["authType"] = nil
		inputs["backend"] = nil
		inputs["boundAccountIds"] = nil
		inputs["boundAmiIds"] = nil
		inputs["boundEc2InstanceIds"] = nil
		inputs["boundIamInstanceProfileArns"] = nil
		inputs["boundIamPrincipalArns"] = nil
		inputs["boundIamRoleArns"] = nil
		inputs["boundRegions"] = nil
		inputs["boundSubnetIds"] = nil
		inputs["boundVpcIds"] = nil
		inputs["disallowReauthentication"] = nil
		inputs["inferredAwsRegion"] = nil
		inputs["inferredEntityType"] = nil
		inputs["maxTtl"] = nil
		inputs["period"] = nil
		inputs["policies"] = nil
		inputs["resolveAwsUniqueIds"] = nil
		inputs["role"] = nil
		inputs["roleTag"] = nil
		inputs["tokenBoundCidrs"] = nil
		inputs["tokenExplicitMaxTtl"] = nil
		inputs["tokenMaxTtl"] = nil
		inputs["tokenNoDefaultPolicy"] = nil
		inputs["tokenNumUses"] = nil
		inputs["tokenPeriod"] = nil
		inputs["tokenPolicies"] = nil
		inputs["tokenTtl"] = nil
		inputs["tokenType"] = nil
		inputs["ttl"] = nil
	} else {
		inputs["allowInstanceMigration"] = args.AllowInstanceMigration
		inputs["authType"] = args.AuthType
		inputs["backend"] = args.Backend
		inputs["boundAccountIds"] = args.BoundAccountIds
		inputs["boundAmiIds"] = args.BoundAmiIds
		inputs["boundEc2InstanceIds"] = args.BoundEc2InstanceIds
		inputs["boundIamInstanceProfileArns"] = args.BoundIamInstanceProfileArns
		inputs["boundIamPrincipalArns"] = args.BoundIamPrincipalArns
		inputs["boundIamRoleArns"] = args.BoundIamRoleArns
		inputs["boundRegions"] = args.BoundRegions
		inputs["boundSubnetIds"] = args.BoundSubnetIds
		inputs["boundVpcIds"] = args.BoundVpcIds
		inputs["disallowReauthentication"] = args.DisallowReauthentication
		inputs["inferredAwsRegion"] = args.InferredAwsRegion
		inputs["inferredEntityType"] = args.InferredEntityType
		inputs["maxTtl"] = args.MaxTtl
		inputs["period"] = args.Period
		inputs["policies"] = args.Policies
		inputs["resolveAwsUniqueIds"] = args.ResolveAwsUniqueIds
		inputs["role"] = args.Role
		inputs["roleTag"] = args.RoleTag
		inputs["tokenBoundCidrs"] = args.TokenBoundCidrs
		inputs["tokenExplicitMaxTtl"] = args.TokenExplicitMaxTtl
		inputs["tokenMaxTtl"] = args.TokenMaxTtl
		inputs["tokenNoDefaultPolicy"] = args.TokenNoDefaultPolicy
		inputs["tokenNumUses"] = args.TokenNumUses
		inputs["tokenPeriod"] = args.TokenPeriod
		inputs["tokenPolicies"] = args.TokenPolicies
		inputs["tokenTtl"] = args.TokenTtl
		inputs["tokenType"] = args.TokenType
		inputs["ttl"] = args.Ttl
	}
	s, err := ctx.RegisterResource("vault:aws/authBackendRole:AuthBackendRole", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackendRole{s: s}, nil
}

// GetAuthBackendRole gets an existing AuthBackendRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackendRole(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthBackendRoleState, opts ...pulumi.ResourceOpt) (*AuthBackendRole, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowInstanceMigration"] = state.AllowInstanceMigration
		inputs["authType"] = state.AuthType
		inputs["backend"] = state.Backend
		inputs["boundAccountIds"] = state.BoundAccountIds
		inputs["boundAmiIds"] = state.BoundAmiIds
		inputs["boundEc2InstanceIds"] = state.BoundEc2InstanceIds
		inputs["boundIamInstanceProfileArns"] = state.BoundIamInstanceProfileArns
		inputs["boundIamPrincipalArns"] = state.BoundIamPrincipalArns
		inputs["boundIamRoleArns"] = state.BoundIamRoleArns
		inputs["boundRegions"] = state.BoundRegions
		inputs["boundSubnetIds"] = state.BoundSubnetIds
		inputs["boundVpcIds"] = state.BoundVpcIds
		inputs["disallowReauthentication"] = state.DisallowReauthentication
		inputs["inferredAwsRegion"] = state.InferredAwsRegion
		inputs["inferredEntityType"] = state.InferredEntityType
		inputs["maxTtl"] = state.MaxTtl
		inputs["period"] = state.Period
		inputs["policies"] = state.Policies
		inputs["resolveAwsUniqueIds"] = state.ResolveAwsUniqueIds
		inputs["role"] = state.Role
		inputs["roleTag"] = state.RoleTag
		inputs["tokenBoundCidrs"] = state.TokenBoundCidrs
		inputs["tokenExplicitMaxTtl"] = state.TokenExplicitMaxTtl
		inputs["tokenMaxTtl"] = state.TokenMaxTtl
		inputs["tokenNoDefaultPolicy"] = state.TokenNoDefaultPolicy
		inputs["tokenNumUses"] = state.TokenNumUses
		inputs["tokenPeriod"] = state.TokenPeriod
		inputs["tokenPolicies"] = state.TokenPolicies
		inputs["tokenTtl"] = state.TokenTtl
		inputs["tokenType"] = state.TokenType
		inputs["ttl"] = state.Ttl
	}
	s, err := ctx.ReadResource("vault:aws/authBackendRole:AuthBackendRole", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackendRole{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthBackendRole) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthBackendRole) ID() pulumi.IDOutput {
	return r.s.ID()
}

// If set to `true`, allows migration of
// the underlying instance where the client resides.
func (r *AuthBackendRole) AllowInstanceMigration() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["allowInstanceMigration"])
}

// The auth type permitted for this role. Valid choices
// are `ec2` and `iam`. Defaults to `iam`.
func (r *AuthBackendRole) AuthType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["authType"])
}

// Unique name of the auth backend to configure.
func (r *AuthBackendRole) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// If set, defines a constraint on the EC2
// instances that can perform the login operation that they should be using the
// account ID specified by this field. `authType` must be set to `ec2` or
// `inferredEntityType` must be set to `ec2Instance` to use this constraint.
func (r *AuthBackendRole) BoundAccountIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["boundAccountIds"])
}

// If set, defines a constraint on the EC2 instances
// that can perform the login operation that they should be using the AMI ID
// specified by this field. `authType` must be set to `ec2` or
// `inferredEntityType` must be set to `ec2Instance` to use this constraint.
func (r *AuthBackendRole) BoundAmiIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["boundAmiIds"])
}

// Only EC2 instances that match this instance ID will be permitted to log in.
func (r *AuthBackendRole) BoundEc2InstanceIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["boundEc2InstanceIds"])
}

// If set, defines a constraint on
// the EC2 instances that can perform the login operation that they must be
// associated with an IAM instance profile ARN which has a prefix that matches
// the value specified by this field. The value is prefix-matched as though it
// were a glob ending in `*`. `authType` must be set to `ec2` or
// `inferredEntityType` must be set to `ec2Instance` to use this constraint.
func (r *AuthBackendRole) BoundIamInstanceProfileArns() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["boundIamInstanceProfileArns"])
}

// If set, defines the IAM principal that
// must be authenticated when `authType` is set to `iam`. Wildcards are
// supported at the end of the ARN.
func (r *AuthBackendRole) BoundIamPrincipalArns() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["boundIamPrincipalArns"])
}

// If set, defines a constraint on the EC2
// instances that can perform the login operation that they must match the IAM
// role ARN specified by this field. `authType` must be set to `ec2` or
// `inferredEntityType` must be set to `ec2Instance` to use this constraint.
func (r *AuthBackendRole) BoundIamRoleArns() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["boundIamRoleArns"])
}

// If set, defines a constraint on the EC2 instances
// that can perform the login operation that the region in their identity
// document must match the one specified by this field. `authType` must be set
// to `ec2` or `inferredEntityType` must be set to `ec2Instance` to use this
// constraint.
func (r *AuthBackendRole) BoundRegions() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["boundRegions"])
}

// If set, defines a constraint on the EC2
// instances that can perform the login operation that they be associated with
// the subnet ID that matches the value specified by this field. `authType`
// must be set to `ec2` or `inferredEntityType` must be set to `ec2Instance`
// to use this constraint.
func (r *AuthBackendRole) BoundSubnetIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["boundSubnetIds"])
}

// If set, defines a constraint on the EC2 instances
// that can perform the login operation that they be associated with the VPC ID
// that matches the value specified by this field. `authType` must be set to
// `ec2` or `inferredEntityType` must be set to `ec2Instance` to use this
// constraint.
func (r *AuthBackendRole) BoundVpcIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["boundVpcIds"])
}

// IF set to `true`, only allows a
// single token to be granted per instance ID. This can only be set when
// `authType` is set to `ec2`.
func (r *AuthBackendRole) DisallowReauthentication() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["disallowReauthentication"])
}

// When `inferredEntityType` is set, this
// is the region to search for the inferred entities. Required if
// `inferredEntityType` is set. This only applies when `authType` is set to
// `iam`.
func (r *AuthBackendRole) InferredAwsRegion() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["inferredAwsRegion"])
}

// If set, instructs Vault to turn on
// inferencing. The only valid value is `ec2Instance`, which instructs Vault to
// infer that the role comes from an EC2 instance in an IAM instance profile.
// This only applies when `authType` is set to `iam`.
func (r *AuthBackendRole) InferredEntityType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["inferredEntityType"])
}

// The maximum allowed lifetime of tokens
// issued using this role, provided as a number of seconds.
func (r *AuthBackendRole) MaxTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxTtl"])
}

// If set, indicates that the
// token generated using this role should never expire. The token should be renewed within the
// duration specified by this value. At each renewal, the token's TTL will be set to the
// value of this field. Specified in seconds.
func (r *AuthBackendRole) Period() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["period"])
}

// An array of strings
// specifying the policies to be set on tokens issued using this role.
func (r *AuthBackendRole) Policies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["policies"])
}

// If set to `true`, the
// `boundIamPrincipalArns` are resolved to [AWS Unique
// IDs](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids)
// for the bound principal ARN. This field is ignored when a
// `boundIamPrincipalArn` ends in a wildcard. Resolving to unique IDs more
// closely mimics the behavior of AWS services in that if an IAM user or role is
// deleted and a new one is recreated with the same name, those new users or
// roles won't get access to roles in Vault that were permissioned to the prior
// principals of the same name. Defaults to `true`.
// Once set to `true`, this cannot be changed to `false` without recreating the role.
func (r *AuthBackendRole) ResolveAwsUniqueIds() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["resolveAwsUniqueIds"])
}

// The name of the role.
func (r *AuthBackendRole) Role() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["role"])
}

// If set, enable role tags for this role. The value set
// for this field should be the key of the tag on the EC2 instance. `authType`
// must be set to `ec2` or `inferredEntityType` must be set to `ec2Instance`
// to use this constraint.
func (r *AuthBackendRole) RoleTag() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["roleTag"])
}

// List of CIDR blocks; if set, specifies blocks of IP
// addresses which can authenticate successfully, and ties the resulting token to these blocks
// as well.
func (r *AuthBackendRole) TokenBoundCidrs() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tokenBoundCidrs"])
}

// If set, will encode an
// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
// onto the token in number of seconds. This is a hard cap even if `tokenTtl` and
// `tokenMaxTtl` would otherwise allow a renewal.
func (r *AuthBackendRole) TokenExplicitMaxTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenExplicitMaxTtl"])
}

// The maximum lifetime for generated tokens in number of seconds.
// Its current value will be referenced at renewal time.
func (r *AuthBackendRole) TokenMaxTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenMaxTtl"])
}

// If set, the default policy will not be set on
// generated tokens; otherwise it will be added to the policies set in token_policies.
func (r *AuthBackendRole) TokenNoDefaultPolicy() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["tokenNoDefaultPolicy"])
}

// The
// [period](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls),
// if any, in number of seconds to set on the token.
func (r *AuthBackendRole) TokenNumUses() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenNumUses"])
}

// If set, indicates that the
// token generated using this role should never expire. The token should be renewed within the
// duration specified by this value. At each renewal, the token's TTL will be set to the
// value of this field. Specified in seconds.
func (r *AuthBackendRole) TokenPeriod() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenPeriod"])
}

// List of policies to encode onto generated tokens. Depending
// on the auth method, this list may be supplemented by user/group/other values.
func (r *AuthBackendRole) TokenPolicies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tokenPolicies"])
}

// The incremental lifetime for generated tokens in number of seconds.
// Its current value will be referenced at renewal time.
func (r *AuthBackendRole) TokenTtl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tokenTtl"])
}

// The type of token that should be generated. Can be `service`,
// `batch`, or `default` to use the mount's tuned default (which unless changed will be
// `service` tokens). For token store roles, there are two additional possibilities:
// `default-service` and `default-batch` which specify the type to return unless the client
// requests a different type at generation time.
func (r *AuthBackendRole) TokenType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tokenType"])
}

// The TTL period of tokens issued
// using this role, provided as a number of seconds.
func (r *AuthBackendRole) Ttl() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["ttl"])
}

// Input properties used for looking up and filtering AuthBackendRole resources.
type AuthBackendRoleState struct {
	// If set to `true`, allows migration of
	// the underlying instance where the client resides.
	AllowInstanceMigration interface{}
	// The auth type permitted for this role. Valid choices
	// are `ec2` and `iam`. Defaults to `iam`.
	AuthType interface{}
	// Unique name of the auth backend to configure.
	Backend interface{}
	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they should be using the
	// account ID specified by this field. `authType` must be set to `ec2` or
	// `inferredEntityType` must be set to `ec2Instance` to use this constraint.
	BoundAccountIds interface{}
	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that they should be using the AMI ID
	// specified by this field. `authType` must be set to `ec2` or
	// `inferredEntityType` must be set to `ec2Instance` to use this constraint.
	BoundAmiIds interface{}
	// Only EC2 instances that match this instance ID will be permitted to log in.
	BoundEc2InstanceIds interface{}
	// If set, defines a constraint on
	// the EC2 instances that can perform the login operation that they must be
	// associated with an IAM instance profile ARN which has a prefix that matches
	// the value specified by this field. The value is prefix-matched as though it
	// were a glob ending in `*`. `authType` must be set to `ec2` or
	// `inferredEntityType` must be set to `ec2Instance` to use this constraint.
	BoundIamInstanceProfileArns interface{}
	// If set, defines the IAM principal that
	// must be authenticated when `authType` is set to `iam`. Wildcards are
	// supported at the end of the ARN.
	BoundIamPrincipalArns interface{}
	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they must match the IAM
	// role ARN specified by this field. `authType` must be set to `ec2` or
	// `inferredEntityType` must be set to `ec2Instance` to use this constraint.
	BoundIamRoleArns interface{}
	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that the region in their identity
	// document must match the one specified by this field. `authType` must be set
	// to `ec2` or `inferredEntityType` must be set to `ec2Instance` to use this
	// constraint.
	BoundRegions interface{}
	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they be associated with
	// the subnet ID that matches the value specified by this field. `authType`
	// must be set to `ec2` or `inferredEntityType` must be set to `ec2Instance`
	// to use this constraint.
	BoundSubnetIds interface{}
	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that they be associated with the VPC ID
	// that matches the value specified by this field. `authType` must be set to
	// `ec2` or `inferredEntityType` must be set to `ec2Instance` to use this
	// constraint.
	BoundVpcIds interface{}
	// IF set to `true`, only allows a
	// single token to be granted per instance ID. This can only be set when
	// `authType` is set to `ec2`.
	DisallowReauthentication interface{}
	// When `inferredEntityType` is set, this
	// is the region to search for the inferred entities. Required if
	// `inferredEntityType` is set. This only applies when `authType` is set to
	// `iam`.
	InferredAwsRegion interface{}
	// If set, instructs Vault to turn on
	// inferencing. The only valid value is `ec2Instance`, which instructs Vault to
	// infer that the role comes from an EC2 instance in an IAM instance profile.
	// This only applies when `authType` is set to `iam`.
	InferredEntityType interface{}
	// The maximum allowed lifetime of tokens
	// issued using this role, provided as a number of seconds.
// Deprecated: use `token_max_ttl` instead if you are running Vault >= 1.2
	MaxTtl interface{}
	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
// Deprecated: use `token_period` instead if you are running Vault >= 1.2
	Period interface{}
	// An array of strings
	// specifying the policies to be set on tokens issued using this role.
// Deprecated: use `token_policies` instead if you are running Vault >= 1.2
	Policies interface{}
	// If set to `true`, the
	// `boundIamPrincipalArns` are resolved to [AWS Unique
	// IDs](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids)
	// for the bound principal ARN. This field is ignored when a
	// `boundIamPrincipalArn` ends in a wildcard. Resolving to unique IDs more
	// closely mimics the behavior of AWS services in that if an IAM user or role is
	// deleted and a new one is recreated with the same name, those new users or
	// roles won't get access to roles in Vault that were permissioned to the prior
	// principals of the same name. Defaults to `true`.
	// Once set to `true`, this cannot be changed to `false` without recreating the role.
	ResolveAwsUniqueIds interface{}
	// The name of the role.
	Role interface{}
	// If set, enable role tags for this role. The value set
	// for this field should be the key of the tag on the EC2 instance. `authType`
	// must be set to `ec2` or `inferredEntityType` must be set to `ec2Instance`
	// to use this constraint.
	RoleTag interface{}
	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	TokenBoundCidrs interface{}
	// If set, will encode an
	// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
	// onto the token in number of seconds. This is a hard cap even if `tokenTtl` and
	// `tokenMaxTtl` would otherwise allow a renewal.
	TokenExplicitMaxTtl interface{}
	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenMaxTtl interface{}
	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	TokenNoDefaultPolicy interface{}
	// The
	// [period](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls),
	// if any, in number of seconds to set on the token.
	TokenNumUses interface{}
	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	TokenPeriod interface{}
	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	TokenPolicies interface{}
	// The incremental lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenTtl interface{}
	// The type of token that should be generated. Can be `service`,
	// `batch`, or `default` to use the mount's tuned default (which unless changed will be
	// `service` tokens). For token store roles, there are two additional possibilities:
	// `default-service` and `default-batch` which specify the type to return unless the client
	// requests a different type at generation time.
	TokenType interface{}
	// The TTL period of tokens issued
	// using this role, provided as a number of seconds.
// Deprecated: use `token_ttl` instead if you are running Vault >= 1.2
	Ttl interface{}
}

// The set of arguments for constructing a AuthBackendRole resource.
type AuthBackendRoleArgs struct {
	// If set to `true`, allows migration of
	// the underlying instance where the client resides.
	AllowInstanceMigration interface{}
	// The auth type permitted for this role. Valid choices
	// are `ec2` and `iam`. Defaults to `iam`.
	AuthType interface{}
	// Unique name of the auth backend to configure.
	Backend interface{}
	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they should be using the
	// account ID specified by this field. `authType` must be set to `ec2` or
	// `inferredEntityType` must be set to `ec2Instance` to use this constraint.
	BoundAccountIds interface{}
	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that they should be using the AMI ID
	// specified by this field. `authType` must be set to `ec2` or
	// `inferredEntityType` must be set to `ec2Instance` to use this constraint.
	BoundAmiIds interface{}
	// Only EC2 instances that match this instance ID will be permitted to log in.
	BoundEc2InstanceIds interface{}
	// If set, defines a constraint on
	// the EC2 instances that can perform the login operation that they must be
	// associated with an IAM instance profile ARN which has a prefix that matches
	// the value specified by this field. The value is prefix-matched as though it
	// were a glob ending in `*`. `authType` must be set to `ec2` or
	// `inferredEntityType` must be set to `ec2Instance` to use this constraint.
	BoundIamInstanceProfileArns interface{}
	// If set, defines the IAM principal that
	// must be authenticated when `authType` is set to `iam`. Wildcards are
	// supported at the end of the ARN.
	BoundIamPrincipalArns interface{}
	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they must match the IAM
	// role ARN specified by this field. `authType` must be set to `ec2` or
	// `inferredEntityType` must be set to `ec2Instance` to use this constraint.
	BoundIamRoleArns interface{}
	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that the region in their identity
	// document must match the one specified by this field. `authType` must be set
	// to `ec2` or `inferredEntityType` must be set to `ec2Instance` to use this
	// constraint.
	BoundRegions interface{}
	// If set, defines a constraint on the EC2
	// instances that can perform the login operation that they be associated with
	// the subnet ID that matches the value specified by this field. `authType`
	// must be set to `ec2` or `inferredEntityType` must be set to `ec2Instance`
	// to use this constraint.
	BoundSubnetIds interface{}
	// If set, defines a constraint on the EC2 instances
	// that can perform the login operation that they be associated with the VPC ID
	// that matches the value specified by this field. `authType` must be set to
	// `ec2` or `inferredEntityType` must be set to `ec2Instance` to use this
	// constraint.
	BoundVpcIds interface{}
	// IF set to `true`, only allows a
	// single token to be granted per instance ID. This can only be set when
	// `authType` is set to `ec2`.
	DisallowReauthentication interface{}
	// When `inferredEntityType` is set, this
	// is the region to search for the inferred entities. Required if
	// `inferredEntityType` is set. This only applies when `authType` is set to
	// `iam`.
	InferredAwsRegion interface{}
	// If set, instructs Vault to turn on
	// inferencing. The only valid value is `ec2Instance`, which instructs Vault to
	// infer that the role comes from an EC2 instance in an IAM instance profile.
	// This only applies when `authType` is set to `iam`.
	InferredEntityType interface{}
	// The maximum allowed lifetime of tokens
	// issued using this role, provided as a number of seconds.
// Deprecated: use `token_max_ttl` instead if you are running Vault >= 1.2
	MaxTtl interface{}
	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
// Deprecated: use `token_period` instead if you are running Vault >= 1.2
	Period interface{}
	// An array of strings
	// specifying the policies to be set on tokens issued using this role.
// Deprecated: use `token_policies` instead if you are running Vault >= 1.2
	Policies interface{}
	// If set to `true`, the
	// `boundIamPrincipalArns` are resolved to [AWS Unique
	// IDs](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids)
	// for the bound principal ARN. This field is ignored when a
	// `boundIamPrincipalArn` ends in a wildcard. Resolving to unique IDs more
	// closely mimics the behavior of AWS services in that if an IAM user or role is
	// deleted and a new one is recreated with the same name, those new users or
	// roles won't get access to roles in Vault that were permissioned to the prior
	// principals of the same name. Defaults to `true`.
	// Once set to `true`, this cannot be changed to `false` without recreating the role.
	ResolveAwsUniqueIds interface{}
	// The name of the role.
	Role interface{}
	// If set, enable role tags for this role. The value set
	// for this field should be the key of the tag on the EC2 instance. `authType`
	// must be set to `ec2` or `inferredEntityType` must be set to `ec2Instance`
	// to use this constraint.
	RoleTag interface{}
	// List of CIDR blocks; if set, specifies blocks of IP
	// addresses which can authenticate successfully, and ties the resulting token to these blocks
	// as well.
	TokenBoundCidrs interface{}
	// If set, will encode an
	// [explicit max TTL](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls)
	// onto the token in number of seconds. This is a hard cap even if `tokenTtl` and
	// `tokenMaxTtl` would otherwise allow a renewal.
	TokenExplicitMaxTtl interface{}
	// The maximum lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenMaxTtl interface{}
	// If set, the default policy will not be set on
	// generated tokens; otherwise it will be added to the policies set in token_policies.
	TokenNoDefaultPolicy interface{}
	// The
	// [period](https://www.vaultproject.io/docs/concepts/tokens.html#token-time-to-live-periodic-tokens-and-explicit-max-ttls),
	// if any, in number of seconds to set on the token.
	TokenNumUses interface{}
	// If set, indicates that the
	// token generated using this role should never expire. The token should be renewed within the
	// duration specified by this value. At each renewal, the token's TTL will be set to the
	// value of this field. Specified in seconds.
	TokenPeriod interface{}
	// List of policies to encode onto generated tokens. Depending
	// on the auth method, this list may be supplemented by user/group/other values.
	TokenPolicies interface{}
	// The incremental lifetime for generated tokens in number of seconds.
	// Its current value will be referenced at renewal time.
	TokenTtl interface{}
	// The type of token that should be generated. Can be `service`,
	// `batch`, or `default` to use the mount's tuned default (which unless changed will be
	// `service` tokens). For token store roles, there are two additional possibilities:
	// `default-service` and `default-batch` which specify the type to return unless the client
	// requests a different type at generation time.
	TokenType interface{}
	// The TTL period of tokens issued
	// using this role, provided as a number of seconds.
// Deprecated: use `token_ttl` instead if you are running Vault >= 1.2
	Ttl interface{}
}
