// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/aws_auth_backend_client.html.markdown.
type AuthBackendClient struct {
	s *pulumi.ResourceState
}

// NewAuthBackendClient registers a new resource with the given unique name, arguments, and options.
func NewAuthBackendClient(ctx *pulumi.Context,
	name string, args *AuthBackendClientArgs, opts ...pulumi.ResourceOpt) (*AuthBackendClient, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessKey"] = nil
		inputs["backend"] = nil
		inputs["ec2Endpoint"] = nil
		inputs["iamEndpoint"] = nil
		inputs["iamServerIdHeaderValue"] = nil
		inputs["secretKey"] = nil
		inputs["stsEndpoint"] = nil
	} else {
		inputs["accessKey"] = args.AccessKey
		inputs["backend"] = args.Backend
		inputs["ec2Endpoint"] = args.Ec2Endpoint
		inputs["iamEndpoint"] = args.IamEndpoint
		inputs["iamServerIdHeaderValue"] = args.IamServerIdHeaderValue
		inputs["secretKey"] = args.SecretKey
		inputs["stsEndpoint"] = args.StsEndpoint
	}
	s, err := ctx.RegisterResource("vault:aws/authBackendClient:AuthBackendClient", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackendClient{s: s}, nil
}

// GetAuthBackendClient gets an existing AuthBackendClient resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackendClient(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthBackendClientState, opts ...pulumi.ResourceOpt) (*AuthBackendClient, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessKey"] = state.AccessKey
		inputs["backend"] = state.Backend
		inputs["ec2Endpoint"] = state.Ec2Endpoint
		inputs["iamEndpoint"] = state.IamEndpoint
		inputs["iamServerIdHeaderValue"] = state.IamServerIdHeaderValue
		inputs["secretKey"] = state.SecretKey
		inputs["stsEndpoint"] = state.StsEndpoint
	}
	s, err := ctx.ReadResource("vault:aws/authBackendClient:AuthBackendClient", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackendClient{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthBackendClient) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthBackendClient) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The AWS access key that Vault should use for the
// auth backend.
func (r *AuthBackendClient) AccessKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessKey"])
}

// The path the AWS auth backend being configured was
// mounted at.  Defaults to `aws`.
func (r *AuthBackendClient) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// Override the URL Vault uses when making EC2 API
// calls.
func (r *AuthBackendClient) Ec2Endpoint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ec2Endpoint"])
}

// Override the URL Vault uses when making IAM API
// calls.
func (r *AuthBackendClient) IamEndpoint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["iamEndpoint"])
}

// The value to require in the
// `X-Vault-AWS-IAM-Server-ID` header as part of `GetCallerIdentity` requests
// that are used in the IAM auth method.
func (r *AuthBackendClient) IamServerIdHeaderValue() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["iamServerIdHeaderValue"])
}

// The AWS secret key that Vault should use for the
// auth backend.
func (r *AuthBackendClient) SecretKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["secretKey"])
}

// Override the URL Vault uses when making STS API
// calls.
func (r *AuthBackendClient) StsEndpoint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["stsEndpoint"])
}

// Input properties used for looking up and filtering AuthBackendClient resources.
type AuthBackendClientState struct {
	// The AWS access key that Vault should use for the
	// auth backend.
	AccessKey interface{}
	// The path the AWS auth backend being configured was
	// mounted at.  Defaults to `aws`.
	Backend interface{}
	// Override the URL Vault uses when making EC2 API
	// calls.
	Ec2Endpoint interface{}
	// Override the URL Vault uses when making IAM API
	// calls.
	IamEndpoint interface{}
	// The value to require in the
	// `X-Vault-AWS-IAM-Server-ID` header as part of `GetCallerIdentity` requests
	// that are used in the IAM auth method.
	IamServerIdHeaderValue interface{}
	// The AWS secret key that Vault should use for the
	// auth backend.
	SecretKey interface{}
	// Override the URL Vault uses when making STS API
	// calls.
	StsEndpoint interface{}
}

// The set of arguments for constructing a AuthBackendClient resource.
type AuthBackendClientArgs struct {
	// The AWS access key that Vault should use for the
	// auth backend.
	AccessKey interface{}
	// The path the AWS auth backend being configured was
	// mounted at.  Defaults to `aws`.
	Backend interface{}
	// Override the URL Vault uses when making EC2 API
	// calls.
	Ec2Endpoint interface{}
	// Override the URL Vault uses when making IAM API
	// calls.
	IamEndpoint interface{}
	// The value to require in the
	// `X-Vault-AWS-IAM-Server-ID` header as part of `GetCallerIdentity` requests
	// that are used in the IAM auth method.
	IamServerIdHeaderValue interface{}
	// The AWS secret key that Vault should use for the
	// auth backend.
	SecretKey interface{}
	// Override the URL Vault uses when making STS API
	// calls.
	StsEndpoint interface{}
}
