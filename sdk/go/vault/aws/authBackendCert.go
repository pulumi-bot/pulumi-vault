// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/aws_auth_backend_cert.html.markdown.
type AuthBackendCert struct {
	s *pulumi.ResourceState
}

// NewAuthBackendCert registers a new resource with the given unique name, arguments, and options.
func NewAuthBackendCert(ctx *pulumi.Context,
	name string, args *AuthBackendCertArgs, opts ...pulumi.ResourceOpt) (*AuthBackendCert, error) {
	if args == nil || args.AwsPublicCert == nil {
		return nil, errors.New("missing required argument 'AwsPublicCert'")
	}
	if args == nil || args.CertName == nil {
		return nil, errors.New("missing required argument 'CertName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["awsPublicCert"] = nil
		inputs["backend"] = nil
		inputs["certName"] = nil
		inputs["type"] = nil
	} else {
		inputs["awsPublicCert"] = args.AwsPublicCert
		inputs["backend"] = args.Backend
		inputs["certName"] = args.CertName
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("vault:aws/authBackendCert:AuthBackendCert", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackendCert{s: s}, nil
}

// GetAuthBackendCert gets an existing AuthBackendCert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackendCert(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthBackendCertState, opts ...pulumi.ResourceOpt) (*AuthBackendCert, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["awsPublicCert"] = state.AwsPublicCert
		inputs["backend"] = state.Backend
		inputs["certName"] = state.CertName
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("vault:aws/authBackendCert:AuthBackendCert", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackendCert{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthBackendCert) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthBackendCert) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The  Base64 encoded AWS Public key required to
// verify PKCS7 signature of the EC2 instance metadata. You can find this key in
// the [AWS
// documentation](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html).
func (r *AuthBackendCert) AwsPublicCert() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["awsPublicCert"])
}

// The path the AWS auth backend being configured was
// mounted at.  Defaults to `aws`.
func (r *AuthBackendCert) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// The name of the certificate.
func (r *AuthBackendCert) CertName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["certName"])
}

// Either "pkcs7" or "identity", indicating the type of
// document which can be verified using the given certificate. Defaults to
// "pkcs7".
func (r *AuthBackendCert) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering AuthBackendCert resources.
type AuthBackendCertState struct {
	// The  Base64 encoded AWS Public key required to
	// verify PKCS7 signature of the EC2 instance metadata. You can find this key in
	// the [AWS
	// documentation](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html).
	AwsPublicCert interface{}
	// The path the AWS auth backend being configured was
	// mounted at.  Defaults to `aws`.
	Backend interface{}
	// The name of the certificate.
	CertName interface{}
	// Either "pkcs7" or "identity", indicating the type of
	// document which can be verified using the given certificate. Defaults to
	// "pkcs7".
	Type interface{}
}

// The set of arguments for constructing a AuthBackendCert resource.
type AuthBackendCertArgs struct {
	// The  Base64 encoded AWS Public key required to
	// verify PKCS7 signature of the EC2 instance metadata. You can find this key in
	// the [AWS
	// documentation](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html).
	AwsPublicCert interface{}
	// The path the AWS auth backend being configured was
	// mounted at.  Defaults to `aws`.
	Backend interface{}
	// The name of the certificate.
	CertName interface{}
	// Either "pkcs7" or "identity", indicating the type of
	// document which can be verified using the given certificate. Defaults to
	// "pkcs7".
	Type interface{}
}
