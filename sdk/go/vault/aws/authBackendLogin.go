// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Logs into a Vault server using an AWS auth backend. Login can be
// accomplished using a signed identity request from IAM or using ec2
// instance metadata. For more information, see the [Vault
// documentation](https://www.vaultproject.io/docs/auth/aws.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/aws_auth_backend_login.html.markdown.
type AuthBackendLogin struct {
	s *pulumi.ResourceState
}

// NewAuthBackendLogin registers a new resource with the given unique name, arguments, and options.
func NewAuthBackendLogin(ctx *pulumi.Context,
	name string, args *AuthBackendLoginArgs, opts ...pulumi.ResourceOpt) (*AuthBackendLogin, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backend"] = nil
		inputs["iamHttpRequestMethod"] = nil
		inputs["iamRequestBody"] = nil
		inputs["iamRequestHeaders"] = nil
		inputs["iamRequestUrl"] = nil
		inputs["identity"] = nil
		inputs["nonce"] = nil
		inputs["pkcs7"] = nil
		inputs["role"] = nil
		inputs["signature"] = nil
	} else {
		inputs["backend"] = args.Backend
		inputs["iamHttpRequestMethod"] = args.IamHttpRequestMethod
		inputs["iamRequestBody"] = args.IamRequestBody
		inputs["iamRequestHeaders"] = args.IamRequestHeaders
		inputs["iamRequestUrl"] = args.IamRequestUrl
		inputs["identity"] = args.Identity
		inputs["nonce"] = args.Nonce
		inputs["pkcs7"] = args.Pkcs7
		inputs["role"] = args.Role
		inputs["signature"] = args.Signature
	}
	inputs["accessor"] = nil
	inputs["authType"] = nil
	inputs["clientToken"] = nil
	inputs["leaseDuration"] = nil
	inputs["leaseStartTime"] = nil
	inputs["metadata"] = nil
	inputs["policies"] = nil
	inputs["renewable"] = nil
	s, err := ctx.RegisterResource("vault:aws/authBackendLogin:AuthBackendLogin", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackendLogin{s: s}, nil
}

// GetAuthBackendLogin gets an existing AuthBackendLogin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackendLogin(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthBackendLoginState, opts ...pulumi.ResourceOpt) (*AuthBackendLogin, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessor"] = state.Accessor
		inputs["authType"] = state.AuthType
		inputs["backend"] = state.Backend
		inputs["clientToken"] = state.ClientToken
		inputs["iamHttpRequestMethod"] = state.IamHttpRequestMethod
		inputs["iamRequestBody"] = state.IamRequestBody
		inputs["iamRequestHeaders"] = state.IamRequestHeaders
		inputs["iamRequestUrl"] = state.IamRequestUrl
		inputs["identity"] = state.Identity
		inputs["leaseDuration"] = state.LeaseDuration
		inputs["leaseStartTime"] = state.LeaseStartTime
		inputs["metadata"] = state.Metadata
		inputs["nonce"] = state.Nonce
		inputs["pkcs7"] = state.Pkcs7
		inputs["policies"] = state.Policies
		inputs["renewable"] = state.Renewable
		inputs["role"] = state.Role
		inputs["signature"] = state.Signature
	}
	s, err := ctx.ReadResource("vault:aws/authBackendLogin:AuthBackendLogin", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackendLogin{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthBackendLogin) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthBackendLogin) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The token's accessor.
func (r *AuthBackendLogin) Accessor() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accessor"])
}

// The authentication type used to generate this token.
func (r *AuthBackendLogin) AuthType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["authType"])
}

// The unique name of the AWS auth backend. Defaults to
// 'aws'.
func (r *AuthBackendLogin) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// The token returned by Vault.
func (r *AuthBackendLogin) ClientToken() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientToken"])
}

// The HTTP method used in the signed IAM
// request.
func (r *AuthBackendLogin) IamHttpRequestMethod() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["iamHttpRequestMethod"])
}

// The base64-encoded body of the signed
// request.
func (r *AuthBackendLogin) IamRequestBody() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["iamRequestBody"])
}

// The base64-encoded, JSON serialized
// representation of the GetCallerIdentity HTTP request headers.
func (r *AuthBackendLogin) IamRequestHeaders() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["iamRequestHeaders"])
}

// The base64-encoded HTTP URL used in the signed
// request.
func (r *AuthBackendLogin) IamRequestUrl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["iamRequestUrl"])
}

// The base64-encoded EC2 instance identity document to
// authenticate with. Can be retrieved from the EC2 metadata server.
func (r *AuthBackendLogin) Identity() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["identity"])
}

// The duration in seconds the token will be valid, relative
// to the time in `leaseStartTime`.
func (r *AuthBackendLogin) LeaseDuration() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["leaseDuration"])
}

// Time at which the lease was read, using the clock of the system where Terraform was running
func (r *AuthBackendLogin) LeaseStartTime() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["leaseStartTime"])
}

// A map of information returned by the Vault server about the
// authentication used to generate this token.
func (r *AuthBackendLogin) Metadata() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["metadata"])
}

// The unique nonce to be used for login requests. Can be
// set to a user-specified value, or will contain the server-generated value
// once a token is issued. EC2 instances can only acquire a single token until
// the whitelist is tidied again unless they keep track of this nonce.
func (r *AuthBackendLogin) Nonce() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["nonce"])
}

// The PKCS#7 signature of the identity document to
// authenticate with, with all newline characters removed. Can be retrieved from
// the EC2 metadata server.
func (r *AuthBackendLogin) Pkcs7() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["pkcs7"])
}

// The Vault policies assigned to this token.
func (r *AuthBackendLogin) Policies() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["policies"])
}

// Set to true if the token can be extended through renewal.
func (r *AuthBackendLogin) Renewable() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["renewable"])
}

// The name of the AWS auth backend role to create tokens
// against.
func (r *AuthBackendLogin) Role() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["role"])
}

// The base64-encoded SHA256 RSA signature of the
// instance identity document to authenticate with, with all newline characters
// removed. Can be retrieved from the EC2 metadata server.
func (r *AuthBackendLogin) Signature() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["signature"])
}

// Input properties used for looking up and filtering AuthBackendLogin resources.
type AuthBackendLoginState struct {
	// The token's accessor.
	Accessor interface{}
	// The authentication type used to generate this token.
	AuthType interface{}
	// The unique name of the AWS auth backend. Defaults to
	// 'aws'.
	Backend interface{}
	// The token returned by Vault.
	ClientToken interface{}
	// The HTTP method used in the signed IAM
	// request.
	IamHttpRequestMethod interface{}
	// The base64-encoded body of the signed
	// request.
	IamRequestBody interface{}
	// The base64-encoded, JSON serialized
	// representation of the GetCallerIdentity HTTP request headers.
	IamRequestHeaders interface{}
	// The base64-encoded HTTP URL used in the signed
	// request.
	IamRequestUrl interface{}
	// The base64-encoded EC2 instance identity document to
	// authenticate with. Can be retrieved from the EC2 metadata server.
	Identity interface{}
	// The duration in seconds the token will be valid, relative
	// to the time in `leaseStartTime`.
	LeaseDuration interface{}
	// Time at which the lease was read, using the clock of the system where Terraform was running
	LeaseStartTime interface{}
	// A map of information returned by the Vault server about the
	// authentication used to generate this token.
	Metadata interface{}
	// The unique nonce to be used for login requests. Can be
	// set to a user-specified value, or will contain the server-generated value
	// once a token is issued. EC2 instances can only acquire a single token until
	// the whitelist is tidied again unless they keep track of this nonce.
	Nonce interface{}
	// The PKCS#7 signature of the identity document to
	// authenticate with, with all newline characters removed. Can be retrieved from
	// the EC2 metadata server.
	Pkcs7 interface{}
	// The Vault policies assigned to this token.
	Policies interface{}
	// Set to true if the token can be extended through renewal.
	Renewable interface{}
	// The name of the AWS auth backend role to create tokens
	// against.
	Role interface{}
	// The base64-encoded SHA256 RSA signature of the
	// instance identity document to authenticate with, with all newline characters
	// removed. Can be retrieved from the EC2 metadata server.
	Signature interface{}
}

// The set of arguments for constructing a AuthBackendLogin resource.
type AuthBackendLoginArgs struct {
	// The unique name of the AWS auth backend. Defaults to
	// 'aws'.
	Backend interface{}
	// The HTTP method used in the signed IAM
	// request.
	IamHttpRequestMethod interface{}
	// The base64-encoded body of the signed
	// request.
	IamRequestBody interface{}
	// The base64-encoded, JSON serialized
	// representation of the GetCallerIdentity HTTP request headers.
	IamRequestHeaders interface{}
	// The base64-encoded HTTP URL used in the signed
	// request.
	IamRequestUrl interface{}
	// The base64-encoded EC2 instance identity document to
	// authenticate with. Can be retrieved from the EC2 metadata server.
	Identity interface{}
	// The unique nonce to be used for login requests. Can be
	// set to a user-specified value, or will contain the server-generated value
	// once a token is issued. EC2 instances can only acquire a single token until
	// the whitelist is tidied again unless they keep track of this nonce.
	Nonce interface{}
	// The PKCS#7 signature of the identity document to
	// authenticate with, with all newline characters removed. Can be retrieved from
	// the EC2 metadata server.
	Pkcs7 interface{}
	// The name of the AWS auth backend role to create tokens
	// against.
	Role interface{}
	// The base64-encoded SHA256 RSA signature of the
	// instance identity document to authenticate with, with all newline characters
	// removed. Can be retrieved from the EC2 metadata server.
	Signature interface{}
}
