// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetes

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Kubernetes auth backend config in a Vault server. See the [Vault
// documentation](https://www.vaultproject.io/docs/auth/kubernetes.html) for more
// information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/kubernetes_auth_backend_config.html.markdown.
type AuthBackendConfig struct {
	s *pulumi.ResourceState
}

// NewAuthBackendConfig registers a new resource with the given unique name, arguments, and options.
func NewAuthBackendConfig(ctx *pulumi.Context,
	name string, args *AuthBackendConfigArgs, opts ...pulumi.ResourceOpt) (*AuthBackendConfig, error) {
	if args == nil || args.KubernetesHost == nil {
		return nil, errors.New("missing required argument 'KubernetesHost'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backend"] = nil
		inputs["kubernetesCaCert"] = nil
		inputs["kubernetesHost"] = nil
		inputs["pemKeys"] = nil
		inputs["tokenReviewerJwt"] = nil
	} else {
		inputs["backend"] = args.Backend
		inputs["kubernetesCaCert"] = args.KubernetesCaCert
		inputs["kubernetesHost"] = args.KubernetesHost
		inputs["pemKeys"] = args.PemKeys
		inputs["tokenReviewerJwt"] = args.TokenReviewerJwt
	}
	s, err := ctx.RegisterResource("vault:kubernetes/authBackendConfig:AuthBackendConfig", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackendConfig{s: s}, nil
}

// GetAuthBackendConfig gets an existing AuthBackendConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackendConfig(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthBackendConfigState, opts ...pulumi.ResourceOpt) (*AuthBackendConfig, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backend"] = state.Backend
		inputs["kubernetesCaCert"] = state.KubernetesCaCert
		inputs["kubernetesHost"] = state.KubernetesHost
		inputs["pemKeys"] = state.PemKeys
		inputs["tokenReviewerJwt"] = state.TokenReviewerJwt
	}
	s, err := ctx.ReadResource("vault:kubernetes/authBackendConfig:AuthBackendConfig", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackendConfig{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthBackendConfig) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthBackendConfig) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Unique name of the kubernetes backend to configure.
func (r *AuthBackendConfig) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.
func (r *AuthBackendConfig) KubernetesCaCert() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["kubernetesCaCert"])
}

// Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.
func (r *AuthBackendConfig) KubernetesHost() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["kubernetesHost"])
}

// List of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys. 
func (r *AuthBackendConfig) PemKeys() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["pemKeys"])
}

// A service account JWT used to access the TokenReview API to validate other JWTs during login. If not set the JWT used for login will be used to access the API.
func (r *AuthBackendConfig) TokenReviewerJwt() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tokenReviewerJwt"])
}

// Input properties used for looking up and filtering AuthBackendConfig resources.
type AuthBackendConfigState struct {
	// Unique name of the kubernetes backend to configure.
	Backend interface{}
	// PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.
	KubernetesCaCert interface{}
	// Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.
	KubernetesHost interface{}
	// List of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys. 
	PemKeys interface{}
	// A service account JWT used to access the TokenReview API to validate other JWTs during login. If not set the JWT used for login will be used to access the API.
	TokenReviewerJwt interface{}
}

// The set of arguments for constructing a AuthBackendConfig resource.
type AuthBackendConfigArgs struct {
	// Unique name of the kubernetes backend to configure.
	Backend interface{}
	// PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.
	KubernetesCaCert interface{}
	// Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.
	KubernetesHost interface{}
	// List of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys. 
	PemKeys interface{}
	// A service account JWT used to access the TokenReview API to validate other JWTs during login. If not set the JWT used for login will be used to access the API.
	TokenReviewerJwt interface{}
}
