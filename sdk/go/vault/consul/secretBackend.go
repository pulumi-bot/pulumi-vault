// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package consul

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type SecretBackend struct {
	pulumi.CustomResourceState

	// Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
	Address pulumi.StringOutput `pulumi:"address"`
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrOutput `pulumi:"defaultLeaseTtlSeconds"`
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntPtrOutput `pulumi:"maxLeaseTtlSeconds"`
	// Unique name of the Vault Consul mount to configure
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// Specifies the URL scheme to use. Defaults to "http".
	Scheme pulumi.StringPtrOutput `pulumi:"scheme"`
	// Specifies the Consul ACL token to use. This must be a management type token.
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewSecretBackend registers a new resource with the given unique name, arguments, and options.
func NewSecretBackend(ctx *pulumi.Context,
	name string, args *SecretBackendArgs, opts ...pulumi.ResourceOption) (*SecretBackend, error) {
	if args == nil || args.Address == nil {
		return nil, errors.New("missing required argument 'Address'")
	}
	if args == nil || args.Token == nil {
		return nil, errors.New("missing required argument 'Token'")
	}
	if args == nil {
		args = &SecretBackendArgs{}
	}
	var resource SecretBackend
	err := ctx.RegisterResource("vault:consul/secretBackend:SecretBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretBackend gets an existing SecretBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretBackendState, opts ...pulumi.ResourceOption) (*SecretBackend, error) {
	var resource SecretBackend
	err := ctx.ReadResource("vault:consul/secretBackend:SecretBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretBackend resources.
type secretBackendState struct {
	// Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
	Address *string `pulumi:"address"`
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds *int `pulumi:"defaultLeaseTtlSeconds"`
	// Human-friendly description of the mount for the backend.
	Description *string `pulumi:"description"`
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// Unique name of the Vault Consul mount to configure
	Path *string `pulumi:"path"`
	// Specifies the URL scheme to use. Defaults to "http".
	Scheme *string `pulumi:"scheme"`
	// Specifies the Consul ACL token to use. This must be a management type token.
	Token *string `pulumi:"token"`
}

type SecretBackendState struct {
	// Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
	Address pulumi.StringPtrInput
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrInput
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrInput
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// Unique name of the Vault Consul mount to configure
	Path pulumi.StringPtrInput
	// Specifies the URL scheme to use. Defaults to "http".
	Scheme pulumi.StringPtrInput
	// Specifies the Consul ACL token to use. This must be a management type token.
	Token pulumi.StringPtrInput
}

func (SecretBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendState)(nil)).Elem()
}

type secretBackendArgs struct {
	// Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
	Address string `pulumi:"address"`
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds *int `pulumi:"defaultLeaseTtlSeconds"`
	// Human-friendly description of the mount for the backend.
	Description *string `pulumi:"description"`
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds *int `pulumi:"maxLeaseTtlSeconds"`
	// Unique name of the Vault Consul mount to configure
	Path *string `pulumi:"path"`
	// Specifies the URL scheme to use. Defaults to "http".
	Scheme *string `pulumi:"scheme"`
	// Specifies the Consul ACL token to use. This must be a management type token.
	Token string `pulumi:"token"`
}

// The set of arguments for constructing a SecretBackend resource.
type SecretBackendArgs struct {
	// Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
	Address pulumi.StringInput
	// Default lease duration for secrets in seconds
	DefaultLeaseTtlSeconds pulumi.IntPtrInput
	// Human-friendly description of the mount for the backend.
	Description pulumi.StringPtrInput
	// Maximum possible lease duration for secrets in seconds
	MaxLeaseTtlSeconds pulumi.IntPtrInput
	// Unique name of the Vault Consul mount to configure
	Path pulumi.StringPtrInput
	// Specifies the URL scheme to use. Defaults to "http".
	Scheme pulumi.StringPtrInput
	// Specifies the Consul ACL token to use. This must be a management type token.
	Token pulumi.StringInput
}

func (SecretBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretBackendArgs)(nil)).Elem()
}

