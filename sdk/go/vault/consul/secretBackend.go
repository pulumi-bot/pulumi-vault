// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package consul

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/consul_secret_backend.html.markdown.
type SecretBackend struct {
	s *pulumi.ResourceState
}

// NewSecretBackend registers a new resource with the given unique name, arguments, and options.
func NewSecretBackend(ctx *pulumi.Context,
	name string, args *SecretBackendArgs, opts ...pulumi.ResourceOpt) (*SecretBackend, error) {
	if args == nil || args.Address == nil {
		return nil, errors.New("missing required argument 'Address'")
	}
	if args == nil || args.Token == nil {
		return nil, errors.New("missing required argument 'Token'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["address"] = nil
		inputs["defaultLeaseTtlSeconds"] = nil
		inputs["description"] = nil
		inputs["maxLeaseTtlSeconds"] = nil
		inputs["path"] = nil
		inputs["scheme"] = nil
		inputs["token"] = nil
	} else {
		inputs["address"] = args.Address
		inputs["defaultLeaseTtlSeconds"] = args.DefaultLeaseTtlSeconds
		inputs["description"] = args.Description
		inputs["maxLeaseTtlSeconds"] = args.MaxLeaseTtlSeconds
		inputs["path"] = args.Path
		inputs["scheme"] = args.Scheme
		inputs["token"] = args.Token
	}
	s, err := ctx.RegisterResource("vault:consul/secretBackend:SecretBackend", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackend{s: s}, nil
}

// GetSecretBackend gets an existing SecretBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackend(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecretBackendState, opts ...pulumi.ResourceOpt) (*SecretBackend, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["defaultLeaseTtlSeconds"] = state.DefaultLeaseTtlSeconds
		inputs["description"] = state.Description
		inputs["maxLeaseTtlSeconds"] = state.MaxLeaseTtlSeconds
		inputs["path"] = state.Path
		inputs["scheme"] = state.Scheme
		inputs["token"] = state.Token
	}
	s, err := ctx.ReadResource("vault:consul/secretBackend:SecretBackend", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackend{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecretBackend) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecretBackend) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
func (r *SecretBackend) Address() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["address"])
}

// The default TTL for credentials issued by this backend.
func (r *SecretBackend) DefaultLeaseTtlSeconds() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["defaultLeaseTtlSeconds"])
}

// A human-friendly description for this backend.
func (r *SecretBackend) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The maximum TTL that can be requested
// for credentials issued by this backend.
func (r *SecretBackend) MaxLeaseTtlSeconds() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxLeaseTtlSeconds"])
}

// The unique location this backend should be mounted at. Must not begin or end with a `/`. Defaults to `consul`.
func (r *SecretBackend) Path() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["path"])
}

// Specifies the URL scheme to use. Defaults to `http`.
func (r *SecretBackend) Scheme() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["scheme"])
}

// The Consul management token this backend should use to issue new tokens.
func (r *SecretBackend) Token() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["token"])
}

// Input properties used for looking up and filtering SecretBackend resources.
type SecretBackendState struct {
	// Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
	Address interface{}
	// The default TTL for credentials issued by this backend.
	DefaultLeaseTtlSeconds interface{}
	// A human-friendly description for this backend.
	Description interface{}
	// The maximum TTL that can be requested
	// for credentials issued by this backend.
	MaxLeaseTtlSeconds interface{}
	// The unique location this backend should be mounted at. Must not begin or end with a `/`. Defaults to `consul`.
	Path interface{}
	// Specifies the URL scheme to use. Defaults to `http`.
	Scheme interface{}
	// The Consul management token this backend should use to issue new tokens.
	Token interface{}
}

// The set of arguments for constructing a SecretBackend resource.
type SecretBackendArgs struct {
	// Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
	Address interface{}
	// The default TTL for credentials issued by this backend.
	DefaultLeaseTtlSeconds interface{}
	// A human-friendly description for this backend.
	Description interface{}
	// The maximum TTL that can be requested
	// for credentials issued by this backend.
	MaxLeaseTtlSeconds interface{}
	// The unique location this backend should be mounted at. Must not begin or end with a `/`. Defaults to `consul`.
	Path interface{}
	// Specifies the URL scheme to use. Defaults to `http`.
	Scheme interface{}
	// The Consul management token this backend should use to issue new tokens.
	Token interface{}
}
