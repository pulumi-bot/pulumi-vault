// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gcp

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to configure the [GCP auth backend within Vault](https://www.vaultproject.io/docs/auth/gcp.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/gcp_auth_backend.html.markdown.
type AuthBackend struct {
	s *pulumi.ResourceState
}

// NewAuthBackend registers a new resource with the given unique name, arguments, and options.
func NewAuthBackend(ctx *pulumi.Context,
	name string, args *AuthBackendArgs, opts ...pulumi.ResourceOpt) (*AuthBackend, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clientEmail"] = nil
		inputs["clientId"] = nil
		inputs["credentials"] = nil
		inputs["description"] = nil
		inputs["path"] = nil
		inputs["privateKeyId"] = nil
		inputs["projectId"] = nil
	} else {
		inputs["clientEmail"] = args.ClientEmail
		inputs["clientId"] = args.ClientId
		inputs["credentials"] = args.Credentials
		inputs["description"] = args.Description
		inputs["path"] = args.Path
		inputs["privateKeyId"] = args.PrivateKeyId
		inputs["projectId"] = args.ProjectId
	}
	s, err := ctx.RegisterResource("vault:gcp/authBackend:AuthBackend", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackend{s: s}, nil
}

// GetAuthBackend gets an existing AuthBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthBackend(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthBackendState, opts ...pulumi.ResourceOpt) (*AuthBackend, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clientEmail"] = state.ClientEmail
		inputs["clientId"] = state.ClientId
		inputs["credentials"] = state.Credentials
		inputs["description"] = state.Description
		inputs["path"] = state.Path
		inputs["privateKeyId"] = state.PrivateKeyId
		inputs["projectId"] = state.ProjectId
	}
	s, err := ctx.ReadResource("vault:gcp/authBackend:AuthBackend", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthBackend{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthBackend) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthBackend) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The clients email associated with the credentials
func (r *AuthBackend) ClientEmail() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientEmail"])
}

// The Client ID of the credentials
func (r *AuthBackend) ClientId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["clientId"])
}

// A JSON string containing the contents of a GCP credentials file. If this value is empty, Vault will try to use Application Default Credentials from the machine on which the Vault server is running.
func (r *AuthBackend) Credentials() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["credentials"])
}

func (r *AuthBackend) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

func (r *AuthBackend) Path() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["path"])
}

// The ID of the private key from the credentials
func (r *AuthBackend) PrivateKeyId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privateKeyId"])
}

// The GCP Project ID
func (r *AuthBackend) ProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectId"])
}

// Input properties used for looking up and filtering AuthBackend resources.
type AuthBackendState struct {
	// The clients email associated with the credentials
	ClientEmail interface{}
	// The Client ID of the credentials
	ClientId interface{}
	// A JSON string containing the contents of a GCP credentials file. If this value is empty, Vault will try to use Application Default Credentials from the machine on which the Vault server is running.
	Credentials interface{}
	Description interface{}
	Path interface{}
	// The ID of the private key from the credentials
	PrivateKeyId interface{}
	// The GCP Project ID
	ProjectId interface{}
}

// The set of arguments for constructing a AuthBackend resource.
type AuthBackendArgs struct {
	// The clients email associated with the credentials
	ClientEmail interface{}
	// The Client ID of the credentials
	ClientId interface{}
	// A JSON string containing the contents of a GCP credentials file. If this value is empty, Vault will try to use Application Default Credentials from the machine on which the Vault server is running.
	Credentials interface{}
	Description interface{}
	Path interface{}
	// The ID of the private key from the credentials
	PrivateKeyId interface{}
	// The GCP Project ID
	ProjectId interface{}
}
