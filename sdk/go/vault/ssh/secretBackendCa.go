// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssh

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage CA information in an SSH secret backend
// [SSH secret backend within Vault](https://www.vaultproject.io/docs/secrets/ssh/index.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/ssh_secret_backend_ca.html.markdown.
type SecretBackendCa struct {
	s *pulumi.ResourceState
}

// NewSecretBackendCa registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendCa(ctx *pulumi.Context,
	name string, args *SecretBackendCaArgs, opts ...pulumi.ResourceOpt) (*SecretBackendCa, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backend"] = nil
		inputs["generateSigningKey"] = nil
		inputs["privateKey"] = nil
		inputs["publicKey"] = nil
	} else {
		inputs["backend"] = args.Backend
		inputs["generateSigningKey"] = args.GenerateSigningKey
		inputs["privateKey"] = args.PrivateKey
		inputs["publicKey"] = args.PublicKey
	}
	s, err := ctx.RegisterResource("vault:ssh/secretBackendCa:SecretBackendCa", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendCa{s: s}, nil
}

// GetSecretBackendCa gets an existing SecretBackendCa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendCa(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecretBackendCaState, opts ...pulumi.ResourceOpt) (*SecretBackendCa, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backend"] = state.Backend
		inputs["generateSigningKey"] = state.GenerateSigningKey
		inputs["privateKey"] = state.PrivateKey
		inputs["publicKey"] = state.PublicKey
	}
	s, err := ctx.ReadResource("vault:ssh/secretBackendCa:SecretBackendCa", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendCa{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecretBackendCa) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecretBackendCa) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The path where the SSH secret backend is mounted. Defaults to 'ssh'
func (r *SecretBackendCa) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// Whether Vault should generate the signing key pair internally. Defaults to true
func (r *SecretBackendCa) GenerateSigningKey() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["generateSigningKey"])
}

// The private key part the SSH CA key pair; required if generateSigningKey is false.
func (r *SecretBackendCa) PrivateKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privateKey"])
}

// The public key part the SSH CA key pair; required if generateSigningKey is false.
func (r *SecretBackendCa) PublicKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["publicKey"])
}

// Input properties used for looking up and filtering SecretBackendCa resources.
type SecretBackendCaState struct {
	// The path where the SSH secret backend is mounted. Defaults to 'ssh'
	Backend interface{}
	// Whether Vault should generate the signing key pair internally. Defaults to true
	GenerateSigningKey interface{}
	// The private key part the SSH CA key pair; required if generateSigningKey is false.
	PrivateKey interface{}
	// The public key part the SSH CA key pair; required if generateSigningKey is false.
	PublicKey interface{}
}

// The set of arguments for constructing a SecretBackendCa resource.
type SecretBackendCaArgs struct {
	// The path where the SSH secret backend is mounted. Defaults to 'ssh'
	Backend interface{}
	// Whether Vault should generate the signing key pair internally. Defaults to true
	GenerateSigningKey interface{}
	// The private key part the SSH CA key pair; required if generateSigningKey is false.
	PrivateKey interface{}
	// The public key part the SSH CA key pair; required if generateSigningKey is false.
	PublicKey interface{}
}
