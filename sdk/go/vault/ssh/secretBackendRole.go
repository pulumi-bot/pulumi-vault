// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssh

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage roles in an SSH secret backend
// [SSH secret backend within Vault](https://www.vaultproject.io/docs/secrets/ssh/index.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/ssh_secret_backend_role.html.markdown.
type SecretBackendRole struct {
	s *pulumi.ResourceState
}

// NewSecretBackendRole registers a new resource with the given unique name, arguments, and options.
func NewSecretBackendRole(ctx *pulumi.Context,
	name string, args *SecretBackendRoleArgs, opts ...pulumi.ResourceOpt) (*SecretBackendRole, error) {
	if args == nil || args.Backend == nil {
		return nil, errors.New("missing required argument 'Backend'")
	}
	if args == nil || args.KeyType == nil {
		return nil, errors.New("missing required argument 'KeyType'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowBareDomains"] = nil
		inputs["allowHostCertificates"] = nil
		inputs["allowSubdomains"] = nil
		inputs["allowUserCertificates"] = nil
		inputs["allowUserKeyIds"] = nil
		inputs["allowedCriticalOptions"] = nil
		inputs["allowedDomains"] = nil
		inputs["allowedExtensions"] = nil
		inputs["allowedUsers"] = nil
		inputs["backend"] = nil
		inputs["cidrList"] = nil
		inputs["defaultCriticalOptions"] = nil
		inputs["defaultExtensions"] = nil
		inputs["defaultUser"] = nil
		inputs["keyIdFormat"] = nil
		inputs["keyType"] = nil
		inputs["maxTtl"] = nil
		inputs["name"] = nil
		inputs["ttl"] = nil
	} else {
		inputs["allowBareDomains"] = args.AllowBareDomains
		inputs["allowHostCertificates"] = args.AllowHostCertificates
		inputs["allowSubdomains"] = args.AllowSubdomains
		inputs["allowUserCertificates"] = args.AllowUserCertificates
		inputs["allowUserKeyIds"] = args.AllowUserKeyIds
		inputs["allowedCriticalOptions"] = args.AllowedCriticalOptions
		inputs["allowedDomains"] = args.AllowedDomains
		inputs["allowedExtensions"] = args.AllowedExtensions
		inputs["allowedUsers"] = args.AllowedUsers
		inputs["backend"] = args.Backend
		inputs["cidrList"] = args.CidrList
		inputs["defaultCriticalOptions"] = args.DefaultCriticalOptions
		inputs["defaultExtensions"] = args.DefaultExtensions
		inputs["defaultUser"] = args.DefaultUser
		inputs["keyIdFormat"] = args.KeyIdFormat
		inputs["keyType"] = args.KeyType
		inputs["maxTtl"] = args.MaxTtl
		inputs["name"] = args.Name
		inputs["ttl"] = args.Ttl
	}
	s, err := ctx.RegisterResource("vault:ssh/secretBackendRole:SecretBackendRole", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendRole{s: s}, nil
}

// GetSecretBackendRole gets an existing SecretBackendRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretBackendRole(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecretBackendRoleState, opts ...pulumi.ResourceOpt) (*SecretBackendRole, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowBareDomains"] = state.AllowBareDomains
		inputs["allowHostCertificates"] = state.AllowHostCertificates
		inputs["allowSubdomains"] = state.AllowSubdomains
		inputs["allowUserCertificates"] = state.AllowUserCertificates
		inputs["allowUserKeyIds"] = state.AllowUserKeyIds
		inputs["allowedCriticalOptions"] = state.AllowedCriticalOptions
		inputs["allowedDomains"] = state.AllowedDomains
		inputs["allowedExtensions"] = state.AllowedExtensions
		inputs["allowedUsers"] = state.AllowedUsers
		inputs["backend"] = state.Backend
		inputs["cidrList"] = state.CidrList
		inputs["defaultCriticalOptions"] = state.DefaultCriticalOptions
		inputs["defaultExtensions"] = state.DefaultExtensions
		inputs["defaultUser"] = state.DefaultUser
		inputs["keyIdFormat"] = state.KeyIdFormat
		inputs["keyType"] = state.KeyType
		inputs["maxTtl"] = state.MaxTtl
		inputs["name"] = state.Name
		inputs["ttl"] = state.Ttl
	}
	s, err := ctx.ReadResource("vault:ssh/secretBackendRole:SecretBackendRole", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretBackendRole{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecretBackendRole) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecretBackendRole) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Specifies if host certificates that are requested are allowed to use the base domains listed in `allowedDomains`.
func (r *SecretBackendRole) AllowBareDomains() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["allowBareDomains"])
}

// Specifies if certificates are allowed to be signed for use as a 'host'.
func (r *SecretBackendRole) AllowHostCertificates() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["allowHostCertificates"])
}

// Specifies if host certificates that are requested are allowed to be subdomains of those listed in `allowedDomains`.
func (r *SecretBackendRole) AllowSubdomains() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["allowSubdomains"])
}

// Specifies if certificates are allowed to be signed for use as a 'user'.
func (r *SecretBackendRole) AllowUserCertificates() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["allowUserCertificates"])
}

// Specifies if users can override the key ID for a signed certificate with the `keyId` field.
func (r *SecretBackendRole) AllowUserKeyIds() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["allowUserKeyIds"])
}

// Specifies a comma-separated list of critical options that certificates can have when signed.
func (r *SecretBackendRole) AllowedCriticalOptions() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["allowedCriticalOptions"])
}

// The list of domains for which a client can request a host certificate.
func (r *SecretBackendRole) AllowedDomains() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["allowedDomains"])
}

// Specifies a comma-separated list of extensions that certificates can have when signed.
func (r *SecretBackendRole) AllowedExtensions() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["allowedExtensions"])
}

// Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
func (r *SecretBackendRole) AllowedUsers() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["allowedUsers"])
}

// The path where the SSH secret backend is mounted.
func (r *SecretBackendRole) Backend() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backend"])
}

// The comma-separated string of CIDR blocks for which this role is applicable.
func (r *SecretBackendRole) CidrList() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cidrList"])
}

// Specifies a map of critical options that certificates have when signed.
func (r *SecretBackendRole) DefaultCriticalOptions() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["defaultCriticalOptions"])
}

// Specifies a map of extensions that certificates have when signed.
func (r *SecretBackendRole) DefaultExtensions() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["defaultExtensions"])
}

// Specifies the default username for which a credential will be generated.
func (r *SecretBackendRole) DefaultUser() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["defaultUser"])
}

// Specifies a custom format for the key id of a signed certificate.
func (r *SecretBackendRole) KeyIdFormat() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["keyIdFormat"])
}

// Specifies the type of credentials generated by this role. This can be either `otp`, `dynamic` or `ca`.
func (r *SecretBackendRole) KeyType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["keyType"])
}

// Specifies the Time To Live value.
func (r *SecretBackendRole) MaxTtl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["maxTtl"])
}

// Specifies the name of the role to create.
func (r *SecretBackendRole) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Specifies the maximum Time To Live value.
func (r *SecretBackendRole) Ttl() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ttl"])
}

// Input properties used for looking up and filtering SecretBackendRole resources.
type SecretBackendRoleState struct {
	// Specifies if host certificates that are requested are allowed to use the base domains listed in `allowedDomains`.
	AllowBareDomains interface{}
	// Specifies if certificates are allowed to be signed for use as a 'host'.
	AllowHostCertificates interface{}
	// Specifies if host certificates that are requested are allowed to be subdomains of those listed in `allowedDomains`.
	AllowSubdomains interface{}
	// Specifies if certificates are allowed to be signed for use as a 'user'.
	AllowUserCertificates interface{}
	// Specifies if users can override the key ID for a signed certificate with the `keyId` field.
	AllowUserKeyIds interface{}
	// Specifies a comma-separated list of critical options that certificates can have when signed.
	AllowedCriticalOptions interface{}
	// The list of domains for which a client can request a host certificate.
	AllowedDomains interface{}
	// Specifies a comma-separated list of extensions that certificates can have when signed.
	AllowedExtensions interface{}
	// Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
	AllowedUsers interface{}
	// The path where the SSH secret backend is mounted.
	Backend interface{}
	// The comma-separated string of CIDR blocks for which this role is applicable.
	CidrList interface{}
	// Specifies a map of critical options that certificates have when signed.
	DefaultCriticalOptions interface{}
	// Specifies a map of extensions that certificates have when signed.
	DefaultExtensions interface{}
	// Specifies the default username for which a credential will be generated.
	DefaultUser interface{}
	// Specifies a custom format for the key id of a signed certificate.
	KeyIdFormat interface{}
	// Specifies the type of credentials generated by this role. This can be either `otp`, `dynamic` or `ca`.
	KeyType interface{}
	// Specifies the Time To Live value.
	MaxTtl interface{}
	// Specifies the name of the role to create.
	Name interface{}
	// Specifies the maximum Time To Live value.
	Ttl interface{}
}

// The set of arguments for constructing a SecretBackendRole resource.
type SecretBackendRoleArgs struct {
	// Specifies if host certificates that are requested are allowed to use the base domains listed in `allowedDomains`.
	AllowBareDomains interface{}
	// Specifies if certificates are allowed to be signed for use as a 'host'.
	AllowHostCertificates interface{}
	// Specifies if host certificates that are requested are allowed to be subdomains of those listed in `allowedDomains`.
	AllowSubdomains interface{}
	// Specifies if certificates are allowed to be signed for use as a 'user'.
	AllowUserCertificates interface{}
	// Specifies if users can override the key ID for a signed certificate with the `keyId` field.
	AllowUserKeyIds interface{}
	// Specifies a comma-separated list of critical options that certificates can have when signed.
	AllowedCriticalOptions interface{}
	// The list of domains for which a client can request a host certificate.
	AllowedDomains interface{}
	// Specifies a comma-separated list of extensions that certificates can have when signed.
	AllowedExtensions interface{}
	// Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
	AllowedUsers interface{}
	// The path where the SSH secret backend is mounted.
	Backend interface{}
	// The comma-separated string of CIDR blocks for which this role is applicable.
	CidrList interface{}
	// Specifies a map of critical options that certificates have when signed.
	DefaultCriticalOptions interface{}
	// Specifies a map of extensions that certificates have when signed.
	DefaultExtensions interface{}
	// Specifies the default username for which a credential will be generated.
	DefaultUser interface{}
	// Specifies a custom format for the key id of a signed certificate.
	KeyIdFormat interface{}
	// Specifies the type of credentials generated by this role. This can be either `otp`, `dynamic` or `ca`.
	KeyType interface{}
	// Specifies the Time To Live value.
	MaxTtl interface{}
	// Specifies the name of the role to create.
	Name interface{}
	// Specifies the maximum Time To Live value.
	Ttl interface{}
}
