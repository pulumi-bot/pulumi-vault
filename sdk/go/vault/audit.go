// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vault

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Audit struct {
	s *pulumi.ResourceState
}

// NewAudit registers a new resource with the given unique name, arguments, and options.
func NewAudit(ctx *pulumi.Context,
	name string, args *AuditArgs, opts ...pulumi.ResourceOpt) (*Audit, error) {
	if args == nil || args.Options == nil {
		return nil, errors.New("missing required argument 'Options'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["options"] = nil
		inputs["path"] = nil
		inputs["type"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["options"] = args.Options
		inputs["path"] = args.Path
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("vault:index/audit:Audit", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Audit{s: s}, nil
}

// GetAudit gets an existing Audit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAudit(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuditState, opts ...pulumi.ResourceOpt) (*Audit, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["options"] = state.Options
		inputs["path"] = state.Path
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("vault:index/audit:Audit", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Audit{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Audit) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Audit) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Human-friendly description of the audit device.
func (r *Audit) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Configuration options to pass to the audit device itself.
func (r *Audit) Options() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["options"])
}

// The path to mount the audit device. This defaults to the type.
func (r *Audit) Path() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["path"])
}

// Type of the audit device, such as 'file'.
func (r *Audit) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering Audit resources.
type AuditState struct {
	// Human-friendly description of the audit device.
	Description interface{}
	// Configuration options to pass to the audit device itself.
	Options interface{}
	// The path to mount the audit device. This defaults to the type.
	Path interface{}
	// Type of the audit device, such as 'file'.
	Type interface{}
}

// The set of arguments for constructing a Audit resource.
type AuditArgs struct {
	// Human-friendly description of the audit device.
	Description interface{}
	// Configuration options to pass to the audit device itself.
	Options interface{}
	// The path to mount the audit device. This defaults to the type.
	Path interface{}
	// Type of the audit device, such as 'file'.
	Type interface{}
}
