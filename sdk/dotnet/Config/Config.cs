// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;

namespace Pulumi.Vault
{
    public static class Config
    {
        private static readonly Pulumi.Config __config = new Pulumi.Config("vault");

        /// <summary>
        /// URL of the root of the target Vault server.
        /// </summary>
        public static string? Address { get; set; } = __config.Get("address");

        /// <summary>
        /// Login to vault with an existing auth method using auth/&lt;mount&gt;/login
        /// </summary>
        public static ImmutableArray<ConfigTypes.AuthLogins> AuthLogins { get; set; } = __config.GetObject<ImmutableArray<ConfigTypes.AuthLogins>>("authLogins");

        /// <summary>
        /// Path to directory containing CA certificate files to validate the server's certificate.
        /// </summary>
        public static string? CaCertDir { get; set; } = __config.Get("caCertDir");

        /// <summary>
        /// Path to a CA certificate file to validate the server's certificate.
        /// </summary>
        public static string? CaCertFile { get; set; } = __config.Get("caCertFile");

        /// <summary>
        /// Client authentication credentials.
        /// </summary>
        public static ImmutableArray<ConfigTypes.ClientAuths> ClientAuths { get; set; } = __config.GetObject<ImmutableArray<ConfigTypes.ClientAuths>>("clientAuths");

        /// <summary>
        /// Maximum TTL for secret leases requested by this provider
        /// </summary>
        public static int? MaxLeaseTtlSeconds { get; set; } = __config.GetInt32("maxLeaseTtlSeconds");

        /// <summary>
        /// Maximum number of retries when a 5xx error code is encountered.
        /// </summary>
        public static int? MaxRetries { get; set; } = __config.GetInt32("maxRetries");

        /// <summary>
        /// The namespace to use. Available only for Vault Enterprise
        /// </summary>
        public static string? Namespace { get; set; } = __config.Get("namespace");

        /// <summary>
        /// Set this to true only if the target Vault server is an insecure development instance.
        /// </summary>
        public static bool? SkipTlsVerify { get; set; } = __config.GetBoolean("skipTlsVerify");

        /// <summary>
        /// Token to use to authenticate to Vault.
        /// </summary>
        public static string? Token { get; set; } = __config.Get("token");

    }
    namespace ConfigTypes
    {

    public class AuthLogins
    {
        public string? Namespace { get; set; }
        public ImmutableDictionary<string, string>? Parameters { get; set; }
        public string Path { get; set; } = null!;
    }

    public class ClientAuths
    {
        public string CertFile { get; set; } = null!;
        public string KeyFile { get; set; } = null!;
    }
    }
}
