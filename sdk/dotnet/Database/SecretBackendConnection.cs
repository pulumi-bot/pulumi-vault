// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vault.Database
{
    public partial class SecretBackendConnection : Pulumi.CustomResource
    {
        /// <summary>
        /// A list of roles that are allowed to use this connection.
        /// </summary>
        [Output("allowedRoles")]
        public Output<ImmutableArray<string>> AllowedRoles { get; private set; } = null!;

        /// <summary>
        /// Unique name of the Vault mount to configure.
        /// </summary>
        [Output("backend")]
        public Output<string> Backend { get; private set; } = null!;

        /// <summary>
        /// Connection parameters for the cassandra-database-plugin plugin.
        /// </summary>
        [Output("cassandra")]
        public Output<Outputs.SecretBackendConnectionCassandra?> Cassandra { get; private set; } = null!;

        /// <summary>
        /// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
        /// </summary>
        [Output("data")]
        public Output<ImmutableDictionary<string, object>?> Data { get; private set; } = null!;

        /// <summary>
        /// Connection parameters for the hana-database-plugin plugin.
        /// </summary>
        [Output("hana")]
        public Output<Outputs.SecretBackendConnectionHana?> Hana { get; private set; } = null!;

        /// <summary>
        /// Connection parameters for the mongodb-database-plugin plugin.
        /// </summary>
        [Output("mongodb")]
        public Output<Outputs.SecretBackendConnectionMongodb?> Mongodb { get; private set; } = null!;

        /// <summary>
        /// Connection parameters for the mssql-database-plugin plugin.
        /// </summary>
        [Output("mssql")]
        public Output<Outputs.SecretBackendConnectionMssql?> Mssql { get; private set; } = null!;

        /// <summary>
        /// Connection parameters for the mysql-database-plugin plugin.
        /// </summary>
        [Output("mysql")]
        public Output<Outputs.SecretBackendConnectionMysql?> Mysql { get; private set; } = null!;

        /// <summary>
        /// Connection parameters for the mysql-aurora-database-plugin plugin.
        /// </summary>
        [Output("mysqlAurora")]
        public Output<Outputs.SecretBackendConnectionMysqlAurora?> MysqlAurora { get; private set; } = null!;

        /// <summary>
        /// Connection parameters for the mysql-legacy-database-plugin plugin.
        /// </summary>
        [Output("mysqlLegacy")]
        public Output<Outputs.SecretBackendConnectionMysqlLegacy?> MysqlLegacy { get; private set; } = null!;

        /// <summary>
        /// Connection parameters for the mysql-rds-database-plugin plugin.
        /// </summary>
        [Output("mysqlRds")]
        public Output<Outputs.SecretBackendConnectionMysqlRds?> MysqlRds { get; private set; } = null!;

        /// <summary>
        /// Name of the database connection.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Connection parameters for the oracle-database-plugin plugin.
        /// </summary>
        [Output("oracle")]
        public Output<Outputs.SecretBackendConnectionOracle?> Oracle { get; private set; } = null!;

        /// <summary>
        /// Connection parameters for the postgresql-database-plugin plugin.
        /// </summary>
        [Output("postgresql")]
        public Output<Outputs.SecretBackendConnectionPostgresql?> Postgresql { get; private set; } = null!;

        /// <summary>
        /// A list of database statements to be executed to rotate the root user's credentials.
        /// </summary>
        [Output("rootRotationStatements")]
        public Output<ImmutableArray<string>> RootRotationStatements { get; private set; } = null!;

        /// <summary>
        /// Specifies if the connection is verified during initial configuration.
        /// </summary>
        [Output("verifyConnection")]
        public Output<bool?> VerifyConnection { get; private set; } = null!;


        /// <summary>
        /// Create a SecretBackendConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecretBackendConnection(string name, SecretBackendConnectionArgs args, CustomResourceOptions? options = null)
            : base("vault:database/secretBackendConnection:SecretBackendConnection", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private SecretBackendConnection(string name, Input<string> id, SecretBackendConnectionState? state = null, CustomResourceOptions? options = null)
            : base("vault:database/secretBackendConnection:SecretBackendConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecretBackendConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecretBackendConnection Get(string name, Input<string> id, SecretBackendConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new SecretBackendConnection(name, id, state, options);
        }
    }

    public sealed class SecretBackendConnectionArgs : Pulumi.ResourceArgs
    {
        [Input("allowedRoles")]
        private InputList<string>? _allowedRoles;

        /// <summary>
        /// A list of roles that are allowed to use this connection.
        /// </summary>
        public InputList<string> AllowedRoles
        {
            get => _allowedRoles ?? (_allowedRoles = new InputList<string>());
            set => _allowedRoles = value;
        }

        /// <summary>
        /// Unique name of the Vault mount to configure.
        /// </summary>
        [Input("backend", required: true)]
        public Input<string> Backend { get; set; } = null!;

        /// <summary>
        /// Connection parameters for the cassandra-database-plugin plugin.
        /// </summary>
        [Input("cassandra")]
        public Input<Inputs.SecretBackendConnectionCassandraArgs>? Cassandra { get; set; }

        [Input("data")]
        private InputMap<object>? _data;

        /// <summary>
        /// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
        /// </summary>
        public InputMap<object> Data
        {
            get => _data ?? (_data = new InputMap<object>());
            set => _data = value;
        }

        /// <summary>
        /// Connection parameters for the hana-database-plugin plugin.
        /// </summary>
        [Input("hana")]
        public Input<Inputs.SecretBackendConnectionHanaArgs>? Hana { get; set; }

        /// <summary>
        /// Connection parameters for the mongodb-database-plugin plugin.
        /// </summary>
        [Input("mongodb")]
        public Input<Inputs.SecretBackendConnectionMongodbArgs>? Mongodb { get; set; }

        /// <summary>
        /// Connection parameters for the mssql-database-plugin plugin.
        /// </summary>
        [Input("mssql")]
        public Input<Inputs.SecretBackendConnectionMssqlArgs>? Mssql { get; set; }

        /// <summary>
        /// Connection parameters for the mysql-database-plugin plugin.
        /// </summary>
        [Input("mysql")]
        public Input<Inputs.SecretBackendConnectionMysqlArgs>? Mysql { get; set; }

        /// <summary>
        /// Connection parameters for the mysql-aurora-database-plugin plugin.
        /// </summary>
        [Input("mysqlAurora")]
        public Input<Inputs.SecretBackendConnectionMysqlAuroraArgs>? MysqlAurora { get; set; }

        /// <summary>
        /// Connection parameters for the mysql-legacy-database-plugin plugin.
        /// </summary>
        [Input("mysqlLegacy")]
        public Input<Inputs.SecretBackendConnectionMysqlLegacyArgs>? MysqlLegacy { get; set; }

        /// <summary>
        /// Connection parameters for the mysql-rds-database-plugin plugin.
        /// </summary>
        [Input("mysqlRds")]
        public Input<Inputs.SecretBackendConnectionMysqlRdsArgs>? MysqlRds { get; set; }

        /// <summary>
        /// Name of the database connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Connection parameters for the oracle-database-plugin plugin.
        /// </summary>
        [Input("oracle")]
        public Input<Inputs.SecretBackendConnectionOracleArgs>? Oracle { get; set; }

        /// <summary>
        /// Connection parameters for the postgresql-database-plugin plugin.
        /// </summary>
        [Input("postgresql")]
        public Input<Inputs.SecretBackendConnectionPostgresqlArgs>? Postgresql { get; set; }

        [Input("rootRotationStatements")]
        private InputList<string>? _rootRotationStatements;

        /// <summary>
        /// A list of database statements to be executed to rotate the root user's credentials.
        /// </summary>
        public InputList<string> RootRotationStatements
        {
            get => _rootRotationStatements ?? (_rootRotationStatements = new InputList<string>());
            set => _rootRotationStatements = value;
        }

        /// <summary>
        /// Specifies if the connection is verified during initial configuration.
        /// </summary>
        [Input("verifyConnection")]
        public Input<bool>? VerifyConnection { get; set; }

        public SecretBackendConnectionArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionState : Pulumi.ResourceArgs
    {
        [Input("allowedRoles")]
        private InputList<string>? _allowedRoles;

        /// <summary>
        /// A list of roles that are allowed to use this connection.
        /// </summary>
        public InputList<string> AllowedRoles
        {
            get => _allowedRoles ?? (_allowedRoles = new InputList<string>());
            set => _allowedRoles = value;
        }

        /// <summary>
        /// Unique name of the Vault mount to configure.
        /// </summary>
        [Input("backend")]
        public Input<string>? Backend { get; set; }

        /// <summary>
        /// Connection parameters for the cassandra-database-plugin plugin.
        /// </summary>
        [Input("cassandra")]
        public Input<Inputs.SecretBackendConnectionCassandraGetArgs>? Cassandra { get; set; }

        [Input("data")]
        private InputMap<object>? _data;

        /// <summary>
        /// A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
        /// </summary>
        public InputMap<object> Data
        {
            get => _data ?? (_data = new InputMap<object>());
            set => _data = value;
        }

        /// <summary>
        /// Connection parameters for the hana-database-plugin plugin.
        /// </summary>
        [Input("hana")]
        public Input<Inputs.SecretBackendConnectionHanaGetArgs>? Hana { get; set; }

        /// <summary>
        /// Connection parameters for the mongodb-database-plugin plugin.
        /// </summary>
        [Input("mongodb")]
        public Input<Inputs.SecretBackendConnectionMongodbGetArgs>? Mongodb { get; set; }

        /// <summary>
        /// Connection parameters for the mssql-database-plugin plugin.
        /// </summary>
        [Input("mssql")]
        public Input<Inputs.SecretBackendConnectionMssqlGetArgs>? Mssql { get; set; }

        /// <summary>
        /// Connection parameters for the mysql-database-plugin plugin.
        /// </summary>
        [Input("mysql")]
        public Input<Inputs.SecretBackendConnectionMysqlGetArgs>? Mysql { get; set; }

        /// <summary>
        /// Connection parameters for the mysql-aurora-database-plugin plugin.
        /// </summary>
        [Input("mysqlAurora")]
        public Input<Inputs.SecretBackendConnectionMysqlAuroraGetArgs>? MysqlAurora { get; set; }

        /// <summary>
        /// Connection parameters for the mysql-legacy-database-plugin plugin.
        /// </summary>
        [Input("mysqlLegacy")]
        public Input<Inputs.SecretBackendConnectionMysqlLegacyGetArgs>? MysqlLegacy { get; set; }

        /// <summary>
        /// Connection parameters for the mysql-rds-database-plugin plugin.
        /// </summary>
        [Input("mysqlRds")]
        public Input<Inputs.SecretBackendConnectionMysqlRdsGetArgs>? MysqlRds { get; set; }

        /// <summary>
        /// Name of the database connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Connection parameters for the oracle-database-plugin plugin.
        /// </summary>
        [Input("oracle")]
        public Input<Inputs.SecretBackendConnectionOracleGetArgs>? Oracle { get; set; }

        /// <summary>
        /// Connection parameters for the postgresql-database-plugin plugin.
        /// </summary>
        [Input("postgresql")]
        public Input<Inputs.SecretBackendConnectionPostgresqlGetArgs>? Postgresql { get; set; }

        [Input("rootRotationStatements")]
        private InputList<string>? _rootRotationStatements;

        /// <summary>
        /// A list of database statements to be executed to rotate the root user's credentials.
        /// </summary>
        public InputList<string> RootRotationStatements
        {
            get => _rootRotationStatements ?? (_rootRotationStatements = new InputList<string>());
            set => _rootRotationStatements = value;
        }

        /// <summary>
        /// Specifies if the connection is verified during initial configuration.
        /// </summary>
        [Input("verifyConnection")]
        public Input<bool>? VerifyConnection { get; set; }

        public SecretBackendConnectionState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class SecretBackendConnectionCassandraArgs : Pulumi.ResourceArgs
    {
        [Input("connectTimeout")]
        public Input<int>? ConnectTimeout { get; set; }

        [Input("hosts")]
        private InputList<string>? _hosts;
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        [Input("insecureTls")]
        public Input<bool>? InsecureTls { get; set; }

        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("pemBundle")]
        public Input<string>? PemBundle { get; set; }

        [Input("pemJson")]
        public Input<string>? PemJson { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("protocolVersion")]
        public Input<int>? ProtocolVersion { get; set; }

        [Input("tls")]
        public Input<bool>? Tls { get; set; }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public SecretBackendConnectionCassandraArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionCassandraGetArgs : Pulumi.ResourceArgs
    {
        [Input("connectTimeout")]
        public Input<int>? ConnectTimeout { get; set; }

        [Input("hosts")]
        private InputList<string>? _hosts;
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        [Input("insecureTls")]
        public Input<bool>? InsecureTls { get; set; }

        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("pemBundle")]
        public Input<string>? PemBundle { get; set; }

        [Input("pemJson")]
        public Input<string>? PemJson { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("protocolVersion")]
        public Input<int>? ProtocolVersion { get; set; }

        [Input("tls")]
        public Input<bool>? Tls { get; set; }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public SecretBackendConnectionCassandraGetArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionHanaArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionHanaArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionHanaGetArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionHanaGetArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionMongodbArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionMongodbArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionMongodbGetArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionMongodbGetArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionMssqlArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionMssqlArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionMssqlGetArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionMssqlGetArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionMysqlArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionMysqlArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionMysqlAuroraArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionMysqlAuroraArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionMysqlAuroraGetArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionMysqlAuroraGetArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionMysqlGetArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionMysqlGetArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionMysqlLegacyArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionMysqlLegacyArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionMysqlLegacyGetArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionMysqlLegacyGetArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionMysqlRdsArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionMysqlRdsArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionMysqlRdsGetArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionMysqlRdsGetArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionOracleArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionOracleArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionOracleGetArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionOracleGetArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionPostgresqlArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionPostgresqlArgs()
        {
        }
    }

    public sealed class SecretBackendConnectionPostgresqlGetArgs : Pulumi.ResourceArgs
    {
        [Input("connectionUrl")]
        public Input<string>? ConnectionUrl { get; set; }

        [Input("maxConnectionLifetime")]
        public Input<int>? MaxConnectionLifetime { get; set; }

        [Input("maxIdleConnections")]
        public Input<int>? MaxIdleConnections { get; set; }

        [Input("maxOpenConnections")]
        public Input<int>? MaxOpenConnections { get; set; }

        public SecretBackendConnectionPostgresqlGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class SecretBackendConnectionCassandra
    {
        public readonly int? ConnectTimeout;
        public readonly ImmutableArray<string> Hosts;
        public readonly bool? InsecureTls;
        public readonly string? Password;
        public readonly string? PemBundle;
        public readonly string? PemJson;
        public readonly int? Port;
        public readonly int? ProtocolVersion;
        public readonly bool? Tls;
        public readonly string? Username;

        [OutputConstructor]
        private SecretBackendConnectionCassandra(
            int? connectTimeout,
            ImmutableArray<string> hosts,
            bool? insecureTls,
            string? password,
            string? pemBundle,
            string? pemJson,
            int? port,
            int? protocolVersion,
            bool? tls,
            string? username)
        {
            ConnectTimeout = connectTimeout;
            Hosts = hosts;
            InsecureTls = insecureTls;
            Password = password;
            PemBundle = pemBundle;
            PemJson = pemJson;
            Port = port;
            ProtocolVersion = protocolVersion;
            Tls = tls;
            Username = username;
        }
    }

    [OutputType]
    public sealed class SecretBackendConnectionHana
    {
        public readonly string? ConnectionUrl;
        public readonly int? MaxConnectionLifetime;
        public readonly int? MaxIdleConnections;
        public readonly int? MaxOpenConnections;

        [OutputConstructor]
        private SecretBackendConnectionHana(
            string? connectionUrl,
            int? maxConnectionLifetime,
            int? maxIdleConnections,
            int? maxOpenConnections)
        {
            ConnectionUrl = connectionUrl;
            MaxConnectionLifetime = maxConnectionLifetime;
            MaxIdleConnections = maxIdleConnections;
            MaxOpenConnections = maxOpenConnections;
        }
    }

    [OutputType]
    public sealed class SecretBackendConnectionMongodb
    {
        public readonly string? ConnectionUrl;
        public readonly int? MaxConnectionLifetime;
        public readonly int? MaxIdleConnections;
        public readonly int? MaxOpenConnections;

        [OutputConstructor]
        private SecretBackendConnectionMongodb(
            string? connectionUrl,
            int? maxConnectionLifetime,
            int? maxIdleConnections,
            int? maxOpenConnections)
        {
            ConnectionUrl = connectionUrl;
            MaxConnectionLifetime = maxConnectionLifetime;
            MaxIdleConnections = maxIdleConnections;
            MaxOpenConnections = maxOpenConnections;
        }
    }

    [OutputType]
    public sealed class SecretBackendConnectionMssql
    {
        public readonly string? ConnectionUrl;
        public readonly int? MaxConnectionLifetime;
        public readonly int? MaxIdleConnections;
        public readonly int? MaxOpenConnections;

        [OutputConstructor]
        private SecretBackendConnectionMssql(
            string? connectionUrl,
            int? maxConnectionLifetime,
            int? maxIdleConnections,
            int? maxOpenConnections)
        {
            ConnectionUrl = connectionUrl;
            MaxConnectionLifetime = maxConnectionLifetime;
            MaxIdleConnections = maxIdleConnections;
            MaxOpenConnections = maxOpenConnections;
        }
    }

    [OutputType]
    public sealed class SecretBackendConnectionMysql
    {
        public readonly string? ConnectionUrl;
        public readonly int? MaxConnectionLifetime;
        public readonly int? MaxIdleConnections;
        public readonly int? MaxOpenConnections;

        [OutputConstructor]
        private SecretBackendConnectionMysql(
            string? connectionUrl,
            int? maxConnectionLifetime,
            int? maxIdleConnections,
            int? maxOpenConnections)
        {
            ConnectionUrl = connectionUrl;
            MaxConnectionLifetime = maxConnectionLifetime;
            MaxIdleConnections = maxIdleConnections;
            MaxOpenConnections = maxOpenConnections;
        }
    }

    [OutputType]
    public sealed class SecretBackendConnectionMysqlAurora
    {
        public readonly string? ConnectionUrl;
        public readonly int? MaxConnectionLifetime;
        public readonly int? MaxIdleConnections;
        public readonly int? MaxOpenConnections;

        [OutputConstructor]
        private SecretBackendConnectionMysqlAurora(
            string? connectionUrl,
            int? maxConnectionLifetime,
            int? maxIdleConnections,
            int? maxOpenConnections)
        {
            ConnectionUrl = connectionUrl;
            MaxConnectionLifetime = maxConnectionLifetime;
            MaxIdleConnections = maxIdleConnections;
            MaxOpenConnections = maxOpenConnections;
        }
    }

    [OutputType]
    public sealed class SecretBackendConnectionMysqlLegacy
    {
        public readonly string? ConnectionUrl;
        public readonly int? MaxConnectionLifetime;
        public readonly int? MaxIdleConnections;
        public readonly int? MaxOpenConnections;

        [OutputConstructor]
        private SecretBackendConnectionMysqlLegacy(
            string? connectionUrl,
            int? maxConnectionLifetime,
            int? maxIdleConnections,
            int? maxOpenConnections)
        {
            ConnectionUrl = connectionUrl;
            MaxConnectionLifetime = maxConnectionLifetime;
            MaxIdleConnections = maxIdleConnections;
            MaxOpenConnections = maxOpenConnections;
        }
    }

    [OutputType]
    public sealed class SecretBackendConnectionMysqlRds
    {
        public readonly string? ConnectionUrl;
        public readonly int? MaxConnectionLifetime;
        public readonly int? MaxIdleConnections;
        public readonly int? MaxOpenConnections;

        [OutputConstructor]
        private SecretBackendConnectionMysqlRds(
            string? connectionUrl,
            int? maxConnectionLifetime,
            int? maxIdleConnections,
            int? maxOpenConnections)
        {
            ConnectionUrl = connectionUrl;
            MaxConnectionLifetime = maxConnectionLifetime;
            MaxIdleConnections = maxIdleConnections;
            MaxOpenConnections = maxOpenConnections;
        }
    }

    [OutputType]
    public sealed class SecretBackendConnectionOracle
    {
        public readonly string? ConnectionUrl;
        public readonly int? MaxConnectionLifetime;
        public readonly int? MaxIdleConnections;
        public readonly int? MaxOpenConnections;

        [OutputConstructor]
        private SecretBackendConnectionOracle(
            string? connectionUrl,
            int? maxConnectionLifetime,
            int? maxIdleConnections,
            int? maxOpenConnections)
        {
            ConnectionUrl = connectionUrl;
            MaxConnectionLifetime = maxConnectionLifetime;
            MaxIdleConnections = maxIdleConnections;
            MaxOpenConnections = maxOpenConnections;
        }
    }

    [OutputType]
    public sealed class SecretBackendConnectionPostgresql
    {
        public readonly string? ConnectionUrl;
        public readonly int? MaxConnectionLifetime;
        public readonly int? MaxIdleConnections;
        public readonly int? MaxOpenConnections;

        [OutputConstructor]
        private SecretBackendConnectionPostgresql(
            string? connectionUrl,
            int? maxConnectionLifetime,
            int? maxIdleConnections,
            int? maxOpenConnections)
        {
            ConnectionUrl = connectionUrl;
            MaxConnectionLifetime = maxConnectionLifetime;
            MaxIdleConnections = maxIdleConnections;
            MaxOpenConnections = maxOpenConnections;
        }
    }
    }
}
