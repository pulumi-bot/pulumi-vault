// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class AuthBackend extends pulumi.CustomResource {
    /**
     * Get an existing AuthBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthBackendState, opts?: pulumi.CustomResourceOptions): AuthBackend {
        return new AuthBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:lDAP/authBackend:AuthBackend';

    /**
     * Returns true if the given object is an instance of AuthBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthBackend.__pulumiType;
    }

    /**
     * The accessor of the LDAP auth backend
     */
    public /*out*/ readonly accessor!: pulumi.Output<string>;
    public readonly binddn!: pulumi.Output<string>;
    public readonly bindpass!: pulumi.Output<string>;
    public readonly certificate!: pulumi.Output<string>;
    public readonly denyNullBind!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string>;
    public readonly discoverdn!: pulumi.Output<boolean>;
    public readonly groupattr!: pulumi.Output<string>;
    public readonly groupdn!: pulumi.Output<string>;
    public readonly groupfilter!: pulumi.Output<string>;
    public readonly insecureTls!: pulumi.Output<boolean>;
    public readonly path!: pulumi.Output<string | undefined>;
    public readonly starttls!: pulumi.Output<boolean>;
    public readonly tlsMaxVersion!: pulumi.Output<string>;
    public readonly tlsMinVersion!: pulumi.Output<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    public readonly tokenBoundCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    public readonly tokenExplicitMaxTtl!: pulumi.Output<number | undefined>;
    /**
     * The maximum lifetime of the generated token
     */
    public readonly tokenMaxTtl!: pulumi.Output<number | undefined>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    public readonly tokenNoDefaultPolicy!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    public readonly tokenNumUses!: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Period
     */
    public readonly tokenPeriod!: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Policies
     */
    public readonly tokenPolicies!: pulumi.Output<string[] | undefined>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    public readonly tokenTtl!: pulumi.Output<number | undefined>;
    /**
     * The type of token to generate, service or batch
     */
    public readonly tokenType!: pulumi.Output<string | undefined>;
    public readonly upndomain!: pulumi.Output<string>;
    public readonly url!: pulumi.Output<string>;
    public readonly useTokenGroups!: pulumi.Output<boolean>;
    public readonly userattr!: pulumi.Output<string>;
    public readonly userdn!: pulumi.Output<string>;

    /**
     * Create a AuthBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthBackendArgs | AuthBackendState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AuthBackendState | undefined;
            inputs["accessor"] = state ? state.accessor : undefined;
            inputs["binddn"] = state ? state.binddn : undefined;
            inputs["bindpass"] = state ? state.bindpass : undefined;
            inputs["certificate"] = state ? state.certificate : undefined;
            inputs["denyNullBind"] = state ? state.denyNullBind : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["discoverdn"] = state ? state.discoverdn : undefined;
            inputs["groupattr"] = state ? state.groupattr : undefined;
            inputs["groupdn"] = state ? state.groupdn : undefined;
            inputs["groupfilter"] = state ? state.groupfilter : undefined;
            inputs["insecureTls"] = state ? state.insecureTls : undefined;
            inputs["path"] = state ? state.path : undefined;
            inputs["starttls"] = state ? state.starttls : undefined;
            inputs["tlsMaxVersion"] = state ? state.tlsMaxVersion : undefined;
            inputs["tlsMinVersion"] = state ? state.tlsMinVersion : undefined;
            inputs["tokenBoundCidrs"] = state ? state.tokenBoundCidrs : undefined;
            inputs["tokenExplicitMaxTtl"] = state ? state.tokenExplicitMaxTtl : undefined;
            inputs["tokenMaxTtl"] = state ? state.tokenMaxTtl : undefined;
            inputs["tokenNoDefaultPolicy"] = state ? state.tokenNoDefaultPolicy : undefined;
            inputs["tokenNumUses"] = state ? state.tokenNumUses : undefined;
            inputs["tokenPeriod"] = state ? state.tokenPeriod : undefined;
            inputs["tokenPolicies"] = state ? state.tokenPolicies : undefined;
            inputs["tokenTtl"] = state ? state.tokenTtl : undefined;
            inputs["tokenType"] = state ? state.tokenType : undefined;
            inputs["upndomain"] = state ? state.upndomain : undefined;
            inputs["url"] = state ? state.url : undefined;
            inputs["useTokenGroups"] = state ? state.useTokenGroups : undefined;
            inputs["userattr"] = state ? state.userattr : undefined;
            inputs["userdn"] = state ? state.userdn : undefined;
        } else {
            const args = argsOrState as AuthBackendArgs | undefined;
            if (!args || args.url === undefined) {
                throw new Error("Missing required property 'url'");
            }
            inputs["binddn"] = args ? args.binddn : undefined;
            inputs["bindpass"] = args ? args.bindpass : undefined;
            inputs["certificate"] = args ? args.certificate : undefined;
            inputs["denyNullBind"] = args ? args.denyNullBind : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["discoverdn"] = args ? args.discoverdn : undefined;
            inputs["groupattr"] = args ? args.groupattr : undefined;
            inputs["groupdn"] = args ? args.groupdn : undefined;
            inputs["groupfilter"] = args ? args.groupfilter : undefined;
            inputs["insecureTls"] = args ? args.insecureTls : undefined;
            inputs["path"] = args ? args.path : undefined;
            inputs["starttls"] = args ? args.starttls : undefined;
            inputs["tlsMaxVersion"] = args ? args.tlsMaxVersion : undefined;
            inputs["tlsMinVersion"] = args ? args.tlsMinVersion : undefined;
            inputs["tokenBoundCidrs"] = args ? args.tokenBoundCidrs : undefined;
            inputs["tokenExplicitMaxTtl"] = args ? args.tokenExplicitMaxTtl : undefined;
            inputs["tokenMaxTtl"] = args ? args.tokenMaxTtl : undefined;
            inputs["tokenNoDefaultPolicy"] = args ? args.tokenNoDefaultPolicy : undefined;
            inputs["tokenNumUses"] = args ? args.tokenNumUses : undefined;
            inputs["tokenPeriod"] = args ? args.tokenPeriod : undefined;
            inputs["tokenPolicies"] = args ? args.tokenPolicies : undefined;
            inputs["tokenTtl"] = args ? args.tokenTtl : undefined;
            inputs["tokenType"] = args ? args.tokenType : undefined;
            inputs["upndomain"] = args ? args.upndomain : undefined;
            inputs["url"] = args ? args.url : undefined;
            inputs["useTokenGroups"] = args ? args.useTokenGroups : undefined;
            inputs["userattr"] = args ? args.userattr : undefined;
            inputs["userdn"] = args ? args.userdn : undefined;
            inputs["accessor"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(AuthBackend.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthBackend resources.
 */
export interface AuthBackendState {
    /**
     * The accessor of the LDAP auth backend
     */
    readonly accessor?: pulumi.Input<string>;
    readonly binddn?: pulumi.Input<string>;
    readonly bindpass?: pulumi.Input<string>;
    readonly certificate?: pulumi.Input<string>;
    readonly denyNullBind?: pulumi.Input<boolean>;
    readonly description?: pulumi.Input<string>;
    readonly discoverdn?: pulumi.Input<boolean>;
    readonly groupattr?: pulumi.Input<string>;
    readonly groupdn?: pulumi.Input<string>;
    readonly groupfilter?: pulumi.Input<string>;
    readonly insecureTls?: pulumi.Input<boolean>;
    readonly path?: pulumi.Input<string>;
    readonly starttls?: pulumi.Input<boolean>;
    readonly tlsMaxVersion?: pulumi.Input<string>;
    readonly tlsMinVersion?: pulumi.Input<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    readonly tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    readonly tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    readonly tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    readonly tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    readonly tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    readonly tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    readonly tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    readonly tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    readonly tokenType?: pulumi.Input<string>;
    readonly upndomain?: pulumi.Input<string>;
    readonly url?: pulumi.Input<string>;
    readonly useTokenGroups?: pulumi.Input<boolean>;
    readonly userattr?: pulumi.Input<string>;
    readonly userdn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthBackend resource.
 */
export interface AuthBackendArgs {
    readonly binddn?: pulumi.Input<string>;
    readonly bindpass?: pulumi.Input<string>;
    readonly certificate?: pulumi.Input<string>;
    readonly denyNullBind?: pulumi.Input<boolean>;
    readonly description?: pulumi.Input<string>;
    readonly discoverdn?: pulumi.Input<boolean>;
    readonly groupattr?: pulumi.Input<string>;
    readonly groupdn?: pulumi.Input<string>;
    readonly groupfilter?: pulumi.Input<string>;
    readonly insecureTls?: pulumi.Input<boolean>;
    readonly path?: pulumi.Input<string>;
    readonly starttls?: pulumi.Input<boolean>;
    readonly tlsMaxVersion?: pulumi.Input<string>;
    readonly tlsMinVersion?: pulumi.Input<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    readonly tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    readonly tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    readonly tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    readonly tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    readonly tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    readonly tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    readonly tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    readonly tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    readonly tokenType?: pulumi.Input<string>;
    readonly upndomain?: pulumi.Input<string>;
    readonly url: pulumi.Input<string>;
    readonly useTokenGroups?: pulumi.Input<boolean>;
    readonly userattr?: pulumi.Input<string>;
    readonly userdn?: pulumi.Input<string>;
}
