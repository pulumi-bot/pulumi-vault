// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";

export interface GetPolicyDocumentRule {
    allowedParameters?: inputs.GetPolicyDocumentRuleAllowedParameter[];
    capabilities: string[];
    deniedParameters?: inputs.GetPolicyDocumentRuleDeniedParameter[];
    description?: string;
    maxWrappingTtl?: string;
    minWrappingTtl?: string;
    path: string;
    requiredParameters?: string[];
}

export interface GetPolicyDocumentRuleAllowedParameter {
    key: string;
    values: string[];
}

export interface GetPolicyDocumentRuleDeniedParameter {
    key: string;
    values: string[];
}

export interface ProviderAuthLogin {
    namespace?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    path: pulumi.Input<string>;
}

export interface ProviderClientAuth {
    certFile: pulumi.Input<string>;
    keyFile: pulumi.Input<string>;
}

export namespace azure {
    export interface BackendRoleAzureRole {
        roleId?: pulumi.Input<string>;
        roleName: pulumi.Input<string>;
        scope: pulumi.Input<string>;
    }
}

export namespace database {
    export interface SecretBackendConnectionCassandra {
        connectTimeout?: pulumi.Input<number>;
        hosts?: pulumi.Input<pulumi.Input<string>[]>;
        insecureTls?: pulumi.Input<boolean>;
        password?: pulumi.Input<string>;
        pemBundle?: pulumi.Input<string>;
        pemJson?: pulumi.Input<string>;
        port?: pulumi.Input<number>;
        protocolVersion?: pulumi.Input<number>;
        tls?: pulumi.Input<boolean>;
        username?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionHana {
        connectionUrl?: pulumi.Input<string>;
        maxConnectionLifetime?: pulumi.Input<number>;
        maxIdleConnections?: pulumi.Input<number>;
        maxOpenConnections?: pulumi.Input<number>;
    }

    export interface SecretBackendConnectionMongodb {
        connectionUrl?: pulumi.Input<string>;
    }

    export interface SecretBackendConnectionMssql {
        connectionUrl?: pulumi.Input<string>;
        maxConnectionLifetime?: pulumi.Input<number>;
        maxIdleConnections?: pulumi.Input<number>;
        maxOpenConnections?: pulumi.Input<number>;
    }

    export interface SecretBackendConnectionMysql {
        connectionUrl?: pulumi.Input<string>;
        maxConnectionLifetime?: pulumi.Input<number>;
        maxIdleConnections?: pulumi.Input<number>;
        maxOpenConnections?: pulumi.Input<number>;
    }

    export interface SecretBackendConnectionMysqlAurora {
        connectionUrl?: pulumi.Input<string>;
        maxConnectionLifetime?: pulumi.Input<number>;
        maxIdleConnections?: pulumi.Input<number>;
        maxOpenConnections?: pulumi.Input<number>;
    }

    export interface SecretBackendConnectionMysqlLegacy {
        connectionUrl?: pulumi.Input<string>;
        maxConnectionLifetime?: pulumi.Input<number>;
        maxIdleConnections?: pulumi.Input<number>;
        maxOpenConnections?: pulumi.Input<number>;
    }

    export interface SecretBackendConnectionMysqlRds {
        connectionUrl?: pulumi.Input<string>;
        maxConnectionLifetime?: pulumi.Input<number>;
        maxIdleConnections?: pulumi.Input<number>;
        maxOpenConnections?: pulumi.Input<number>;
    }

    export interface SecretBackendConnectionOracle {
        connectionUrl?: pulumi.Input<string>;
        maxConnectionLifetime?: pulumi.Input<number>;
        maxIdleConnections?: pulumi.Input<number>;
        maxOpenConnections?: pulumi.Input<number>;
    }

    export interface SecretBackendConnectionPostgresql {
        connectionUrl?: pulumi.Input<string>;
        maxConnectionLifetime?: pulumi.Input<number>;
        maxIdleConnections?: pulumi.Input<number>;
        maxOpenConnections?: pulumi.Input<number>;
    }
}

export namespace gcp {
    export interface SecretRolesetBinding {
        resource: pulumi.Input<string>;
        roles: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace github {
    export interface AuthBackendTune {
        allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
        auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
        defaultLeaseTtl?: pulumi.Input<string>;
        listingVisibility?: pulumi.Input<string>;
        maxLeaseTtl?: pulumi.Input<string>;
        passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        tokenType?: pulumi.Input<string>;
    }
}

export namespace identity {
}

export namespace jwt {
    export interface AuthBackendTune {
        allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
        auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
        defaultLeaseTtl?: pulumi.Input<string>;
        listingVisibility?: pulumi.Input<string>;
        maxLeaseTtl?: pulumi.Input<string>;
        passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        tokenType?: pulumi.Input<string>;
    }
}

export namespace okta {
    export interface AuthBackendGroup {
        groupName: pulumi.Input<string>;
        policies: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface AuthBackendUser {
        groups: pulumi.Input<pulumi.Input<string>[]>;
        policies?: pulumi.Input<pulumi.Input<string>[]>;
        username: pulumi.Input<string>;
    }
}

export namespace rabbitMq {
    export interface SecretBackendRoleVhost {
        configure: pulumi.Input<string>;
        host: pulumi.Input<string>;
        read: pulumi.Input<string>;
        write: pulumi.Input<string>;
    }
}
