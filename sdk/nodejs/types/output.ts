// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";

export interface GetPolicyDocumentRule {
    allowedParameters?: outputs.GetPolicyDocumentRuleAllowedParameter[];
    capabilities: string[];
    deniedParameters?: outputs.GetPolicyDocumentRuleDeniedParameter[];
    description?: string;
    maxWrappingTtl?: string;
    minWrappingTtl?: string;
    path: string;
    requiredParameters?: string[];
}

export interface GetPolicyDocumentRuleAllowedParameter {
    key: string;
    values: string[];
}

export interface GetPolicyDocumentRuleDeniedParameter {
    key: string;
    values: string[];
}

export namespace azure {
    export interface BackendRoleAzureRole {
        roleId: string;
        roleName: string;
        scope: string;
    }
}

export namespace database {
    export interface SecretBackendConnectionCassandra {
        connectTimeout?: number;
        hosts?: string[];
        insecureTls?: boolean;
        password?: string;
        pemBundle?: string;
        pemJson?: string;
        port?: number;
        protocolVersion?: number;
        tls?: boolean;
        username?: string;
    }

    export interface SecretBackendConnectionHana {
        connectionUrl?: string;
        maxConnectionLifetime?: number;
        maxIdleConnections?: number;
        maxOpenConnections?: number;
    }

    export interface SecretBackendConnectionMongodb {
        connectionUrl?: string;
    }

    export interface SecretBackendConnectionMssql {
        connectionUrl?: string;
        maxConnectionLifetime?: number;
        maxIdleConnections?: number;
        maxOpenConnections?: number;
    }

    export interface SecretBackendConnectionMysql {
        connectionUrl?: string;
        maxConnectionLifetime?: number;
        maxIdleConnections?: number;
        maxOpenConnections?: number;
    }

    export interface SecretBackendConnectionMysqlAurora {
        connectionUrl?: string;
        maxConnectionLifetime?: number;
        maxIdleConnections?: number;
        maxOpenConnections?: number;
    }

    export interface SecretBackendConnectionMysqlLegacy {
        connectionUrl?: string;
        maxConnectionLifetime?: number;
        maxIdleConnections?: number;
        maxOpenConnections?: number;
    }

    export interface SecretBackendConnectionMysqlRds {
        connectionUrl?: string;
        maxConnectionLifetime?: number;
        maxIdleConnections?: number;
        maxOpenConnections?: number;
    }

    export interface SecretBackendConnectionOracle {
        connectionUrl?: string;
        maxConnectionLifetime?: number;
        maxIdleConnections?: number;
        maxOpenConnections?: number;
    }

    export interface SecretBackendConnectionPostgresql {
        connectionUrl?: string;
        maxConnectionLifetime?: number;
        maxIdleConnections?: number;
        maxOpenConnections?: number;
    }
}

export namespace gcp {
    export interface SecretRolesetBinding {
        resource: string;
        roles: string[];
    }
}

export namespace github {
    export interface AuthBackendTune {
        allowedResponseHeaders?: string[];
        auditNonHmacRequestKeys?: string[];
        auditNonHmacResponseKeys?: string[];
        defaultLeaseTtl?: string;
        listingVisibility?: string;
        maxLeaseTtl?: string;
        passthroughRequestHeaders?: string[];
        tokenType?: string;
    }
}

export namespace identity {
    export interface GetEntityAlias {
        canonicalId: string;
        creationTime: string;
        id: string;
        lastUpdateTime: string;
        mergedFromCanonicalIds: string[];
        metadata: {[key: string]: any};
        mountAccessor: string;
        mountPath: string;
        mountType: string;
        name: string;
    }
}

export namespace jwt {
    export interface AuthBackendTune {
        allowedResponseHeaders?: string[];
        auditNonHmacRequestKeys?: string[];
        auditNonHmacResponseKeys?: string[];
        defaultLeaseTtl?: string;
        listingVisibility?: string;
        maxLeaseTtl?: string;
        passthroughRequestHeaders?: string[];
        tokenType?: string;
    }
}

export namespace okta {
    export interface AuthBackendGroup {
        groupName: string;
        policies: string[];
    }

    export interface AuthBackendUser {
        groups: string[];
        policies?: string[];
        username: string;
    }
}

export namespace rabbitMq {
    export interface SecretBackendRoleVhost {
        configure: string;
        host: string;
        read: string;
        write: string;
    }
}
