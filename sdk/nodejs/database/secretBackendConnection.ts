// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class SecretBackendConnection extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendConnectionState, opts?: pulumi.CustomResourceOptions): SecretBackendConnection {
        return new SecretBackendConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:database/secretBackendConnection:SecretBackendConnection';

    /**
     * Returns true if the given object is an instance of SecretBackendConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendConnection.__pulumiType;
    }

    /**
     * A list of roles that are allowed to use this connection.
     */
    public readonly allowedRoles!: pulumi.Output<string[] | undefined>;
    /**
     * Unique name of the Vault mount to configure.
     */
    public readonly backend!: pulumi.Output<string>;
    /**
     * Connection parameters for the cassandra-database-plugin plugin.
     */
    public readonly cassandra!: pulumi.Output<outputs.database.SecretBackendConnectionCassandra | undefined>;
    /**
     * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
     */
    public readonly data!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Connection parameters for the hana-database-plugin plugin.
     */
    public readonly hana!: pulumi.Output<outputs.database.SecretBackendConnectionHana | undefined>;
    /**
     * Connection parameters for the mongodb-database-plugin plugin.
     */
    public readonly mongodb!: pulumi.Output<outputs.database.SecretBackendConnectionMongodb | undefined>;
    /**
     * Connection parameters for the mssql-database-plugin plugin.
     */
    public readonly mssql!: pulumi.Output<outputs.database.SecretBackendConnectionMssql | undefined>;
    /**
     * Connection parameters for the mysql-database-plugin plugin.
     */
    public readonly mysql!: pulumi.Output<outputs.database.SecretBackendConnectionMysql | undefined>;
    /**
     * Connection parameters for the mysql-aurora-database-plugin plugin.
     */
    public readonly mysqlAurora!: pulumi.Output<outputs.database.SecretBackendConnectionMysqlAurora | undefined>;
    /**
     * Connection parameters for the mysql-legacy-database-plugin plugin.
     */
    public readonly mysqlLegacy!: pulumi.Output<outputs.database.SecretBackendConnectionMysqlLegacy | undefined>;
    /**
     * Connection parameters for the mysql-rds-database-plugin plugin.
     */
    public readonly mysqlRds!: pulumi.Output<outputs.database.SecretBackendConnectionMysqlRds | undefined>;
    /**
     * Name of the database connection.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Connection parameters for the oracle-database-plugin plugin.
     */
    public readonly oracle!: pulumi.Output<outputs.database.SecretBackendConnectionOracle | undefined>;
    /**
     * Connection parameters for the postgresql-database-plugin plugin.
     */
    public readonly postgresql!: pulumi.Output<outputs.database.SecretBackendConnectionPostgresql | undefined>;
    /**
     * A list of database statements to be executed to rotate the root user's credentials.
     */
    public readonly rootRotationStatements!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies if the connection is verified during initial configuration.
     */
    public readonly verifyConnection!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SecretBackendConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendConnectionArgs | SecretBackendConnectionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SecretBackendConnectionState | undefined;
            inputs["allowedRoles"] = state ? state.allowedRoles : undefined;
            inputs["backend"] = state ? state.backend : undefined;
            inputs["cassandra"] = state ? state.cassandra : undefined;
            inputs["data"] = state ? state.data : undefined;
            inputs["hana"] = state ? state.hana : undefined;
            inputs["mongodb"] = state ? state.mongodb : undefined;
            inputs["mssql"] = state ? state.mssql : undefined;
            inputs["mysql"] = state ? state.mysql : undefined;
            inputs["mysqlAurora"] = state ? state.mysqlAurora : undefined;
            inputs["mysqlLegacy"] = state ? state.mysqlLegacy : undefined;
            inputs["mysqlRds"] = state ? state.mysqlRds : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["oracle"] = state ? state.oracle : undefined;
            inputs["postgresql"] = state ? state.postgresql : undefined;
            inputs["rootRotationStatements"] = state ? state.rootRotationStatements : undefined;
            inputs["verifyConnection"] = state ? state.verifyConnection : undefined;
        } else {
            const args = argsOrState as SecretBackendConnectionArgs | undefined;
            if (!args || args.backend === undefined) {
                throw new Error("Missing required property 'backend'");
            }
            inputs["allowedRoles"] = args ? args.allowedRoles : undefined;
            inputs["backend"] = args ? args.backend : undefined;
            inputs["cassandra"] = args ? args.cassandra : undefined;
            inputs["data"] = args ? args.data : undefined;
            inputs["hana"] = args ? args.hana : undefined;
            inputs["mongodb"] = args ? args.mongodb : undefined;
            inputs["mssql"] = args ? args.mssql : undefined;
            inputs["mysql"] = args ? args.mysql : undefined;
            inputs["mysqlAurora"] = args ? args.mysqlAurora : undefined;
            inputs["mysqlLegacy"] = args ? args.mysqlLegacy : undefined;
            inputs["mysqlRds"] = args ? args.mysqlRds : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["oracle"] = args ? args.oracle : undefined;
            inputs["postgresql"] = args ? args.postgresql : undefined;
            inputs["rootRotationStatements"] = args ? args.rootRotationStatements : undefined;
            inputs["verifyConnection"] = args ? args.verifyConnection : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SecretBackendConnection.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendConnection resources.
 */
export interface SecretBackendConnectionState {
    /**
     * A list of roles that are allowed to use this connection.
     */
    readonly allowedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique name of the Vault mount to configure.
     */
    readonly backend?: pulumi.Input<string>;
    /**
     * Connection parameters for the cassandra-database-plugin plugin.
     */
    readonly cassandra?: pulumi.Input<inputs.database.SecretBackendConnectionCassandra>;
    /**
     * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
     */
    readonly data?: pulumi.Input<{[key: string]: any}>;
    /**
     * Connection parameters for the hana-database-plugin plugin.
     */
    readonly hana?: pulumi.Input<inputs.database.SecretBackendConnectionHana>;
    /**
     * Connection parameters for the mongodb-database-plugin plugin.
     */
    readonly mongodb?: pulumi.Input<inputs.database.SecretBackendConnectionMongodb>;
    /**
     * Connection parameters for the mssql-database-plugin plugin.
     */
    readonly mssql?: pulumi.Input<inputs.database.SecretBackendConnectionMssql>;
    /**
     * Connection parameters for the mysql-database-plugin plugin.
     */
    readonly mysql?: pulumi.Input<inputs.database.SecretBackendConnectionMysql>;
    /**
     * Connection parameters for the mysql-aurora-database-plugin plugin.
     */
    readonly mysqlAurora?: pulumi.Input<inputs.database.SecretBackendConnectionMysqlAurora>;
    /**
     * Connection parameters for the mysql-legacy-database-plugin plugin.
     */
    readonly mysqlLegacy?: pulumi.Input<inputs.database.SecretBackendConnectionMysqlLegacy>;
    /**
     * Connection parameters for the mysql-rds-database-plugin plugin.
     */
    readonly mysqlRds?: pulumi.Input<inputs.database.SecretBackendConnectionMysqlRds>;
    /**
     * Name of the database connection.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Connection parameters for the oracle-database-plugin plugin.
     */
    readonly oracle?: pulumi.Input<inputs.database.SecretBackendConnectionOracle>;
    /**
     * Connection parameters for the postgresql-database-plugin plugin.
     */
    readonly postgresql?: pulumi.Input<inputs.database.SecretBackendConnectionPostgresql>;
    /**
     * A list of database statements to be executed to rotate the root user's credentials.
     */
    readonly rootRotationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies if the connection is verified during initial configuration.
     */
    readonly verifyConnection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SecretBackendConnection resource.
 */
export interface SecretBackendConnectionArgs {
    /**
     * A list of roles that are allowed to use this connection.
     */
    readonly allowedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique name of the Vault mount to configure.
     */
    readonly backend: pulumi.Input<string>;
    /**
     * Connection parameters for the cassandra-database-plugin plugin.
     */
    readonly cassandra?: pulumi.Input<inputs.database.SecretBackendConnectionCassandra>;
    /**
     * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
     */
    readonly data?: pulumi.Input<{[key: string]: any}>;
    /**
     * Connection parameters for the hana-database-plugin plugin.
     */
    readonly hana?: pulumi.Input<inputs.database.SecretBackendConnectionHana>;
    /**
     * Connection parameters for the mongodb-database-plugin plugin.
     */
    readonly mongodb?: pulumi.Input<inputs.database.SecretBackendConnectionMongodb>;
    /**
     * Connection parameters for the mssql-database-plugin plugin.
     */
    readonly mssql?: pulumi.Input<inputs.database.SecretBackendConnectionMssql>;
    /**
     * Connection parameters for the mysql-database-plugin plugin.
     */
    readonly mysql?: pulumi.Input<inputs.database.SecretBackendConnectionMysql>;
    /**
     * Connection parameters for the mysql-aurora-database-plugin plugin.
     */
    readonly mysqlAurora?: pulumi.Input<inputs.database.SecretBackendConnectionMysqlAurora>;
    /**
     * Connection parameters for the mysql-legacy-database-plugin plugin.
     */
    readonly mysqlLegacy?: pulumi.Input<inputs.database.SecretBackendConnectionMysqlLegacy>;
    /**
     * Connection parameters for the mysql-rds-database-plugin plugin.
     */
    readonly mysqlRds?: pulumi.Input<inputs.database.SecretBackendConnectionMysqlRds>;
    /**
     * Name of the database connection.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Connection parameters for the oracle-database-plugin plugin.
     */
    readonly oracle?: pulumi.Input<inputs.database.SecretBackendConnectionOracle>;
    /**
     * Connection parameters for the postgresql-database-plugin plugin.
     */
    readonly postgresql?: pulumi.Input<inputs.database.SecretBackendConnectionPostgresql>;
    /**
     * A list of database statements to be executed to rotate the root user's credentials.
     */
    readonly rootRotationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies if the connection is verified during initial configuration.
     */
    readonly verifyConnection?: pulumi.Input<boolean>;
}
