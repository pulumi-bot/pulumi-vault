// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SecretBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing SecretBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretBackendRoleState, opts?: pulumi.CustomResourceOptions): SecretBackendRole {
        return new SecretBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:ssh/secretBackendRole:SecretBackendRole';

    /**
     * Returns true if the given object is an instance of SecretBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretBackendRole.__pulumiType;
    }

    public readonly allowBareDomains!: pulumi.Output<boolean | undefined>;
    public readonly allowHostCertificates!: pulumi.Output<boolean | undefined>;
    public readonly allowSubdomains!: pulumi.Output<boolean | undefined>;
    public readonly allowUserCertificates!: pulumi.Output<boolean | undefined>;
    public readonly allowUserKeyIds!: pulumi.Output<boolean | undefined>;
    public readonly allowedCriticalOptions!: pulumi.Output<string | undefined>;
    public readonly allowedDomains!: pulumi.Output<string | undefined>;
    public readonly allowedExtensions!: pulumi.Output<string | undefined>;
    public readonly allowedUsers!: pulumi.Output<string | undefined>;
    public readonly backend!: pulumi.Output<string>;
    public readonly cidrList!: pulumi.Output<string | undefined>;
    public readonly defaultCriticalOptions!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly defaultExtensions!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly defaultUser!: pulumi.Output<string | undefined>;
    public readonly keyIdFormat!: pulumi.Output<string | undefined>;
    public readonly keyType!: pulumi.Output<string>;
    public readonly maxTtl!: pulumi.Output<string>;
    /**
     * Unique name for the role.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly ttl!: pulumi.Output<string>;

    /**
     * Create a SecretBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretBackendRoleArgs | SecretBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SecretBackendRoleState | undefined;
            inputs["allowBareDomains"] = state ? state.allowBareDomains : undefined;
            inputs["allowHostCertificates"] = state ? state.allowHostCertificates : undefined;
            inputs["allowSubdomains"] = state ? state.allowSubdomains : undefined;
            inputs["allowUserCertificates"] = state ? state.allowUserCertificates : undefined;
            inputs["allowUserKeyIds"] = state ? state.allowUserKeyIds : undefined;
            inputs["allowedCriticalOptions"] = state ? state.allowedCriticalOptions : undefined;
            inputs["allowedDomains"] = state ? state.allowedDomains : undefined;
            inputs["allowedExtensions"] = state ? state.allowedExtensions : undefined;
            inputs["allowedUsers"] = state ? state.allowedUsers : undefined;
            inputs["backend"] = state ? state.backend : undefined;
            inputs["cidrList"] = state ? state.cidrList : undefined;
            inputs["defaultCriticalOptions"] = state ? state.defaultCriticalOptions : undefined;
            inputs["defaultExtensions"] = state ? state.defaultExtensions : undefined;
            inputs["defaultUser"] = state ? state.defaultUser : undefined;
            inputs["keyIdFormat"] = state ? state.keyIdFormat : undefined;
            inputs["keyType"] = state ? state.keyType : undefined;
            inputs["maxTtl"] = state ? state.maxTtl : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as SecretBackendRoleArgs | undefined;
            if (!args || args.backend === undefined) {
                throw new Error("Missing required property 'backend'");
            }
            if (!args || args.keyType === undefined) {
                throw new Error("Missing required property 'keyType'");
            }
            inputs["allowBareDomains"] = args ? args.allowBareDomains : undefined;
            inputs["allowHostCertificates"] = args ? args.allowHostCertificates : undefined;
            inputs["allowSubdomains"] = args ? args.allowSubdomains : undefined;
            inputs["allowUserCertificates"] = args ? args.allowUserCertificates : undefined;
            inputs["allowUserKeyIds"] = args ? args.allowUserKeyIds : undefined;
            inputs["allowedCriticalOptions"] = args ? args.allowedCriticalOptions : undefined;
            inputs["allowedDomains"] = args ? args.allowedDomains : undefined;
            inputs["allowedExtensions"] = args ? args.allowedExtensions : undefined;
            inputs["allowedUsers"] = args ? args.allowedUsers : undefined;
            inputs["backend"] = args ? args.backend : undefined;
            inputs["cidrList"] = args ? args.cidrList : undefined;
            inputs["defaultCriticalOptions"] = args ? args.defaultCriticalOptions : undefined;
            inputs["defaultExtensions"] = args ? args.defaultExtensions : undefined;
            inputs["defaultUser"] = args ? args.defaultUser : undefined;
            inputs["keyIdFormat"] = args ? args.keyIdFormat : undefined;
            inputs["keyType"] = args ? args.keyType : undefined;
            inputs["maxTtl"] = args ? args.maxTtl : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SecretBackendRole.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretBackendRole resources.
 */
export interface SecretBackendRoleState {
    readonly allowBareDomains?: pulumi.Input<boolean>;
    readonly allowHostCertificates?: pulumi.Input<boolean>;
    readonly allowSubdomains?: pulumi.Input<boolean>;
    readonly allowUserCertificates?: pulumi.Input<boolean>;
    readonly allowUserKeyIds?: pulumi.Input<boolean>;
    readonly allowedCriticalOptions?: pulumi.Input<string>;
    readonly allowedDomains?: pulumi.Input<string>;
    readonly allowedExtensions?: pulumi.Input<string>;
    readonly allowedUsers?: pulumi.Input<string>;
    readonly backend?: pulumi.Input<string>;
    readonly cidrList?: pulumi.Input<string>;
    readonly defaultCriticalOptions?: pulumi.Input<{[key: string]: any}>;
    readonly defaultExtensions?: pulumi.Input<{[key: string]: any}>;
    readonly defaultUser?: pulumi.Input<string>;
    readonly keyIdFormat?: pulumi.Input<string>;
    readonly keyType?: pulumi.Input<string>;
    readonly maxTtl?: pulumi.Input<string>;
    /**
     * Unique name for the role.
     */
    readonly name?: pulumi.Input<string>;
    readonly ttl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretBackendRole resource.
 */
export interface SecretBackendRoleArgs {
    readonly allowBareDomains?: pulumi.Input<boolean>;
    readonly allowHostCertificates?: pulumi.Input<boolean>;
    readonly allowSubdomains?: pulumi.Input<boolean>;
    readonly allowUserCertificates?: pulumi.Input<boolean>;
    readonly allowUserKeyIds?: pulumi.Input<boolean>;
    readonly allowedCriticalOptions?: pulumi.Input<string>;
    readonly allowedDomains?: pulumi.Input<string>;
    readonly allowedExtensions?: pulumi.Input<string>;
    readonly allowedUsers?: pulumi.Input<string>;
    readonly backend: pulumi.Input<string>;
    readonly cidrList?: pulumi.Input<string>;
    readonly defaultCriticalOptions?: pulumi.Input<{[key: string]: any}>;
    readonly defaultExtensions?: pulumi.Input<{[key: string]: any}>;
    readonly defaultUser?: pulumi.Input<string>;
    readonly keyIdFormat?: pulumi.Input<string>;
    readonly keyType: pulumi.Input<string>;
    readonly maxTtl?: pulumi.Input<string>;
    /**
     * Unique name for the role.
     */
    readonly name?: pulumi.Input<string>;
    readonly ttl?: pulumi.Input<string>;
}
