// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class AuthBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing AuthBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthBackendRoleState, opts?: pulumi.CustomResourceOptions): AuthBackendRole {
        return new AuthBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:jwt/authBackendRole:AuthBackendRole';

    /**
     * Returns true if the given object is an instance of AuthBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthBackendRole.__pulumiType;
    }

    /**
     * The list of allowed values for redirect_uri during OIDC logins.
     */
    public readonly allowedRedirectUris!: pulumi.Output<string[] | undefined>;
    /**
     * Unique name of the auth backend to configure.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * List of aud claims to match against. Any match is sufficient.
     */
    public readonly boundAudiences!: pulumi.Output<string[]>;
    /**
     * List of CIDRs valid as the source address for login requests. This value is also encoded into any resulting token.
     */
    public readonly boundCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * Map of claims/values to match against. The expected value may be a single string or a comma-separated string list.
     */
    public readonly boundClaims!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * If set, requires that the sub claim matches this value.
     */
    public readonly boundSubject!: pulumi.Output<string | undefined>;
    /**
     * Map of claims (keys) to be copied to specified metadata fields (values).
     */
    public readonly claimMappings!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The claim to use to uniquely identify the set of groups to which the user belongs; this will be used as the names
     * for the Identity group aliases created due to a successful login. The claim value must be a list of strings.
     */
    public readonly groupsClaim!: pulumi.Output<string | undefined>;
    /**
     * A pattern of delimiters used to allow the groups_claim to live outside of the top-level JWT structure. For instance,
     * a groups_claim of meta/user.name/groups with this field set to // will expect nested structures named meta,
     * user.name, and groups. If this field was set to /./ the groups information would expect to be via nested structures
     * of meta, user, name, and groups.
     */
    public readonly groupsClaimDelimiterPattern!: pulumi.Output<string | undefined>;
    /**
     * Number of seconds after which issued tokens can no longer be renewed.
     */
    public readonly maxTtl!: pulumi.Output<number | undefined>;
    /**
     * Number of times issued tokens can be used. Setting this to 0 or leaving it unset means unlimited uses.
     */
    public readonly numUses!: pulumi.Output<number | undefined>;
    /**
     * List of OIDC scopes to be used with an OIDC role. The standard scope "openid" is automatically included and need not
     * be specified.
     */
    public readonly oidcScopes!: pulumi.Output<string[] | undefined>;
    /**
     * Number of seconds to set the TTL to for issued tokens upon renewal. Makes the token a periodic token, which will
     * never expire as long as it is renewed before the TTL each period.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * Policies to be set on tokens issued using this role.
     */
    public readonly policies!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the role.
     */
    public readonly roleName!: pulumi.Output<string>;
    /**
     * Type of role, either "oidc" (default) or "jwt"
     */
    public readonly roleType!: pulumi.Output<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    public readonly tokenBoundCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    public readonly tokenExplicitMaxTtl!: pulumi.Output<number | undefined>;
    /**
     * The maximum lifetime of the generated token
     */
    public readonly tokenMaxTtl!: pulumi.Output<number | undefined>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    public readonly tokenNoDefaultPolicy!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    public readonly tokenNumUses!: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Period
     */
    public readonly tokenPeriod!: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Policies
     */
    public readonly tokenPolicies!: pulumi.Output<string[] | undefined>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    public readonly tokenTtl!: pulumi.Output<number | undefined>;
    /**
     * The type of token to generate, service or batch
     */
    public readonly tokenType!: pulumi.Output<string | undefined>;
    /**
     * Default number of seconds to set as the TTL for issued tokens and at renewal time.
     */
    public readonly ttl!: pulumi.Output<number | undefined>;
    /**
     * The claim to use to uniquely identify the user; this will be used as the name for the Identity entity alias created
     * due to a successful login.
     */
    public readonly userClaim!: pulumi.Output<string>;

    /**
     * Create a AuthBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthBackendRoleArgs | AuthBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AuthBackendRoleState | undefined;
            inputs["allowedRedirectUris"] = state ? state.allowedRedirectUris : undefined;
            inputs["backend"] = state ? state.backend : undefined;
            inputs["boundAudiences"] = state ? state.boundAudiences : undefined;
            inputs["boundCidrs"] = state ? state.boundCidrs : undefined;
            inputs["boundClaims"] = state ? state.boundClaims : undefined;
            inputs["boundSubject"] = state ? state.boundSubject : undefined;
            inputs["claimMappings"] = state ? state.claimMappings : undefined;
            inputs["groupsClaim"] = state ? state.groupsClaim : undefined;
            inputs["groupsClaimDelimiterPattern"] = state ? state.groupsClaimDelimiterPattern : undefined;
            inputs["maxTtl"] = state ? state.maxTtl : undefined;
            inputs["numUses"] = state ? state.numUses : undefined;
            inputs["oidcScopes"] = state ? state.oidcScopes : undefined;
            inputs["period"] = state ? state.period : undefined;
            inputs["policies"] = state ? state.policies : undefined;
            inputs["roleName"] = state ? state.roleName : undefined;
            inputs["roleType"] = state ? state.roleType : undefined;
            inputs["tokenBoundCidrs"] = state ? state.tokenBoundCidrs : undefined;
            inputs["tokenExplicitMaxTtl"] = state ? state.tokenExplicitMaxTtl : undefined;
            inputs["tokenMaxTtl"] = state ? state.tokenMaxTtl : undefined;
            inputs["tokenNoDefaultPolicy"] = state ? state.tokenNoDefaultPolicy : undefined;
            inputs["tokenNumUses"] = state ? state.tokenNumUses : undefined;
            inputs["tokenPeriod"] = state ? state.tokenPeriod : undefined;
            inputs["tokenPolicies"] = state ? state.tokenPolicies : undefined;
            inputs["tokenTtl"] = state ? state.tokenTtl : undefined;
            inputs["tokenType"] = state ? state.tokenType : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
            inputs["userClaim"] = state ? state.userClaim : undefined;
        } else {
            const args = argsOrState as AuthBackendRoleArgs | undefined;
            if (!args || args.boundAudiences === undefined) {
                throw new Error("Missing required property 'boundAudiences'");
            }
            if (!args || args.roleName === undefined) {
                throw new Error("Missing required property 'roleName'");
            }
            if (!args || args.userClaim === undefined) {
                throw new Error("Missing required property 'userClaim'");
            }
            inputs["allowedRedirectUris"] = args ? args.allowedRedirectUris : undefined;
            inputs["backend"] = args ? args.backend : undefined;
            inputs["boundAudiences"] = args ? args.boundAudiences : undefined;
            inputs["boundCidrs"] = args ? args.boundCidrs : undefined;
            inputs["boundClaims"] = args ? args.boundClaims : undefined;
            inputs["boundSubject"] = args ? args.boundSubject : undefined;
            inputs["claimMappings"] = args ? args.claimMappings : undefined;
            inputs["groupsClaim"] = args ? args.groupsClaim : undefined;
            inputs["groupsClaimDelimiterPattern"] = args ? args.groupsClaimDelimiterPattern : undefined;
            inputs["maxTtl"] = args ? args.maxTtl : undefined;
            inputs["numUses"] = args ? args.numUses : undefined;
            inputs["oidcScopes"] = args ? args.oidcScopes : undefined;
            inputs["period"] = args ? args.period : undefined;
            inputs["policies"] = args ? args.policies : undefined;
            inputs["roleName"] = args ? args.roleName : undefined;
            inputs["roleType"] = args ? args.roleType : undefined;
            inputs["tokenBoundCidrs"] = args ? args.tokenBoundCidrs : undefined;
            inputs["tokenExplicitMaxTtl"] = args ? args.tokenExplicitMaxTtl : undefined;
            inputs["tokenMaxTtl"] = args ? args.tokenMaxTtl : undefined;
            inputs["tokenNoDefaultPolicy"] = args ? args.tokenNoDefaultPolicy : undefined;
            inputs["tokenNumUses"] = args ? args.tokenNumUses : undefined;
            inputs["tokenPeriod"] = args ? args.tokenPeriod : undefined;
            inputs["tokenPolicies"] = args ? args.tokenPolicies : undefined;
            inputs["tokenTtl"] = args ? args.tokenTtl : undefined;
            inputs["tokenType"] = args ? args.tokenType : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
            inputs["userClaim"] = args ? args.userClaim : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(AuthBackendRole.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthBackendRole resources.
 */
export interface AuthBackendRoleState {
    /**
     * The list of allowed values for redirect_uri during OIDC logins.
     */
    readonly allowedRedirectUris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique name of the auth backend to configure.
     */
    readonly backend?: pulumi.Input<string>;
    /**
     * List of aud claims to match against. Any match is sufficient.
     */
    readonly boundAudiences?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of CIDRs valid as the source address for login requests. This value is also encoded into any resulting token.
     */
    readonly boundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of claims/values to match against. The expected value may be a single string or a comma-separated string list.
     */
    readonly boundClaims?: pulumi.Input<{[key: string]: any}>;
    /**
     * If set, requires that the sub claim matches this value.
     */
    readonly boundSubject?: pulumi.Input<string>;
    /**
     * Map of claims (keys) to be copied to specified metadata fields (values).
     */
    readonly claimMappings?: pulumi.Input<{[key: string]: any}>;
    /**
     * The claim to use to uniquely identify the set of groups to which the user belongs; this will be used as the names
     * for the Identity group aliases created due to a successful login. The claim value must be a list of strings.
     */
    readonly groupsClaim?: pulumi.Input<string>;
    /**
     * A pattern of delimiters used to allow the groups_claim to live outside of the top-level JWT structure. For instance,
     * a groups_claim of meta/user.name/groups with this field set to // will expect nested structures named meta,
     * user.name, and groups. If this field was set to /./ the groups information would expect to be via nested structures
     * of meta, user, name, and groups.
     */
    readonly groupsClaimDelimiterPattern?: pulumi.Input<string>;
    /**
     * Number of seconds after which issued tokens can no longer be renewed.
     */
    readonly maxTtl?: pulumi.Input<number>;
    /**
     * Number of times issued tokens can be used. Setting this to 0 or leaving it unset means unlimited uses.
     */
    readonly numUses?: pulumi.Input<number>;
    /**
     * List of OIDC scopes to be used with an OIDC role. The standard scope "openid" is automatically included and need not
     * be specified.
     */
    readonly oidcScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of seconds to set the TTL to for issued tokens upon renewal. Makes the token a periodic token, which will
     * never expire as long as it is renewed before the TTL each period.
     */
    readonly period?: pulumi.Input<number>;
    /**
     * Policies to be set on tokens issued using this role.
     */
    readonly policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the role.
     */
    readonly roleName?: pulumi.Input<string>;
    /**
     * Type of role, either "oidc" (default) or "jwt"
     */
    readonly roleType?: pulumi.Input<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    readonly tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    readonly tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    readonly tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    readonly tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    readonly tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    readonly tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    readonly tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    readonly tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    readonly tokenType?: pulumi.Input<string>;
    /**
     * Default number of seconds to set as the TTL for issued tokens and at renewal time.
     */
    readonly ttl?: pulumi.Input<number>;
    /**
     * The claim to use to uniquely identify the user; this will be used as the name for the Identity entity alias created
     * due to a successful login.
     */
    readonly userClaim?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthBackendRole resource.
 */
export interface AuthBackendRoleArgs {
    /**
     * The list of allowed values for redirect_uri during OIDC logins.
     */
    readonly allowedRedirectUris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique name of the auth backend to configure.
     */
    readonly backend?: pulumi.Input<string>;
    /**
     * List of aud claims to match against. Any match is sufficient.
     */
    readonly boundAudiences: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of CIDRs valid as the source address for login requests. This value is also encoded into any resulting token.
     */
    readonly boundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of claims/values to match against. The expected value may be a single string or a comma-separated string list.
     */
    readonly boundClaims?: pulumi.Input<{[key: string]: any}>;
    /**
     * If set, requires that the sub claim matches this value.
     */
    readonly boundSubject?: pulumi.Input<string>;
    /**
     * Map of claims (keys) to be copied to specified metadata fields (values).
     */
    readonly claimMappings?: pulumi.Input<{[key: string]: any}>;
    /**
     * The claim to use to uniquely identify the set of groups to which the user belongs; this will be used as the names
     * for the Identity group aliases created due to a successful login. The claim value must be a list of strings.
     */
    readonly groupsClaim?: pulumi.Input<string>;
    /**
     * A pattern of delimiters used to allow the groups_claim to live outside of the top-level JWT structure. For instance,
     * a groups_claim of meta/user.name/groups with this field set to // will expect nested structures named meta,
     * user.name, and groups. If this field was set to /./ the groups information would expect to be via nested structures
     * of meta, user, name, and groups.
     */
    readonly groupsClaimDelimiterPattern?: pulumi.Input<string>;
    /**
     * Number of seconds after which issued tokens can no longer be renewed.
     */
    readonly maxTtl?: pulumi.Input<number>;
    /**
     * Number of times issued tokens can be used. Setting this to 0 or leaving it unset means unlimited uses.
     */
    readonly numUses?: pulumi.Input<number>;
    /**
     * List of OIDC scopes to be used with an OIDC role. The standard scope "openid" is automatically included and need not
     * be specified.
     */
    readonly oidcScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of seconds to set the TTL to for issued tokens upon renewal. Makes the token a periodic token, which will
     * never expire as long as it is renewed before the TTL each period.
     */
    readonly period?: pulumi.Input<number>;
    /**
     * Policies to be set on tokens issued using this role.
     */
    readonly policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the role.
     */
    readonly roleName: pulumi.Input<string>;
    /**
     * Type of role, either "oidc" (default) or "jwt"
     */
    readonly roleType?: pulumi.Input<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    readonly tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    readonly tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    readonly tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    readonly tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    readonly tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    readonly tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    readonly tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    readonly tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    readonly tokenType?: pulumi.Input<string>;
    /**
     * Default number of seconds to set as the TTL for issued tokens and at renewal time.
     */
    readonly ttl?: pulumi.Input<number>;
    /**
     * The claim to use to uniquely identify the user; this will be used as the name for the Identity entity alias created
     * due to a successful login.
     */
    readonly userClaim: pulumi.Input<string>;
}
