// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class AuthBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing AuthBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthBackendRoleState, opts?: pulumi.CustomResourceOptions): AuthBackendRole {
        return new AuthBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:aws/authBackendRole:AuthBackendRole';

    /**
     * Returns true if the given object is an instance of AuthBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthBackendRole.__pulumiType;
    }

    /**
     * When true, allows migration of the underlying instance where the client resides. Use with caution.
     */
    public readonly allowInstanceMigration!: pulumi.Output<boolean | undefined>;
    /**
     * The auth type permitted for this role.
     */
    public readonly authType!: pulumi.Output<string | undefined>;
    /**
     * Unique name of the auth backend to configure.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * Only EC2 instances with this account ID in their identity document will be permitted to log in.
     */
    public readonly boundAccountIds!: pulumi.Output<string[] | undefined>;
    /**
     * Only EC2 instances using this AMI ID will be permitted to log in.
     */
    public readonly boundAmiIds!: pulumi.Output<string[] | undefined>;
    /**
     * Only EC2 instances that match this instance ID will be permitted to log in.
     */
    public readonly boundEc2InstanceIds!: pulumi.Output<string[] | undefined>;
    /**
     * Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.
     */
    public readonly boundIamInstanceProfileArns!: pulumi.Output<string[] | undefined>;
    /**
     * The IAM principal that must be authenticated using the iam auth method.
     */
    public readonly boundIamPrincipalArns!: pulumi.Output<string[] | undefined>;
    /**
     * Only EC2 instances that match this IAM role ARN will be permitted to log in.
     */
    public readonly boundIamRoleArns!: pulumi.Output<string[] | undefined>;
    /**
     * Only EC2 instances in this region will be permitted to log in.
     */
    public readonly boundRegions!: pulumi.Output<string[] | undefined>;
    /**
     * Only EC2 instances associated with this subnet ID will be permitted to log in.
     */
    public readonly boundSubnetIds!: pulumi.Output<string[] | undefined>;
    /**
     * Only EC2 instances associated with this VPC ID will be permitted to log in.
     */
    public readonly boundVpcIds!: pulumi.Output<string[] | undefined>;
    /**
     * When true, only allows a single token to be granted per instance ID.
     */
    public readonly disallowReauthentication!: pulumi.Output<boolean | undefined>;
    /**
     * The region to search for the inferred entities in.
     */
    public readonly inferredAwsRegion!: pulumi.Output<string | undefined>;
    /**
     * The type of inferencing Vault should do.
     */
    public readonly inferredEntityType!: pulumi.Output<string | undefined>;
    /**
     * The maximum allowed lifetime of tokens issued using this role, provided as the number of seconds.
     */
    public readonly maxTtl!: pulumi.Output<number | undefined>;
    /**
     * If set, indicates that the token generated using this role should never expire. The token should be renewed within
     * the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. The
     * maximum allowed lifetime of token issued using this role. Specified as a number of seconds.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * Policies to be set on tokens issued using this role.
     */
    public readonly policies!: pulumi.Output<string[] | undefined>;
    /**
     * Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal
     * and recreating it with the same name won't automatically grant the new principal the same roles in Vault that the
     * old principal had.
     */
    public readonly resolveAwsUniqueIds!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the role.
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * The key of the tag on EC2 instance to use for role tags.
     */
    public readonly roleTag!: pulumi.Output<string | undefined>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    public readonly tokenBoundCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    public readonly tokenExplicitMaxTtl!: pulumi.Output<number | undefined>;
    /**
     * The maximum lifetime of the generated token
     */
    public readonly tokenMaxTtl!: pulumi.Output<number | undefined>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    public readonly tokenNoDefaultPolicy!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    public readonly tokenNumUses!: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Period
     */
    public readonly tokenPeriod!: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Policies
     */
    public readonly tokenPolicies!: pulumi.Output<string[] | undefined>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    public readonly tokenTtl!: pulumi.Output<number | undefined>;
    /**
     * The type of token to generate, service or batch
     */
    public readonly tokenType!: pulumi.Output<string | undefined>;
    /**
     * The TTL period of tokens issued using this role, provided as the number of seconds.
     */
    public readonly ttl!: pulumi.Output<number | undefined>;

    /**
     * Create a AuthBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthBackendRoleArgs | AuthBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AuthBackendRoleState | undefined;
            inputs["allowInstanceMigration"] = state ? state.allowInstanceMigration : undefined;
            inputs["authType"] = state ? state.authType : undefined;
            inputs["backend"] = state ? state.backend : undefined;
            inputs["boundAccountIds"] = state ? state.boundAccountIds : undefined;
            inputs["boundAmiIds"] = state ? state.boundAmiIds : undefined;
            inputs["boundEc2InstanceIds"] = state ? state.boundEc2InstanceIds : undefined;
            inputs["boundIamInstanceProfileArns"] = state ? state.boundIamInstanceProfileArns : undefined;
            inputs["boundIamPrincipalArns"] = state ? state.boundIamPrincipalArns : undefined;
            inputs["boundIamRoleArns"] = state ? state.boundIamRoleArns : undefined;
            inputs["boundRegions"] = state ? state.boundRegions : undefined;
            inputs["boundSubnetIds"] = state ? state.boundSubnetIds : undefined;
            inputs["boundVpcIds"] = state ? state.boundVpcIds : undefined;
            inputs["disallowReauthentication"] = state ? state.disallowReauthentication : undefined;
            inputs["inferredAwsRegion"] = state ? state.inferredAwsRegion : undefined;
            inputs["inferredEntityType"] = state ? state.inferredEntityType : undefined;
            inputs["maxTtl"] = state ? state.maxTtl : undefined;
            inputs["period"] = state ? state.period : undefined;
            inputs["policies"] = state ? state.policies : undefined;
            inputs["resolveAwsUniqueIds"] = state ? state.resolveAwsUniqueIds : undefined;
            inputs["role"] = state ? state.role : undefined;
            inputs["roleTag"] = state ? state.roleTag : undefined;
            inputs["tokenBoundCidrs"] = state ? state.tokenBoundCidrs : undefined;
            inputs["tokenExplicitMaxTtl"] = state ? state.tokenExplicitMaxTtl : undefined;
            inputs["tokenMaxTtl"] = state ? state.tokenMaxTtl : undefined;
            inputs["tokenNoDefaultPolicy"] = state ? state.tokenNoDefaultPolicy : undefined;
            inputs["tokenNumUses"] = state ? state.tokenNumUses : undefined;
            inputs["tokenPeriod"] = state ? state.tokenPeriod : undefined;
            inputs["tokenPolicies"] = state ? state.tokenPolicies : undefined;
            inputs["tokenTtl"] = state ? state.tokenTtl : undefined;
            inputs["tokenType"] = state ? state.tokenType : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as AuthBackendRoleArgs | undefined;
            if (!args || args.role === undefined) {
                throw new Error("Missing required property 'role'");
            }
            inputs["allowInstanceMigration"] = args ? args.allowInstanceMigration : undefined;
            inputs["authType"] = args ? args.authType : undefined;
            inputs["backend"] = args ? args.backend : undefined;
            inputs["boundAccountIds"] = args ? args.boundAccountIds : undefined;
            inputs["boundAmiIds"] = args ? args.boundAmiIds : undefined;
            inputs["boundEc2InstanceIds"] = args ? args.boundEc2InstanceIds : undefined;
            inputs["boundIamInstanceProfileArns"] = args ? args.boundIamInstanceProfileArns : undefined;
            inputs["boundIamPrincipalArns"] = args ? args.boundIamPrincipalArns : undefined;
            inputs["boundIamRoleArns"] = args ? args.boundIamRoleArns : undefined;
            inputs["boundRegions"] = args ? args.boundRegions : undefined;
            inputs["boundSubnetIds"] = args ? args.boundSubnetIds : undefined;
            inputs["boundVpcIds"] = args ? args.boundVpcIds : undefined;
            inputs["disallowReauthentication"] = args ? args.disallowReauthentication : undefined;
            inputs["inferredAwsRegion"] = args ? args.inferredAwsRegion : undefined;
            inputs["inferredEntityType"] = args ? args.inferredEntityType : undefined;
            inputs["maxTtl"] = args ? args.maxTtl : undefined;
            inputs["period"] = args ? args.period : undefined;
            inputs["policies"] = args ? args.policies : undefined;
            inputs["resolveAwsUniqueIds"] = args ? args.resolveAwsUniqueIds : undefined;
            inputs["role"] = args ? args.role : undefined;
            inputs["roleTag"] = args ? args.roleTag : undefined;
            inputs["tokenBoundCidrs"] = args ? args.tokenBoundCidrs : undefined;
            inputs["tokenExplicitMaxTtl"] = args ? args.tokenExplicitMaxTtl : undefined;
            inputs["tokenMaxTtl"] = args ? args.tokenMaxTtl : undefined;
            inputs["tokenNoDefaultPolicy"] = args ? args.tokenNoDefaultPolicy : undefined;
            inputs["tokenNumUses"] = args ? args.tokenNumUses : undefined;
            inputs["tokenPeriod"] = args ? args.tokenPeriod : undefined;
            inputs["tokenPolicies"] = args ? args.tokenPolicies : undefined;
            inputs["tokenTtl"] = args ? args.tokenTtl : undefined;
            inputs["tokenType"] = args ? args.tokenType : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(AuthBackendRole.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthBackendRole resources.
 */
export interface AuthBackendRoleState {
    /**
     * When true, allows migration of the underlying instance where the client resides. Use with caution.
     */
    readonly allowInstanceMigration?: pulumi.Input<boolean>;
    /**
     * The auth type permitted for this role.
     */
    readonly authType?: pulumi.Input<string>;
    /**
     * Unique name of the auth backend to configure.
     */
    readonly backend?: pulumi.Input<string>;
    /**
     * Only EC2 instances with this account ID in their identity document will be permitted to log in.
     */
    readonly boundAccountIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances using this AMI ID will be permitted to log in.
     */
    readonly boundAmiIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances that match this instance ID will be permitted to log in.
     */
    readonly boundEc2InstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.
     */
    readonly boundIamInstanceProfileArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IAM principal that must be authenticated using the iam auth method.
     */
    readonly boundIamPrincipalArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances that match this IAM role ARN will be permitted to log in.
     */
    readonly boundIamRoleArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances in this region will be permitted to log in.
     */
    readonly boundRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances associated with this subnet ID will be permitted to log in.
     */
    readonly boundSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances associated with this VPC ID will be permitted to log in.
     */
    readonly boundVpcIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When true, only allows a single token to be granted per instance ID.
     */
    readonly disallowReauthentication?: pulumi.Input<boolean>;
    /**
     * The region to search for the inferred entities in.
     */
    readonly inferredAwsRegion?: pulumi.Input<string>;
    /**
     * The type of inferencing Vault should do.
     */
    readonly inferredEntityType?: pulumi.Input<string>;
    /**
     * The maximum allowed lifetime of tokens issued using this role, provided as the number of seconds.
     */
    readonly maxTtl?: pulumi.Input<number>;
    /**
     * If set, indicates that the token generated using this role should never expire. The token should be renewed within
     * the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. The
     * maximum allowed lifetime of token issued using this role. Specified as a number of seconds.
     */
    readonly period?: pulumi.Input<number>;
    /**
     * Policies to be set on tokens issued using this role.
     */
    readonly policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal
     * and recreating it with the same name won't automatically grant the new principal the same roles in Vault that the
     * old principal had.
     */
    readonly resolveAwsUniqueIds?: pulumi.Input<boolean>;
    /**
     * Name of the role.
     */
    readonly role?: pulumi.Input<string>;
    /**
     * The key of the tag on EC2 instance to use for role tags.
     */
    readonly roleTag?: pulumi.Input<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    readonly tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    readonly tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    readonly tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    readonly tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    readonly tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    readonly tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    readonly tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    readonly tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    readonly tokenType?: pulumi.Input<string>;
    /**
     * The TTL period of tokens issued using this role, provided as the number of seconds.
     */
    readonly ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AuthBackendRole resource.
 */
export interface AuthBackendRoleArgs {
    /**
     * When true, allows migration of the underlying instance where the client resides. Use with caution.
     */
    readonly allowInstanceMigration?: pulumi.Input<boolean>;
    /**
     * The auth type permitted for this role.
     */
    readonly authType?: pulumi.Input<string>;
    /**
     * Unique name of the auth backend to configure.
     */
    readonly backend?: pulumi.Input<string>;
    /**
     * Only EC2 instances with this account ID in their identity document will be permitted to log in.
     */
    readonly boundAccountIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances using this AMI ID will be permitted to log in.
     */
    readonly boundAmiIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances that match this instance ID will be permitted to log in.
     */
    readonly boundEc2InstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.
     */
    readonly boundIamInstanceProfileArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IAM principal that must be authenticated using the iam auth method.
     */
    readonly boundIamPrincipalArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances that match this IAM role ARN will be permitted to log in.
     */
    readonly boundIamRoleArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances in this region will be permitted to log in.
     */
    readonly boundRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances associated with this subnet ID will be permitted to log in.
     */
    readonly boundSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances associated with this VPC ID will be permitted to log in.
     */
    readonly boundVpcIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When true, only allows a single token to be granted per instance ID.
     */
    readonly disallowReauthentication?: pulumi.Input<boolean>;
    /**
     * The region to search for the inferred entities in.
     */
    readonly inferredAwsRegion?: pulumi.Input<string>;
    /**
     * The type of inferencing Vault should do.
     */
    readonly inferredEntityType?: pulumi.Input<string>;
    /**
     * The maximum allowed lifetime of tokens issued using this role, provided as the number of seconds.
     */
    readonly maxTtl?: pulumi.Input<number>;
    /**
     * If set, indicates that the token generated using this role should never expire. The token should be renewed within
     * the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. The
     * maximum allowed lifetime of token issued using this role. Specified as a number of seconds.
     */
    readonly period?: pulumi.Input<number>;
    /**
     * Policies to be set on tokens issued using this role.
     */
    readonly policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal
     * and recreating it with the same name won't automatically grant the new principal the same roles in Vault that the
     * old principal had.
     */
    readonly resolveAwsUniqueIds?: pulumi.Input<boolean>;
    /**
     * Name of the role.
     */
    readonly role: pulumi.Input<string>;
    /**
     * The key of the tag on EC2 instance to use for role tags.
     */
    readonly roleTag?: pulumi.Input<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    readonly tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    readonly tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    readonly tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    readonly tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    readonly tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    readonly tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    readonly tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    readonly tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    readonly tokenType?: pulumi.Input<string>;
    /**
     * The TTL period of tokens issued using this role, provided as the number of seconds.
     */
    readonly ttl?: pulumi.Input<number>;
}
